{"ast":null,"code":"\"use strict\";\n\nvar _assertThisInitialized = require(\"C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\n\nvar _readableStream = require(\"readable-stream\");\n\nvar _token = require(\"./token/token\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _packet = require(\"./packet\");\n\nvar _errors = require(\"./errors\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @private\n */\n\n\nvar FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n\n};\n/**\n * @private\n */\n\nvar DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n/**\n * @private\n */\n// A transform that converts rows to packets.\n\nvar RowTransform = /*#__PURE__*/function (_readableStream$Trans) {\n  _inherits(RowTransform, _readableStream$Trans);\n\n  var _super = _createSuper(RowTransform);\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  function RowTransform(bulkLoad) {\n    var _this;\n\n    _classCallCheck(this, RowTransform);\n\n    _this = _super.call(this, {\n      writableObjectMode: true\n    });\n    _this.columnMetadataWritten = void 0;\n    _this.bulkLoad = void 0;\n    _this.mainOptions = void 0;\n    _this.columns = void 0;\n    _this.bulkLoad = bulkLoad;\n    _this.mainOptions = bulkLoad.options;\n    _this.columns = bulkLoad.columns;\n    _this.columnMetadataWritten = false;\n    return _this;\n  }\n  /**\n   * @private\n   */\n\n\n  _createClass(RowTransform, [{\n    key: \"_transform\",\n    value: function _transform(row, _encoding, callback) {\n      if (!this.columnMetadataWritten) {\n        this.push(this.bulkLoad.getColMetaData());\n        this.columnMetadataWritten = true;\n      }\n\n      var buf = new _writableTrackingBuffer.default(64, 'ucs2', true);\n      buf.writeUInt8(_token.TYPE.ROW);\n      this.push(buf.data);\n\n      for (var i = 0; i < this.columns.length; i++) {\n        var c = this.columns[i];\n\n        if (this.bulkLoad.options.validateBulkLoadParameters) {\n          var error = c.type.validate(row[i]);\n\n          if (error instanceof TypeError) {\n            return callback(error);\n          }\n        }\n\n        var parameter = {\n          length: c.length,\n          scale: c.scale,\n          precision: c.precision,\n          value: row[i]\n        };\n\n        var _iterator = _createForOfIteratorHelper(c.type.generateParameterData(parameter, this.mainOptions)),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var chunk = _step.value;\n            this.push(chunk);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      process.nextTick(callback);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_flush\",\n    value: function _flush(callback) {\n      this.push(this.bulkLoad.createDoneToken());\n      process.nextTick(callback);\n    }\n  }]);\n\n  return RowTransform;\n}(_readableStream.Transform);\n/**\n * A BulkLoad instance is used to perform a bulk insert.\n *\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\n *\n * Example of BulkLoad Usages:\n *\n * ```js\n * // optional BulkLoad options\n * const options = { keepNulls: true };\n *\n * // instantiate - provide the table where you'll be inserting to, options and a callback\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\n *   console.log('inserted %d rows', rowCount);\n * });\n *\n * // setup your columns - always indicate whether the column is nullable\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\n *\n * // add rows\n * bulkLoad.addRow({ myInt: 7, myString: 'hello' });\n * bulkLoad.addRow({ myInt: 23, myString: 'world' });\n *\n * // execute\n * connection.execBulkLoad(bulkLoad);\n * ```\n */\n\n\nvar BulkLoad = /*#__PURE__*/function (_events$EventEmitter) {\n  _inherits(BulkLoad, _events$EventEmitter);\n\n  var _super2 = _createSuper(BulkLoad);\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  function BulkLoad(table, connectionOptions, _ref, callback) {\n    var _this2;\n\n    var _ref$checkConstraints = _ref.checkConstraints,\n        checkConstraints = _ref$checkConstraints === void 0 ? false : _ref$checkConstraints,\n        _ref$fireTriggers = _ref.fireTriggers,\n        fireTriggers = _ref$fireTriggers === void 0 ? false : _ref$fireTriggers,\n        _ref$keepNulls = _ref.keepNulls,\n        keepNulls = _ref$keepNulls === void 0 ? false : _ref$keepNulls,\n        _ref$lockTable = _ref.lockTable,\n        lockTable = _ref$lockTable === void 0 ? false : _ref$lockTable;\n\n    _classCallCheck(this, BulkLoad);\n\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    _this2 = _super2.call(this);\n    _this2.error = void 0;\n    _this2.canceled = void 0;\n    _this2.executionStarted = void 0;\n    _this2.streamingMode = void 0;\n    _this2.table = void 0;\n    _this2.timeout = void 0;\n    _this2.options = void 0;\n    _this2.callback = void 0;\n    _this2.columns = void 0;\n    _this2.columnsByName = void 0;\n    _this2.firstRowWritten = void 0;\n    _this2.rowToPacketTransform = void 0;\n    _this2.message = void 0;\n    _this2.bulkOptions = void 0;\n    _this2.connection = void 0;\n    _this2.rows = void 0;\n    _this2.rst = void 0;\n    _this2.rowCount = void 0;\n    _this2.error = undefined;\n    _this2.canceled = false;\n    _this2.executionStarted = false;\n    _this2.table = table;\n    _this2.options = connectionOptions;\n    _this2.callback = callback;\n    _this2.columns = [];\n    _this2.columnsByName = {};\n    _this2.firstRowWritten = false;\n    _this2.streamingMode = false;\n    _this2.rowToPacketTransform = new RowTransform(_assertThisInitialized(_this2)); // eslint-disable-line no-use-before-define\n\n    _this2.message = new _message.default({\n      type: _packet.TYPE.BULK_LOAD\n    });\n\n    _this2.rowToPacketTransform.pipe(_this2.message);\n\n    _this2.rowToPacketTransform.once('finish', function () {\n      _this2.removeListener('cancel', onCancel);\n    });\n\n    _this2.rowToPacketTransform.once('error', function (err) {\n      _this2.rowToPacketTransform.unpipe(_this2.message);\n\n      _this2.error = err;\n      _this2.message.ignore = true;\n\n      _this2.message.end();\n    });\n\n    var onCancel = function onCancel() {\n      _this2.rowToPacketTransform.emit('error', (0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n\n      _this2.rowToPacketTransform.destroy();\n    };\n\n    _this2.once('cancel', onCancel);\n\n    _this2.bulkOptions = {\n      checkConstraints: checkConstraints,\n      fireTriggers: fireTriggers,\n      keepNulls: keepNulls,\n      lockTable: lockTable\n    };\n    return _this2;\n  }\n  /**\n   * Adds a column to the bulk load.\n   *\n   * The column definitions should match the table you are trying to insert into.\n   * Attempting to call addColumn after the first row has been added will throw an exception.\n   *\n   * ```js\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\n   * ```\n   *\n   * @param name The name of the column.\n   * @param type One of the supported `data types`.\n   * @param __namedParameters Type [[ColumnOptions]]<p> Additional column type information. At a minimum, `nullable` must be set to true or false.\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   * @param nullable Indicates whether the column accepts NULL values.\n   * @param objName  If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]], then you can use this option to specify the property name.\n   * @param precision For Numeric, Decimal.\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n  */\n\n\n  _createClass(BulkLoad, [{\n    key: \"addColumn\",\n    value: function addColumn(name, type, _ref2) {\n      var _ref2$output = _ref2.output,\n          output = _ref2$output === void 0 ? false : _ref2$output,\n          length = _ref2.length,\n          precision = _ref2.precision,\n          scale = _ref2.scale,\n          _ref2$objName = _ref2.objName,\n          objName = _ref2$objName === void 0 ? name : _ref2$objName,\n          _ref2$nullable = _ref2.nullable,\n          nullable = _ref2$nullable === void 0 ? true : _ref2$nullable;\n\n      if (this.firstRowWritten) {\n        throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n      }\n\n      if (this.executionStarted) {\n        throw new Error('Columns cannot be added to bulk insert after execution has started.');\n      }\n\n      var column = {\n        type: type,\n        name: name,\n        value: null,\n        output: output,\n        length: length,\n        precision: precision,\n        scale: scale,\n        objName: objName,\n        nullable: nullable\n      };\n\n      if ((type.id & 0x30) === 0x20) {\n        if (column.length == null && type.resolveLength) {\n          column.length = type.resolveLength(column);\n        }\n      }\n\n      if (type.resolvePrecision && column.precision == null) {\n        column.precision = type.resolvePrecision(column);\n      }\n\n      if (type.resolveScale && column.scale == null) {\n        column.scale = type.resolveScale(column);\n      }\n\n      this.columns.push(column);\n      this.columnsByName[name] = column;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"colTypeValidation\",\n    value: function colTypeValidation(column, value) {\n      if (this.options.validateBulkLoadParameters) {\n        var error = column.type.validate(value);\n\n        if (error instanceof TypeError) {\n          throw error;\n        }\n      }\n    }\n    /**\n     * Adds a row to the bulk insert. This method accepts arguments in three different formats:\n     *\n     * ```js\n     * bulkLoad.addRow( rowObj )\n     * bulkLoad.addRow( columnArray )\n     * bulkLoad.addRow( col0, col1, ... colN )`\n     * ```\n     * * `rowObj`\n     *\n     *    An object of key/value pairs representing column name (or objName) and value.\n     *\n     * * `columnArray`\n     *\n     *    An array representing the values of each column in the same order which they were added to the bulkLoad object.\n     *\n     * * `col0, col1, ... colN`\n     *\n     *    If there are at least two columns, values can be passed as multiple arguments instead of an array. They\n     *    must be in the same order the columns were added in.\n     *\n     * @param input\n     */\n\n  }, {\n    key: \"addRow\",\n    value: function addRow() {\n      var _this3 = this;\n\n      this.firstRowWritten = true;\n      var row;\n\n      for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {\n        input[_key] = arguments[_key];\n      }\n\n      if (input.length > 1 || !input[0] || typeof input[0] !== 'object') {\n        row = input;\n      } else {\n        row = input[0];\n      } // write each column\n\n\n      if (Array.isArray(row)) {\n        this.columns.forEach(function (column, i) {\n          _this3.colTypeValidation(column, row[i]);\n        });\n        this.rowToPacketTransform.write(row);\n      } else {\n        this.columns.forEach(function (column) {\n          _this3.colTypeValidation(column, row[column.objName]);\n        });\n        this.rowToPacketTransform.write(this.columns.map(function (column) {\n          return row[column.objName];\n        }));\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"getOptionsSql\",\n    value: function getOptionsSql() {\n      var addOptions = [];\n\n      if (this.bulkOptions.checkConstraints) {\n        addOptions.push('CHECK_CONSTRAINTS');\n      }\n\n      if (this.bulkOptions.fireTriggers) {\n        addOptions.push('FIRE_TRIGGERS');\n      }\n\n      if (this.bulkOptions.keepNulls) {\n        addOptions.push('KEEP_NULLS');\n      }\n\n      if (this.bulkOptions.lockTable) {\n        addOptions.push('TABLOCK');\n      }\n\n      if (addOptions.length > 0) {\n        return \" WITH (\".concat(addOptions.join(','), \")\");\n      } else {\n        return '';\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"getBulkInsertSql\",\n    value: function getBulkInsertSql() {\n      var sql = 'insert bulk ' + this.table + '(';\n\n      for (var i = 0, len = this.columns.length; i < len; i++) {\n        var c = this.columns[i];\n\n        if (i !== 0) {\n          sql += ', ';\n        }\n\n        sql += '[' + c.name + '] ' + c.type.declaration(c);\n      }\n\n      sql += ')';\n      sql += this.getOptionsSql();\n      return sql;\n    }\n    /**\n     * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\n     * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\n     *\n     * ```js\n     * var sql = bulkLoad.getTableCreationSql();\n     * ```\n     *\n     * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\n     * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\n     */\n\n  }, {\n    key: \"getTableCreationSql\",\n    value: function getTableCreationSql() {\n      var sql = 'CREATE TABLE ' + this.table + '(\\n';\n\n      for (var i = 0, len = this.columns.length; i < len; i++) {\n        var c = this.columns[i];\n\n        if (i !== 0) {\n          sql += ',\\n';\n        }\n\n        sql += '[' + c.name + '] ' + c.type.declaration(c);\n\n        if (c.nullable !== undefined) {\n          sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n        }\n      }\n\n      sql += '\\n)';\n      return sql;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"getColMetaData\",\n    value: function getColMetaData() {\n      var tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n      tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n      tBuf.writeUInt16LE(this.columns.length);\n\n      for (var j = 0, len = this.columns.length; j < len; j++) {\n        var c = this.columns[j]; // UserType\n\n        if (this.options.tdsVersion < '7_2') {\n          tBuf.writeUInt16LE(0);\n        } else {\n          tBuf.writeUInt32LE(0);\n        } // Flags\n\n\n        var flags = FLAGS.updateableReadWrite;\n\n        if (c.nullable) {\n          flags |= FLAGS.nullable;\n        } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n          flags |= FLAGS.nullableUnknown;\n        }\n\n        tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n        tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options)); // ColName\n\n        tBuf.writeBVarchar(c.name, 'ucs2');\n      }\n\n      return tBuf.data;\n    }\n    /**\n     * Sets a timeout for this bulk load.\n     *\n     * ```js\n     * bulkLoad.setTimeout(timeout);\n     * ```\n     *\n     * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\n     *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\n     */\n\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(timeout) {\n      this.timeout = timeout;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"createDoneToken\",\n    value: function createDoneToken() {\n      // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n      var tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n      tBuf.writeUInt8(_token.TYPE.DONE);\n      var status = DONE_STATUS.FINAL;\n      tBuf.writeUInt16LE(status);\n      tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n      tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n      if (this.options.tdsVersion >= '7_2') {\n        tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n      }\n\n      return tBuf.data;\n    }\n    /**\n     * Switches the `BulkLoad` object into streaming mode and returns a\n     * [writable stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_streams)\n     * that can be used to send a large amount of rows to the server.\n     *\n     * ```js\n     * const bulkLoad = connection.newBulkLoad(...);\n     * bulkLoad.addColumn(...);\n     *\n     * const rowStream = bulkLoad.getRowStream();\n     *\n     * connection.execBulkLoad(bulkLoad);\n     * ```\n     *\n     * In streaming mode, [[addRow]] cannot be used. Instead all data rows must be written to the returned stream object.\n     * The stream implementation uses data flow control to prevent memory overload. [`stream.write()`](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_write_chunk_encoding_callback)\n     * returns `false` to indicate that data transfer should be paused.\n     *\n     * After that, the stream emits a ['drain' event](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_event_drain)\n     * when it is ready to resume data transfer.\n     */\n\n  }, {\n    key: \"getRowStream\",\n    value: function getRowStream() {\n      if (this.firstRowWritten) {\n        throw new Error('BulkLoad cannot be switched to streaming mode after first row has been written using addRow().');\n      }\n\n      if (this.executionStarted) {\n        throw new Error('BulkLoad cannot be switched to streaming mode after execution has started.');\n      }\n\n      this.streamingMode = true;\n      return this.rowToPacketTransform;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"getMessageStream\",\n    value: function getMessageStream() {\n      return this.message;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.canceled) {\n        return;\n      }\n\n      this.canceled = true;\n      this.emit('cancel');\n    }\n  }]);\n\n  return BulkLoad;\n}(_events.EventEmitter);\n\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad;","map":{"version":3,"sources":["C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/tedious/lib/bulk-load.js"],"names":["Object","defineProperty","exports","value","default","_events","require","_writableTrackingBuffer","_interopRequireDefault","_readableStream","_token","_message","_packet","_errors","obj","__esModule","FLAGS","nullable","caseSen","updateableReadWrite","updateableUnknown","identity","computed","fixedLenCLRType","sparseColumnSet","hidden","key","nullableUnknown","DONE_STATUS","FINAL","MORE","ERROR","INXACT","COUNT","ATTN","SRVERROR","RowTransform","bulkLoad","writableObjectMode","columnMetadataWritten","mainOptions","columns","options","row","_encoding","callback","push","getColMetaData","buf","writeUInt8","TYPE","ROW","data","i","length","c","validateBulkLoadParameters","error","type","validate","TypeError","parameter","scale","precision","generateParameterData","chunk","process","nextTick","createDoneToken","Transform","BulkLoad","table","connectionOptions","checkConstraints","fireTriggers","keepNulls","lockTable","canceled","executionStarted","streamingMode","timeout","columnsByName","firstRowWritten","rowToPacketTransform","message","bulkOptions","connection","rows","rst","rowCount","undefined","BULK_LOAD","pipe","once","removeListener","onCancel","err","unpipe","ignore","end","emit","RequestError","destroy","name","output","objName","Error","column","id","resolveLength","resolvePrecision","resolveScale","input","Array","isArray","forEach","colTypeValidation","write","map","addOptions","join","sql","len","declaration","getOptionsSql","tBuf","COLMETADATA","writeUInt16LE","j","tdsVersion","writeUInt32LE","flags","writeBuffer","generateTypeInfo","writeBVarchar","DONE","status","EventEmitter","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\n\nvar _readableStream = require(\"readable-stream\");\n\nvar _token = require(\"./token/token\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _packet = require(\"./packet\");\n\nvar _errors = require(\"./errors\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @private\n */\nconst FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n\n};\n/**\n * @private\n */\n\nconst DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n/**\n * @private\n */\n\n// A transform that converts rows to packets.\nclass RowTransform extends _readableStream.Transform {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  constructor(bulkLoad) {\n    super({\n      writableObjectMode: true\n    });\n    this.columnMetadataWritten = void 0;\n    this.bulkLoad = void 0;\n    this.mainOptions = void 0;\n    this.columns = void 0;\n    this.bulkLoad = bulkLoad;\n    this.mainOptions = bulkLoad.options;\n    this.columns = bulkLoad.columns;\n    this.columnMetadataWritten = false;\n  }\n  /**\n   * @private\n   */\n\n\n  _transform(row, _encoding, callback) {\n    if (!this.columnMetadataWritten) {\n      this.push(this.bulkLoad.getColMetaData());\n      this.columnMetadataWritten = true;\n    }\n\n    const buf = new _writableTrackingBuffer.default(64, 'ucs2', true);\n    buf.writeUInt8(_token.TYPE.ROW);\n    this.push(buf.data);\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const c = this.columns[i];\n\n      if (this.bulkLoad.options.validateBulkLoadParameters) {\n        const error = c.type.validate(row[i]);\n\n        if (error instanceof TypeError) {\n          return callback(error);\n        }\n      }\n\n      const parameter = {\n        length: c.length,\n        scale: c.scale,\n        precision: c.precision,\n        value: row[i]\n      };\n\n      for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)) {\n        this.push(chunk);\n      }\n    }\n\n    process.nextTick(callback);\n  }\n  /**\n   * @private\n   */\n\n\n  _flush(callback) {\n    this.push(this.bulkLoad.createDoneToken());\n    process.nextTick(callback);\n  }\n\n}\n/**\n * A BulkLoad instance is used to perform a bulk insert.\n *\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\n *\n * Example of BulkLoad Usages:\n *\n * ```js\n * // optional BulkLoad options\n * const options = { keepNulls: true };\n *\n * // instantiate - provide the table where you'll be inserting to, options and a callback\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\n *   console.log('inserted %d rows', rowCount);\n * });\n *\n * // setup your columns - always indicate whether the column is nullable\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\n *\n * // add rows\n * bulkLoad.addRow({ myInt: 7, myString: 'hello' });\n * bulkLoad.addRow({ myInt: 23, myString: 'world' });\n *\n * // execute\n * connection.execBulkLoad(bulkLoad);\n * ```\n */\n\n\nclass BulkLoad extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  constructor(table, connectionOptions, {\n    checkConstraints = false,\n    fireTriggers = false,\n    keepNulls = false,\n    lockTable = false\n  }, callback) {\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    super();\n    this.error = void 0;\n    this.canceled = void 0;\n    this.executionStarted = void 0;\n    this.streamingMode = void 0;\n    this.table = void 0;\n    this.timeout = void 0;\n    this.options = void 0;\n    this.callback = void 0;\n    this.columns = void 0;\n    this.columnsByName = void 0;\n    this.firstRowWritten = void 0;\n    this.rowToPacketTransform = void 0;\n    this.message = void 0;\n    this.bulkOptions = void 0;\n    this.connection = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.error = undefined;\n    this.canceled = false;\n    this.executionStarted = false;\n    this.table = table;\n    this.options = connectionOptions;\n    this.callback = callback;\n    this.columns = [];\n    this.columnsByName = {};\n    this.firstRowWritten = false;\n    this.streamingMode = false;\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\n\n    this.message = new _message.default({\n      type: _packet.TYPE.BULK_LOAD\n    });\n    this.rowToPacketTransform.pipe(this.message);\n    this.rowToPacketTransform.once('finish', () => {\n      this.removeListener('cancel', onCancel);\n    });\n    this.rowToPacketTransform.once('error', err => {\n      this.rowToPacketTransform.unpipe(this.message);\n      this.error = err;\n      this.message.ignore = true;\n      this.message.end();\n    });\n\n    const onCancel = () => {\n      this.rowToPacketTransform.emit('error', (0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n      this.rowToPacketTransform.destroy();\n    };\n\n    this.once('cancel', onCancel);\n    this.bulkOptions = {\n      checkConstraints,\n      fireTriggers,\n      keepNulls,\n      lockTable\n    };\n  }\n  /**\n   * Adds a column to the bulk load.\n   *\n   * The column definitions should match the table you are trying to insert into.\n   * Attempting to call addColumn after the first row has been added will throw an exception.\n   *\n   * ```js\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\n   * ```\n   *\n   * @param name The name of the column.\n   * @param type One of the supported `data types`.\n   * @param __namedParameters Type [[ColumnOptions]]<p> Additional column type information. At a minimum, `nullable` must be set to true or false.\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   * @param nullable Indicates whether the column accepts NULL values.\n   * @param objName  If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]], then you can use this option to specify the property name.\n   * @param precision For Numeric, Decimal.\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n  */\n\n\n  addColumn(name, type, {\n    output = false,\n    length,\n    precision,\n    scale,\n    objName = name,\n    nullable = true\n  }) {\n    if (this.firstRowWritten) {\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\n    }\n\n    const column = {\n      type: type,\n      name: name,\n      value: null,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale,\n      objName: objName,\n      nullable: nullable\n    };\n\n    if ((type.id & 0x30) === 0x20) {\n      if (column.length == null && type.resolveLength) {\n        column.length = type.resolveLength(column);\n      }\n    }\n\n    if (type.resolvePrecision && column.precision == null) {\n      column.precision = type.resolvePrecision(column);\n    }\n\n    if (type.resolveScale && column.scale == null) {\n      column.scale = type.resolveScale(column);\n    }\n\n    this.columns.push(column);\n    this.columnsByName[name] = column;\n  }\n  /**\n   * @private\n   */\n\n\n  colTypeValidation(column, value) {\n    if (this.options.validateBulkLoadParameters) {\n      const error = column.type.validate(value);\n\n      if (error instanceof TypeError) {\n        throw error;\n      }\n    }\n  }\n  /**\n   * Adds a row to the bulk insert. This method accepts arguments in three different formats:\n   *\n   * ```js\n   * bulkLoad.addRow( rowObj )\n   * bulkLoad.addRow( columnArray )\n   * bulkLoad.addRow( col0, col1, ... colN )`\n   * ```\n   * * `rowObj`\n   *\n   *    An object of key/value pairs representing column name (or objName) and value.\n   *\n   * * `columnArray`\n   *\n   *    An array representing the values of each column in the same order which they were added to the bulkLoad object.\n   *\n   * * `col0, col1, ... colN`\n   *\n   *    If there are at least two columns, values can be passed as multiple arguments instead of an array. They\n   *    must be in the same order the columns were added in.\n   *\n   * @param input\n   */\n\n\n  addRow(...input) {\n    this.firstRowWritten = true;\n    let row;\n\n    if (input.length > 1 || !input[0] || typeof input[0] !== 'object') {\n      row = input;\n    } else {\n      row = input[0];\n    } // write each column\n\n\n    if (Array.isArray(row)) {\n      this.columns.forEach((column, i) => {\n        this.colTypeValidation(column, row[i]);\n      });\n      this.rowToPacketTransform.write(row);\n    } else {\n      this.columns.forEach(column => {\n        this.colTypeValidation(column, row[column.objName]);\n      });\n      this.rowToPacketTransform.write(this.columns.map(column => {\n        return row[column.objName];\n      }));\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  getOptionsSql() {\n    const addOptions = [];\n\n    if (this.bulkOptions.checkConstraints) {\n      addOptions.push('CHECK_CONSTRAINTS');\n    }\n\n    if (this.bulkOptions.fireTriggers) {\n      addOptions.push('FIRE_TRIGGERS');\n    }\n\n    if (this.bulkOptions.keepNulls) {\n      addOptions.push('KEEP_NULLS');\n    }\n\n    if (this.bulkOptions.lockTable) {\n      addOptions.push('TABLOCK');\n    }\n\n    if (addOptions.length > 0) {\n      return ` WITH (${addOptions.join(',')})`;\n    } else {\n      return '';\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  getBulkInsertSql() {\n    let sql = 'insert bulk ' + this.table + '(';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ', ';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n    }\n\n    sql += ')';\n    sql += this.getOptionsSql();\n    return sql;\n  }\n  /**\n   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\n   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\n   *\n   * ```js\n   * var sql = bulkLoad.getTableCreationSql();\n   * ```\n   *\n   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\n   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\n   */\n\n\n  getTableCreationSql() {\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ',\\n';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n\n      if (c.nullable !== undefined) {\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n      }\n    }\n\n    sql += '\\n)';\n    return sql;\n  }\n  /**\n   * @private\n   */\n\n\n  getColMetaData() {\n    const tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n    tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n    tBuf.writeUInt16LE(this.columns.length);\n\n    for (let j = 0, len = this.columns.length; j < len; j++) {\n      const c = this.columns[j]; // UserType\n\n      if (this.options.tdsVersion < '7_2') {\n        tBuf.writeUInt16LE(0);\n      } else {\n        tBuf.writeUInt32LE(0);\n      } // Flags\n\n\n      let flags = FLAGS.updateableReadWrite;\n\n      if (c.nullable) {\n        flags |= FLAGS.nullable;\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n        flags |= FLAGS.nullableUnknown;\n      }\n\n      tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n      tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options)); // ColName\n\n      tBuf.writeBVarchar(c.name, 'ucs2');\n    }\n\n    return tBuf.data;\n  }\n  /**\n   * Sets a timeout for this bulk load.\n   *\n   * ```js\n   * bulkLoad.setTimeout(timeout);\n   * ```\n   *\n   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\n   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\n   */\n\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n  /**\n   * @private\n   */\n\n\n  createDoneToken() {\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n    const tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n    tBuf.writeUInt8(_token.TYPE.DONE);\n    const status = DONE_STATUS.FINAL;\n    tBuf.writeUInt16LE(status);\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n    if (this.options.tdsVersion >= '7_2') {\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n    }\n\n    return tBuf.data;\n  }\n  /**\n   * Switches the `BulkLoad` object into streaming mode and returns a\n   * [writable stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_streams)\n   * that can be used to send a large amount of rows to the server.\n   *\n   * ```js\n   * const bulkLoad = connection.newBulkLoad(...);\n   * bulkLoad.addColumn(...);\n   *\n   * const rowStream = bulkLoad.getRowStream();\n   *\n   * connection.execBulkLoad(bulkLoad);\n   * ```\n   *\n   * In streaming mode, [[addRow]] cannot be used. Instead all data rows must be written to the returned stream object.\n   * The stream implementation uses data flow control to prevent memory overload. [`stream.write()`](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_write_chunk_encoding_callback)\n   * returns `false` to indicate that data transfer should be paused.\n   *\n   * After that, the stream emits a ['drain' event](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_event_drain)\n   * when it is ready to resume data transfer.\n   */\n\n\n  getRowStream() {\n    if (this.firstRowWritten) {\n      throw new Error('BulkLoad cannot be switched to streaming mode after first row has been written using addRow().');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('BulkLoad cannot be switched to streaming mode after execution has started.');\n    }\n\n    this.streamingMode = true;\n    return this.rowToPacketTransform;\n  }\n  /**\n   * @private\n   */\n\n\n  getMessageStream() {\n    return this.message;\n  }\n  /**\n   * @private\n   */\n\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n\n}\n\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad;"]},"metadata":{},"sourceType":"script"}