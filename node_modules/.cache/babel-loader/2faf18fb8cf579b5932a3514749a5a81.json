{"ast":null,"code":"/*\n * @copyright\n * Copyright Â© Microsoft Open Technologies, Inc.\n *\n * All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http: *www.apache.org/licenses/LICENSE-2.0\n *\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\n *\n * See the Apache License, Version 2.0 for the specific language\n * governing permissions and limitations under the License.\n */\n'use strict';\n\nvar jwtConstants = require('./constants').Jwt;\n\nvar Logger = require('./log').Logger;\n\nvar util = require('./util');\n\nrequire('date-utils');\n\nvar jws = require('jws');\n\nvar uuid = require('uuid');\n/**\n * JavaScript dates are in milliseconds, but JWT dates are in seconds.\n * This function does the conversion.\n * @param  {Date}   date\n * @return {string}\n */\n\n\nfunction dateGetTimeInSeconds(date) {\n  return Math.floor(date.getTime() / 1000);\n}\n/**\n * Constructs a new SelfSignedJwt object.\n * @param {object}    callContext    Context specific to this token request.\n * @param {Authority} authority      The authority to be used as the JWT audience.\n * @param {string}    clientId       The client id of the calling app.\n */\n\n\nfunction SelfSignedJwt(callContext, authority, clientId) {\n  this._log = new Logger('SelfSignedJwt', callContext._logContext);\n  this._callContext = callContext;\n  this._authority = authority;\n  this._tokenEndpoint = authority.tokenEndpoint;\n  this._clientId = clientId;\n}\n/**\n * This wraps date creation in order to make unit testing easier.\n * @return {Date}\n */\n\n\nSelfSignedJwt.prototype._getDateNow = function () {\n  return new Date();\n};\n\nSelfSignedJwt.prototype._getNewJwtId = function () {\n  return uuid.v4();\n};\n/**\n * A regular certificate thumbprint is a hex encode string of the binary certificate\n * hash.  For some reason teh x5t value in a JWT is a url save base64 encoded string\n * instead.  This function does the conversion.\n * @param  {string} thumbprint  A hex encoded certificate thumbprint.\n * @return {string} A url safe base64 encoded certificate thumbprint.\n */\n\n\nSelfSignedJwt.prototype._createx5tValue = function (thumbprint) {\n  var hexString = thumbprint.replace(/:/g, '').replace(/ /g, '');\n  var base64 = new Buffer(hexString, 'hex').toString('base64');\n  return util.convertRegularToUrlSafeBase64EncodedString(base64);\n};\n/**\n * Creates the JWT header.\n * @param  {string} thumbprint  A hex encoded certificate thumbprint.\n * @return {object}\n */\n\n\nSelfSignedJwt.prototype._createHeader = function (thumbprint) {\n  var x5t = this._createx5tValue(thumbprint);\n\n  var header = {\n    typ: 'JWT',\n    alg: 'RS256',\n    x5t: x5t\n  };\n\n  this._log.verbose('Creating self signed JWT header');\n\n  this._log.verbose('Creating self signed JWT header.  x5t: ' + x5t, true);\n\n  return header;\n};\n/**\n * Creates the JWT payload.\n * @return {object}\n */\n\n\nSelfSignedJwt.prototype._createPayload = function () {\n  var now = this._getDateNow();\n\n  var expires = new Date(now.getTime()).addMinutes(jwtConstants.SELF_SIGNED_JWT_LIFETIME);\n\n  this._log.verbose('Creating self signed JWT payload.  Expires: ' + expires + ' NotBefore: ' + now);\n\n  var jwtPayload = {};\n  jwtPayload[jwtConstants.AUDIENCE] = this._tokenEndpoint;\n  jwtPayload[jwtConstants.ISSUER] = this._clientId;\n  jwtPayload[jwtConstants.SUBJECT] = this._clientId;\n  jwtPayload[jwtConstants.NOT_BEFORE] = dateGetTimeInSeconds(now);\n  jwtPayload[jwtConstants.EXPIRES_ON] = dateGetTimeInSeconds(expires);\n  jwtPayload[jwtConstants.JWT_ID] = this._getNewJwtId();\n  return jwtPayload;\n};\n\nSelfSignedJwt.prototype._throwOnInvalidJwtSignature = function (jwt) {\n  var jwtSegments = jwt.split('.');\n\n  if (3 > jwtSegments.length || !jwtSegments[2]) {\n    throw this._log.createError('Failed to sign JWT.  This is most likely due to an invalid certificate.');\n  }\n\n  return;\n};\n\nSelfSignedJwt.prototype._signJwt = function (header, payload, certificate) {\n  var jwt;\n\n  try {\n    jwt = jws.sign({\n      header: header,\n      payload: payload,\n      secret: certificate\n    });\n  } catch (err) {\n    this._log.error(err, true);\n\n    throw this._log.createError('Failed to sign JWT.This is most likely due to an invalid certificate.');\n  }\n\n  this._throwOnInvalidJwtSignature(jwt);\n\n  return jwt;\n};\n\nSelfSignedJwt.prototype._reduceThumbprint = function (thumbprint) {\n  var canonical = thumbprint.toLowerCase().replace(/ /g, '').replace(/:/g, '');\n\n  this._throwOnInvalidThumbprint(canonical);\n\n  return canonical;\n};\n\nvar numCharIn128BitHexString = 128 / 8 * 2;\nvar numCharIn160BitHexString = 160 / 8 * 2;\nvar thumbprintSizes = {};\nthumbprintSizes[numCharIn128BitHexString] = true;\nthumbprintSizes[numCharIn160BitHexString] = true;\nvar thumbprintRegExp = /^[a-f\\d]*$/;\n\nSelfSignedJwt.prototype._throwOnInvalidThumbprint = function (thumbprint) {\n  if (!thumbprintSizes[thumbprint.length] || !thumbprintRegExp.test(thumbprint)) {\n    throw this._log.createError('The thumbprint does not match a known format');\n  }\n};\n/**\n * Creates a self signed JWT that can be used as a client_assertion.\n * @param  {string}  certificate   A PEM encoded certificate private key.\n * @param  {string}  thumbprint    A hex encoded thumbprint of the certificate.\n * @return {string}  A self signed JWT token.\n */\n\n\nSelfSignedJwt.prototype.create = function (certificate, thumbprint) {\n  thumbprint = this._reduceThumbprint(thumbprint);\n\n  var header = this._createHeader(thumbprint);\n\n  var payload = this._createPayload();\n\n  var jwt = this._signJwt(header, payload, certificate);\n\n  return jwt;\n};\n\nmodule.exports = SelfSignedJwt;","map":{"version":3,"sources":["D:/Bakery/Bakery_ReactjsSourceCode/node_modules/adal-node/lib/self-signed-jwt.js"],"names":["jwtConstants","require","Jwt","Logger","util","jws","uuid","dateGetTimeInSeconds","date","Math","floor","getTime","SelfSignedJwt","callContext","authority","clientId","_log","_logContext","_callContext","_authority","_tokenEndpoint","tokenEndpoint","_clientId","prototype","_getDateNow","Date","_getNewJwtId","v4","_createx5tValue","thumbprint","hexString","replace","base64","Buffer","toString","convertRegularToUrlSafeBase64EncodedString","_createHeader","x5t","header","typ","alg","verbose","_createPayload","now","expires","addMinutes","SELF_SIGNED_JWT_LIFETIME","jwtPayload","AUDIENCE","ISSUER","SUBJECT","NOT_BEFORE","EXPIRES_ON","JWT_ID","_throwOnInvalidJwtSignature","jwt","jwtSegments","split","length","createError","_signJwt","payload","certificate","sign","secret","err","error","_reduceThumbprint","canonical","toLowerCase","_throwOnInvalidThumbprint","numCharIn128BitHexString","numCharIn160BitHexString","thumbprintSizes","thumbprintRegExp","test","create","module","exports"],"mappings":"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","sourcesContent":["/*\n * @copyright\n * Copyright Â© Microsoft Open Technologies, Inc.\n *\n * All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http: *www.apache.org/licenses/LICENSE-2.0\n *\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\n *\n * See the Apache License, Version 2.0 for the specific language\n * governing permissions and limitations under the License.\n */\n'use strict';\n\nvar jwtConstants = require('./constants').Jwt;\nvar Logger = require('./log').Logger;\nvar util = require('./util');\n\nrequire('date-utils');\nvar jws = require('jws');\nvar uuid = require('uuid');\n\n/**\n * JavaScript dates are in milliseconds, but JWT dates are in seconds.\n * This function does the conversion.\n * @param  {Date}   date\n * @return {string}\n */\nfunction dateGetTimeInSeconds(date) {\n  return Math.floor(date.getTime()/1000);\n}\n\n/**\n * Constructs a new SelfSignedJwt object.\n * @param {object}    callContext    Context specific to this token request.\n * @param {Authority} authority      The authority to be used as the JWT audience.\n * @param {string}    clientId       The client id of the calling app.\n */\nfunction SelfSignedJwt(callContext, authority, clientId) {\n  this._log = new Logger('SelfSignedJwt', callContext._logContext);\n  this._callContext = callContext;\n\n  this._authority = authority;\n  this._tokenEndpoint = authority.tokenEndpoint;\n  this._clientId = clientId;\n}\n\n/**\n * This wraps date creation in order to make unit testing easier.\n * @return {Date}\n */\nSelfSignedJwt.prototype._getDateNow = function() {\n  return new Date();\n};\n\nSelfSignedJwt.prototype._getNewJwtId = function() {\n  return uuid.v4();\n};\n\n/**\n * A regular certificate thumbprint is a hex encode string of the binary certificate\n * hash.  For some reason teh x5t value in a JWT is a url save base64 encoded string\n * instead.  This function does the conversion.\n * @param  {string} thumbprint  A hex encoded certificate thumbprint.\n * @return {string} A url safe base64 encoded certificate thumbprint.\n */\nSelfSignedJwt.prototype._createx5tValue = function(thumbprint) {\n    var hexString = thumbprint.replace(/:/g, '').replace(/ /g, '');\n    var base64 = (new Buffer(hexString, 'hex')).toString('base64');\n    return util.convertRegularToUrlSafeBase64EncodedString(base64);\n};\n\n/**\n * Creates the JWT header.\n * @param  {string} thumbprint  A hex encoded certificate thumbprint.\n * @return {object}\n */\nSelfSignedJwt.prototype._createHeader = function(thumbprint) {\n  var x5t = this._createx5tValue(thumbprint);\n  var header = { typ: 'JWT', alg: 'RS256', x5t : x5t };\n\n  this._log.verbose('Creating self signed JWT header');\n  this._log.verbose('Creating self signed JWT header.  x5t: ' + x5t, true);\n\n  return header;\n};\n\n/**\n * Creates the JWT payload.\n * @return {object}\n */\nSelfSignedJwt.prototype._createPayload = function() {\n  var now = this._getDateNow();\n  var expires = (new Date(now.getTime())).addMinutes(jwtConstants.SELF_SIGNED_JWT_LIFETIME);\n\n  this._log.verbose('Creating self signed JWT payload.  Expires: ' + expires + ' NotBefore: ' + now);\n\n  var jwtPayload = {};\n  jwtPayload[jwtConstants.AUDIENCE] = this._tokenEndpoint;\n  jwtPayload[jwtConstants.ISSUER] = this._clientId;\n  jwtPayload[jwtConstants.SUBJECT] = this._clientId;\n  jwtPayload[jwtConstants.NOT_BEFORE] = dateGetTimeInSeconds(now);\n  jwtPayload[jwtConstants.EXPIRES_ON] = dateGetTimeInSeconds(expires);\n  jwtPayload[jwtConstants.JWT_ID] = this._getNewJwtId();\n\n  return jwtPayload;\n};\n\nSelfSignedJwt.prototype._throwOnInvalidJwtSignature = function(jwt) {\n  var jwtSegments = jwt.split('.');\n\n  if (3 > jwtSegments.length || !jwtSegments[2]) {\n    throw this._log.createError('Failed to sign JWT.  This is most likely due to an invalid certificate.');\n  }\n\n  return;\n};\n\nSelfSignedJwt.prototype._signJwt = function(header, payload, certificate) {\n  var jwt;\n  try {\n     jwt = jws.sign({ header : header, payload : payload, secret : certificate });\n  }\n  catch (err) {\n     this._log.error(err, true);\n     throw this._log.createError('Failed to sign JWT.This is most likely due to an invalid certificate.');   \n  }\n  \n  this._throwOnInvalidJwtSignature(jwt);\n  return jwt;\n};\n\nSelfSignedJwt.prototype._reduceThumbprint = function(thumbprint) {\n    var canonical = thumbprint.toLowerCase().replace(/ /g, '').replace(/:/g, '');\n    this._throwOnInvalidThumbprint(canonical);\n    return canonical;\n};\n\nvar numCharIn128BitHexString = 128/8*2;\nvar numCharIn160BitHexString = 160/8*2;\nvar thumbprintSizes  = {};\nthumbprintSizes[numCharIn128BitHexString] = true;\nthumbprintSizes[numCharIn160BitHexString] = true;\nvar thumbprintRegExp = /^[a-f\\d]*$/;\n\nSelfSignedJwt.prototype._throwOnInvalidThumbprint = function(thumbprint) {\n  if (!thumbprintSizes[thumbprint.length] || !thumbprintRegExp.test(thumbprint)) {\n    throw this._log.createError('The thumbprint does not match a known format');\n  }\n};\n\n/**\n * Creates a self signed JWT that can be used as a client_assertion.\n * @param  {string}  certificate   A PEM encoded certificate private key.\n * @param  {string}  thumbprint    A hex encoded thumbprint of the certificate.\n * @return {string}  A self signed JWT token.\n */\nSelfSignedJwt.prototype.create = function(certificate, thumbprint) {\n  thumbprint = this._reduceThumbprint(thumbprint);\n  var header = this._createHeader(thumbprint);\n\n  var payload = this._createPayload();\n\n  var jwt = this._signJwt(header, payload, certificate);\n  return jwt;\n};\n\nmodule.exports = SelfSignedJwt;"]},"metadata":{},"sourceType":"script"}