{"ast":null,"code":"import hotkeys from 'hotkeys-js';\nimport { useRef, useCallback, useEffect } from 'react';\n\nfunction useIsHotkeyPressed() {\n  return hotkeys.isPressed;\n}\n\nhotkeys.filter = function () {\n  return true;\n};\n\nvar tagFilter = function tagFilter(_ref, enableOnTags) {\n  var target = _ref.target,\n      srcElement = _ref.srcElement; // @ts-ignore\n\n  var targetTagName = target && target.tagName || srcElement && srcElement.tagName;\n  return Boolean(targetTagName && enableOnTags && enableOnTags.includes(targetTagName));\n};\n\nvar isKeyboardEventTriggeredByInput = function isKeyboardEventTriggeredByInput(ev) {\n  return tagFilter(ev, ['INPUT', 'TEXTAREA', 'SELECT']);\n};\n\nfunction useHotkeys(keys, callback, options, deps) {\n  if (options instanceof Array) {\n    deps = options;\n    options = undefined;\n  }\n\n  var _ref2 = options || {},\n      enableOnTags = _ref2.enableOnTags,\n      filter = _ref2.filter,\n      keyup = _ref2.keyup,\n      keydown = _ref2.keydown;\n\n  var ref = useRef(null);\n  var memoisedCallback = useCallback(function (keyboardEvent, hotkeysEvent) {\n    if (filter && !filter(keyboardEvent)) {\n      return false;\n    }\n\n    if (isKeyboardEventTriggeredByInput(keyboardEvent) && !tagFilter(keyboardEvent, enableOnTags)) {\n      return true;\n    }\n\n    if (ref.current === null || document.activeElement === ref.current) {\n      callback(keyboardEvent, hotkeysEvent);\n      return true;\n    }\n\n    return false;\n  }, deps ? [ref, enableOnTags, filter].concat(deps) : [ref, enableOnTags, filter]);\n  useEffect(function () {\n    if (keyup && keydown !== true) {\n      options.keydown = false;\n    }\n\n    hotkeys(keys, options || {}, memoisedCallback);\n    return function () {\n      return hotkeys.unbind(keys, memoisedCallback);\n    };\n  }, [memoisedCallback, options, keys]);\n  return ref;\n}\n\nexport { useHotkeys, useIsHotkeyPressed };","map":{"version":3,"sources":["../src/useIsHotkeyPressed.ts","../src/useHotkeys.ts"],"names":["useIsHotkeyPressed","hotkeys","tagFilter","target","srcElement","targetTagName","Boolean","enableOnTags","isKeyboardEventTriggeredByInput","useHotkeys","keys","callback","options","deps","filter","keyup","keydown","ref","useRef","memoisedCallback","useCallback","document","useEffect"],"mappings":";;;SAEgBA,kB,GAAAA;AACd,SAAOC,OAAO,CAAd,SAAA;AACD;;ACEDA,OAAO,CAAPA,MAAAA,GAAiB,YAAA;AAAA,SAAA,IAAA;AAAjBA,CAAAA;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,IAAA,EAAA,YAAA,EAAA;MAAGC,MAAAA,GAAAA,IAAAA,CAAAA,M;MAAQC,UAAAA,GAAAA,IAAAA,CAAAA,U,CAAX,CAChB;;AACA,MAAMC,aAAa,GAAIF,MAAM,IAAIA,MAAM,CAAjB,OAACA,IAA8BC,UAAU,IAAIA,UAAU,CAA7E,OAAA;AAEA,SAAOE,OAAO,CAACD,aAAa,IAAbA,YAAAA,IAAiCE,YAAY,CAAZA,QAAAA,CAAhD,aAAgDA,CAAlC,CAAd;AAJF,CAAA;;AAOA,IAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAA,EAAA,EAAA;AACtC,SAAON,SAAS,CAAA,EAAA,EAAK,CAAA,OAAA,EAAA,UAAA,EAArB,QAAqB,CAAL,CAAhB;AADF,CAAA;;AAgBA,SAAgBO,UAAhB,CAA8CC,IAA9C,EAA4DC,QAA5D,EAAkFC,OAAlF,EAA6GC,IAA7G,EAA6GA;AAC3G,MAAID,OAAO,YAAX,KAAA,EAA8B;AAC5BC,IAAAA,IAAI,GAAJA,OAAAA;AACAD,IAAAA,OAAO,GAAPA,SAAAA;AACD;;cAEgDA,OAAO,IAAI,E;MAApDL,YAAAA,GAAAA,KAAAA,CAAAA,Y;MAAcO,MAAAA,GAAAA,KAAAA,CAAAA,M;MAAQC,KAAAA,GAAAA,KAAAA,CAAAA,K;MAAOC,OAAAA,GAAAA,KAAAA,CAAAA,O;;AACrC,MAAMC,GAAG,GAAGC,MAAM,CAAlB,IAAkB,CAAlB;AAEA,MAAMC,gBAAgB,GAAGC,WAAW,CAAC,UAAA,aAAA,EAAA,YAAA,EAAA;AACnC,QAAIN,MAAM,IAAI,CAACA,MAAM,CAArB,aAAqB,CAArB,EAAsC;AACpC,aAAA,KAAA;AACD;;AAED,QAAIN,+BAA+B,CAA/BA,aAA+B,CAA/BA,IAAkD,CAACN,SAAS,CAAA,aAAA,EAAhE,YAAgE,CAAhE,EAA+F;AAC7F,aAAA,IAAA;AACD;;AAED,QAAIe,GAAG,CAAHA,OAAAA,KAAAA,IAAAA,IAAwBI,QAAQ,CAARA,aAAAA,KAA2BJ,GAAG,CAA1D,OAAA,EAAoE;AAClEN,MAAAA,QAAQ,CAAA,aAAA,EAARA,YAAQ,CAARA;AACA,aAAA,IAAA;AACD;;AAED,WAAA,KAAA;AAdkC,GAAA,EAejCE,IAAI,GAAA,CAAA,GAAA,EAAA,YAAA,EAAA,MAAA,EAAA,MAAA,CAAA,IAAA,CAAA,GAA0C,CAAA,GAAA,EAAA,YAAA,EAfjD,MAeiD,CAfb,CAApC;AAiBAS,EAAAA,SAAS,CAAC,YAAA;AACR,QAAIP,KAAK,IAAIC,OAAO,KAApB,IAAA,EAA+B;AAC5BJ,MAAAA,OAAmB,CAAnBA,OAAAA,GAAAA,KAAAA;AACF;;AAEDX,IAAAA,OAAO,CAAA,IAAA,EAAQW,OAAmB,IAA3B,EAAA,EAAPX,gBAAO,CAAPA;AAEA,WAAO,YAAA;AAAA,aAAMA,OAAO,CAAPA,MAAAA,CAAAA,IAAAA,EAAN,gBAAMA,CAAN;AAAP,KAAA;AAPO,GAAA,EAQN,CAAA,gBAAA,EAAA,OAAA,EARHqB,IAQG,CARM,CAATA;AAUA,SAAA,GAAA;AACD","sourcesContent":["import hotkeys from 'hotkeys-js';\n\nexport function useIsHotkeyPressed() {\n  return hotkeys.isPressed;\n}","import hotkeys, { HotkeysEvent, KeyHandler } from 'hotkeys-js';\nimport React, { useCallback, useEffect, useRef } from 'react';\n\ntype AvailableTags = 'INPUT' | 'TEXTAREA' | 'SELECT';\n\n// We implement our own custom filter system.\nhotkeys.filter = () => true;\n\nconst tagFilter = ({ target, srcElement }: KeyboardEvent, enableOnTags?: AvailableTags[]) => {\n  // @ts-ignore\n  const targetTagName = (target && target.tagName) || (srcElement && srcElement.tagName);\n\n  return Boolean(targetTagName && enableOnTags && enableOnTags.includes(targetTagName as AvailableTags));\n};\n\nconst isKeyboardEventTriggeredByInput = (ev: KeyboardEvent) => {\n  return tagFilter(ev, ['INPUT', 'TEXTAREA', 'SELECT']);\n};\n\nexport type Options = {\n  filter?: typeof hotkeys.filter;\n  enableOnTags?: AvailableTags[];\n  splitKey?: string;\n  scope?: string;\n  keyup?: boolean;\n  keydown?: boolean;\n};\n\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: Options): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, deps?: any[]): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: Options, deps?: any[]): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: any[] | Options, deps?: any[]): React.MutableRefObject<T | null> {\n  if (options instanceof Array) {\n    deps = options;\n    options = undefined;\n  }\n\n  const { enableOnTags, filter, keyup, keydown } = options || {};\n  const ref = useRef<T | null>(null);\n\n  const memoisedCallback = useCallback((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => {\n    if (filter && !filter(keyboardEvent)) {\n      return false;\n    }\n\n    if (isKeyboardEventTriggeredByInput(keyboardEvent) && !tagFilter(keyboardEvent, enableOnTags)) {\n      return true;\n    }\n\n    if (ref.current === null || document.activeElement === ref.current) {\n      callback(keyboardEvent, hotkeysEvent);\n      return true;\n    }\n\n    return false;\n  }, deps ? [ref, enableOnTags, filter, ...deps] : [ref, enableOnTags, filter]);\n\n  useEffect(() => {\n    if (keyup && keydown !== true) {\n      (options as Options).keydown = false;\n    }\n\n    hotkeys(keys, (options as Options) || {}, memoisedCallback);\n\n    return () => hotkeys.unbind(keys, memoisedCallback);\n  }, [memoisedCallback, options, keys]);\n\n  return ref;\n}"]},"metadata":{},"sourceType":"module"}