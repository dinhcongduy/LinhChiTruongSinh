{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"../tracking-buffer/writable-tracking-buffer\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst TVP_ROW_TOKEN = Buffer.from([0x01]);\nconst TVP_END_TOKEN = Buffer.from([0x00]);\nconst TVP = {\n  id: 0xF3,\n  type: 'TVPTYPE',\n  name: 'TVP',\n  declaration: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    return value.name + ' readonly';\n  },\n\n  generateTypeInfo(parameter) {\n    var _parameter$value$sche, _parameter$value, _parameter$value$name, _parameter$value2;\n\n    const databaseName = '';\n    const schema = (_parameter$value$sche = (_parameter$value = parameter.value) === null || _parameter$value === void 0 ? void 0 : _parameter$value.schema) !== null && _parameter$value$sche !== void 0 ? _parameter$value$sche : '';\n    const typeName = (_parameter$value$name = (_parameter$value2 = parameter.value) === null || _parameter$value2 === void 0 ? void 0 : _parameter$value2.name) !== null && _parameter$value$name !== void 0 ? _parameter$value$name : '';\n    const bufferLength = 1 + 1 + Buffer.byteLength(databaseName, 'ucs2') + 1 + Buffer.byteLength(schema, 'ucs2') + 1 + Buffer.byteLength(typeName, 'ucs2');\n    const buffer = new _writableTrackingBuffer.default(bufferLength, 'ucs2');\n    buffer.writeUInt8(this.id);\n    buffer.writeBVarchar(databaseName);\n    buffer.writeBVarchar(schema);\n    buffer.writeBVarchar(typeName);\n    return buffer.data;\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      const buffer = Buffer.alloc(4);\n      buffer.writeUInt16LE(0xFFFF, 0);\n      buffer.writeUInt8(0x00, 2);\n      buffer.writeUInt8(0x00, 3);\n      yield buffer;\n      return;\n    }\n\n    const {\n      columns,\n      rows\n    } = parameter.value;\n    const buffer = Buffer.alloc(2);\n    buffer.writeUInt16LE(columns.length, 0);\n    yield buffer;\n\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const column = columns[i];\n      const buff = Buffer.alloc(6); // UserType\n\n      buff.writeUInt32LE(0x00000000, 0); // Flags\n\n      buff.writeUInt16LE(0x0000, 4);\n      yield buff; // TYPE_INFO\n\n      yield column.type.generateTypeInfo(column); // ColName\n\n      yield Buffer.from([0x00]);\n    }\n\n    yield TVP_END_TOKEN;\n\n    for (let i = 0, length = rows.length; i < length; i++) {\n      yield TVP_ROW_TOKEN;\n      const row = rows[i];\n\n      for (let k = 0, len2 = row.length; k < len2; k++) {\n        const column = columns[k];\n        const value = row[k];\n        const param = {\n          value: value,\n          length: column.length,\n          scale: column.scale,\n          precision: column.precision\n        }; // TvpColumnData\n\n        yield* column.type.generateParameterData(param, options);\n      }\n    }\n\n    yield TVP_END_TOKEN;\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'object') {\n      return new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.columns)) {\n      return new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.rows)) {\n      return new TypeError('Invalid table.');\n    }\n\n    return value;\n  }\n};\nvar _default = TVP;\nexports.default = _default;\nmodule.exports = TVP;","map":{"version":3,"sources":["C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/tedious/lib/data-types/tvp.js"],"names":["Object","defineProperty","exports","value","default","_writableTrackingBuffer","_interopRequireDefault","require","obj","__esModule","TVP_ROW_TOKEN","Buffer","from","TVP_END_TOKEN","TVP","id","type","name","declaration","parameter","generateTypeInfo","_parameter$value$sche","_parameter$value","_parameter$value$name","_parameter$value2","databaseName","schema","typeName","bufferLength","byteLength","buffer","writeUInt8","writeBVarchar","data","generateParameterData","options","alloc","writeUInt16LE","columns","rows","length","i","len","column","buff","writeUInt32LE","row","k","len2","param","scale","precision","validate","TypeError","Array","isArray","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"../tracking-buffer/writable-tracking-buffer\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst TVP_ROW_TOKEN = Buffer.from([0x01]);\nconst TVP_END_TOKEN = Buffer.from([0x00]);\nconst TVP = {\n  id: 0xF3,\n  type: 'TVPTYPE',\n  name: 'TVP',\n  declaration: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    return value.name + ' readonly';\n  },\n\n  generateTypeInfo(parameter) {\n    var _parameter$value$sche, _parameter$value, _parameter$value$name, _parameter$value2;\n\n    const databaseName = '';\n    const schema = (_parameter$value$sche = (_parameter$value = parameter.value) === null || _parameter$value === void 0 ? void 0 : _parameter$value.schema) !== null && _parameter$value$sche !== void 0 ? _parameter$value$sche : '';\n    const typeName = (_parameter$value$name = (_parameter$value2 = parameter.value) === null || _parameter$value2 === void 0 ? void 0 : _parameter$value2.name) !== null && _parameter$value$name !== void 0 ? _parameter$value$name : '';\n    const bufferLength = 1 + 1 + Buffer.byteLength(databaseName, 'ucs2') + 1 + Buffer.byteLength(schema, 'ucs2') + 1 + Buffer.byteLength(typeName, 'ucs2');\n    const buffer = new _writableTrackingBuffer.default(bufferLength, 'ucs2');\n    buffer.writeUInt8(this.id);\n    buffer.writeBVarchar(databaseName);\n    buffer.writeBVarchar(schema);\n    buffer.writeBVarchar(typeName);\n    return buffer.data;\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      const buffer = Buffer.alloc(4);\n      buffer.writeUInt16LE(0xFFFF, 0);\n      buffer.writeUInt8(0x00, 2);\n      buffer.writeUInt8(0x00, 3);\n      yield buffer;\n      return;\n    }\n\n    const {\n      columns,\n      rows\n    } = parameter.value;\n    const buffer = Buffer.alloc(2);\n    buffer.writeUInt16LE(columns.length, 0);\n    yield buffer;\n\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const column = columns[i];\n      const buff = Buffer.alloc(6); // UserType\n\n      buff.writeUInt32LE(0x00000000, 0); // Flags\n\n      buff.writeUInt16LE(0x0000, 4);\n      yield buff; // TYPE_INFO\n\n      yield column.type.generateTypeInfo(column); // ColName\n\n      yield Buffer.from([0x00]);\n    }\n\n    yield TVP_END_TOKEN;\n\n    for (let i = 0, length = rows.length; i < length; i++) {\n      yield TVP_ROW_TOKEN;\n      const row = rows[i];\n\n      for (let k = 0, len2 = row.length; k < len2; k++) {\n        const column = columns[k];\n        const value = row[k];\n        const param = {\n          value: value,\n          length: column.length,\n          scale: column.scale,\n          precision: column.precision\n        }; // TvpColumnData\n\n        yield* column.type.generateParameterData(param, options);\n      }\n    }\n\n    yield TVP_END_TOKEN;\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'object') {\n      return new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.columns)) {\n      return new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.rows)) {\n      return new TypeError('Invalid table.');\n    }\n\n    return value;\n  }\n};\nvar _default = TVP;\nexports.default = _default;\nmodule.exports = TVP;"]},"metadata":{},"sourceType":"script"}