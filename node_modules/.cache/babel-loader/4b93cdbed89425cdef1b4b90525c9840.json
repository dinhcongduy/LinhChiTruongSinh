{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\nconst NVarChar = {\n  id: 0xE7,\n  type: 'NVARCHAR',\n  name: 'NVarChar',\n  maximumLength: 4000,\n  declaration: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.toString().length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'nvarchar(' + length + ')';\n    } else {\n      return 'nvarchar(max)';\n    }\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      if (Buffer.isBuffer(value)) {\n        return value.length / 2 || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length * 2, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n\n    return buffer;\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value != null) {\n      let value = parameter.value;\n\n      if (parameter.length <= this.maximumLength) {\n        let length;\n\n        if (value instanceof Buffer) {\n          length = value.length;\n          const buffer = Buffer.alloc(2);\n          buffer.writeUInt16LE(length, 0);\n          yield buffer;\n          yield value;\n        } else {\n          value = value.toString();\n          length = Buffer.byteLength(value, 'ucs2');\n          const buffer = Buffer.alloc(2);\n          buffer.writeUInt16LE(length, 0);\n          yield buffer;\n          yield Buffer.from(value, 'ucs2');\n        }\n      } else {\n        yield UNKNOWN_PLP_LEN;\n\n        if (value instanceof Buffer) {\n          const length = value.length;\n\n          if (length > 0) {\n            const buffer = Buffer.alloc(4);\n            buffer.writeUInt32LE(length, 0);\n            yield buffer;\n            yield value;\n          }\n        } else {\n          value = value.toString();\n          const length = Buffer.byteLength(value, 'ucs2');\n\n          if (length > 0) {\n            const buffer = Buffer.alloc(4);\n            buffer.writeUInt32LE(length, 0);\n            yield buffer;\n            yield Buffer.from(value, 'ucs2');\n          }\n        }\n\n        yield PLP_TERMINATOR;\n      }\n    } else if (parameter.length <= this.maximumLength) {\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(NULL, 0);\n      yield buffer;\n    } else {\n      const buffer = Buffer.alloc(8);\n      const offset = buffer.writeUInt32LE(0xFFFFFFFF, 0);\n      buffer.writeUInt32LE(0xFFFFFFFF, offset);\n      yield buffer;\n    }\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        return TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = NVarChar;\nexports.default = _default;\nmodule.exports = NVarChar;","map":{"version":3,"sources":["C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/tedious/lib/data-types/nvarchar.js"],"names":["Object","defineProperty","exports","value","default","NULL","MAX","UNKNOWN_PLP_LEN","Buffer","from","PLP_TERMINATOR","NVarChar","id","type","name","maximumLength","declaration","parameter","length","toString","output","resolveLength","isBuffer","generateTypeInfo","buffer","alloc","writeUInt8","writeUInt16LE","generateParameterData","options","byteLength","writeUInt32LE","offset","validate","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\nconst NVarChar = {\n  id: 0xE7,\n  type: 'NVARCHAR',\n  name: 'NVarChar',\n  maximumLength: 4000,\n  declaration: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.toString().length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'nvarchar(' + length + ')';\n    } else {\n      return 'nvarchar(max)';\n    }\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      if (Buffer.isBuffer(value)) {\n        return value.length / 2 || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length * 2, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n\n    return buffer;\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value != null) {\n      let value = parameter.value;\n\n      if (parameter.length <= this.maximumLength) {\n        let length;\n\n        if (value instanceof Buffer) {\n          length = value.length;\n          const buffer = Buffer.alloc(2);\n          buffer.writeUInt16LE(length, 0);\n          yield buffer;\n          yield value;\n        } else {\n          value = value.toString();\n          length = Buffer.byteLength(value, 'ucs2');\n          const buffer = Buffer.alloc(2);\n          buffer.writeUInt16LE(length, 0);\n          yield buffer;\n          yield Buffer.from(value, 'ucs2');\n        }\n      } else {\n        yield UNKNOWN_PLP_LEN;\n\n        if (value instanceof Buffer) {\n          const length = value.length;\n\n          if (length > 0) {\n            const buffer = Buffer.alloc(4);\n            buffer.writeUInt32LE(length, 0);\n            yield buffer;\n            yield value;\n          }\n        } else {\n          value = value.toString();\n          const length = Buffer.byteLength(value, 'ucs2');\n\n          if (length > 0) {\n            const buffer = Buffer.alloc(4);\n            buffer.writeUInt32LE(length, 0);\n            yield buffer;\n            yield Buffer.from(value, 'ucs2');\n          }\n        }\n\n        yield PLP_TERMINATOR;\n      }\n    } else if (parameter.length <= this.maximumLength) {\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(NULL, 0);\n      yield buffer;\n    } else {\n      const buffer = Buffer.alloc(8);\n      const offset = buffer.writeUInt32LE(0xFFFFFFFF, 0);\n      buffer.writeUInt32LE(0xFFFFFFFF, offset);\n      yield buffer;\n    }\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        return TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = NVarChar;\nexports.default = _default;\nmodule.exports = NVarChar;"]},"metadata":{},"sourceType":"script"}