{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL = (1 << 16) - 1;\nconst Char = {\n  id: 0xAF,\n  type: 'BIGCHAR',\n  name: 'Char',\n  maximumLength: 8000,\n  declaration: function (parameter) {\n    // const value = parameter.value as null | string | { toString(): string };\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.toString().length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length < this.maximumLength) {\n      return 'char(' + length + ')';\n    } else {\n      return 'char(' + this.maximumLength + ')';\n    }\n  },\n  // ParameterData<any> is temporary solution. TODO: need to understand what type ParameterData<...> can be.\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      if (Buffer.isBuffer(value)) {\n        return value.length || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeUInt16LE(parameter.length, 1);\n    return buffer;\n  },\n\n  *generateParameterData(parameter, options) {\n    let value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (value != null) {\n      value = value.toString();\n      const length = Buffer.byteLength(value, 'ascii');\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(length, 0);\n      yield buffer;\n      yield Buffer.alloc(length, parameter.value, 'ascii');\n    } else {\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(NULL, 0);\n      yield buffer;\n    }\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        return TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = Char;\nexports.default = _default;\nmodule.exports = Char;","map":{"version":3,"sources":["C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/tedious/lib/data-types/char.js"],"names":["Object","defineProperty","exports","value","default","NULL","Char","id","type","name","maximumLength","declaration","parameter","length","toString","output","resolveLength","Buffer","isBuffer","generateTypeInfo","buffer","alloc","writeUInt8","writeUInt16LE","generateParameterData","options","byteLength","validate","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL = (1 << 16) - 1;\nconst Char = {\n  id: 0xAF,\n  type: 'BIGCHAR',\n  name: 'Char',\n  maximumLength: 8000,\n  declaration: function (parameter) {\n    // const value = parameter.value as null | string | { toString(): string };\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.toString().length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length < this.maximumLength) {\n      return 'char(' + length + ')';\n    } else {\n      return 'char(' + this.maximumLength + ')';\n    }\n  },\n  // ParameterData<any> is temporary solution. TODO: need to understand what type ParameterData<...> can be.\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      if (Buffer.isBuffer(value)) {\n        return value.length || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeUInt16LE(parameter.length, 1);\n    return buffer;\n  },\n\n  *generateParameterData(parameter, options) {\n    let value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (value != null) {\n      value = value.toString();\n      const length = Buffer.byteLength(value, 'ascii');\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(length, 0);\n      yield buffer;\n      yield Buffer.alloc(length, parameter.value, 'ascii');\n    } else {\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(NULL, 0);\n      yield buffer;\n    }\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        return TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = Char;\nexports.default = _default;\nmodule.exports = Char;"]},"metadata":{},"sourceType":"script"}