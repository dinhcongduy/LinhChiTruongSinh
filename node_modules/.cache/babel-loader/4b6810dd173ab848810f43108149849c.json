{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\n\nvar _readableStream = require(\"readable-stream\");\n\nvar _token = require(\"./token/token\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _packet = require(\"./packet\");\n\nvar _errors = require(\"./errors\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @private\n */\n\n\nconst FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n\n};\n/**\n * @private\n */\n\nconst DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n/**\n * @private\n */\n// A transform that converts rows to packets.\n\nclass RowTransform extends _readableStream.Transform {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  constructor(bulkLoad) {\n    super({\n      writableObjectMode: true\n    });\n    this.columnMetadataWritten = void 0;\n    this.bulkLoad = void 0;\n    this.mainOptions = void 0;\n    this.columns = void 0;\n    this.bulkLoad = bulkLoad;\n    this.mainOptions = bulkLoad.options;\n    this.columns = bulkLoad.columns;\n    this.columnMetadataWritten = false;\n  }\n  /**\n   * @private\n   */\n\n\n  _transform(row, _encoding, callback) {\n    if (!this.columnMetadataWritten) {\n      this.push(this.bulkLoad.getColMetaData());\n      this.columnMetadataWritten = true;\n    }\n\n    const buf = new _writableTrackingBuffer.default(64, 'ucs2', true);\n    buf.writeUInt8(_token.TYPE.ROW);\n    this.push(buf.data);\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const c = this.columns[i];\n\n      if (this.bulkLoad.options.validateBulkLoadParameters) {\n        const error = c.type.validate(row[i]);\n\n        if (error instanceof TypeError) {\n          return callback(error);\n        }\n      }\n\n      const parameter = {\n        length: c.length,\n        scale: c.scale,\n        precision: c.precision,\n        value: row[i]\n      };\n\n      for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)) {\n        this.push(chunk);\n      }\n    }\n\n    process.nextTick(callback);\n  }\n  /**\n   * @private\n   */\n\n\n  _flush(callback) {\n    this.push(this.bulkLoad.createDoneToken());\n    process.nextTick(callback);\n  }\n\n}\n/**\n * A BulkLoad instance is used to perform a bulk insert.\n *\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\n *\n * Example of BulkLoad Usages:\n *\n * ```js\n * // optional BulkLoad options\n * const options = { keepNulls: true };\n *\n * // instantiate - provide the table where you'll be inserting to, options and a callback\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\n *   console.log('inserted %d rows', rowCount);\n * });\n *\n * // setup your columns - always indicate whether the column is nullable\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\n *\n * // add rows\n * bulkLoad.addRow({ myInt: 7, myString: 'hello' });\n * bulkLoad.addRow({ myInt: 23, myString: 'world' });\n *\n * // execute\n * connection.execBulkLoad(bulkLoad);\n * ```\n */\n\n\nclass BulkLoad extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  constructor(table, connectionOptions, {\n    checkConstraints = false,\n    fireTriggers = false,\n    keepNulls = false,\n    lockTable = false\n  }, callback) {\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    super();\n    this.error = void 0;\n    this.canceled = void 0;\n    this.executionStarted = void 0;\n    this.streamingMode = void 0;\n    this.table = void 0;\n    this.timeout = void 0;\n    this.options = void 0;\n    this.callback = void 0;\n    this.columns = void 0;\n    this.columnsByName = void 0;\n    this.firstRowWritten = void 0;\n    this.rowToPacketTransform = void 0;\n    this.message = void 0;\n    this.bulkOptions = void 0;\n    this.connection = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.error = undefined;\n    this.canceled = false;\n    this.executionStarted = false;\n    this.table = table;\n    this.options = connectionOptions;\n    this.callback = callback;\n    this.columns = [];\n    this.columnsByName = {};\n    this.firstRowWritten = false;\n    this.streamingMode = false;\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\n\n    this.message = new _message.default({\n      type: _packet.TYPE.BULK_LOAD\n    });\n    this.rowToPacketTransform.pipe(this.message);\n    this.rowToPacketTransform.once('finish', () => {\n      this.removeListener('cancel', onCancel);\n    });\n    this.rowToPacketTransform.once('error', err => {\n      this.rowToPacketTransform.unpipe(this.message);\n      this.error = err;\n      this.message.ignore = true;\n      this.message.end();\n    });\n\n    const onCancel = () => {\n      this.rowToPacketTransform.emit('error', (0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n      this.rowToPacketTransform.destroy();\n    };\n\n    this.once('cancel', onCancel);\n    this.bulkOptions = {\n      checkConstraints,\n      fireTriggers,\n      keepNulls,\n      lockTable\n    };\n  }\n  /**\n   * Adds a column to the bulk load.\n   *\n   * The column definitions should match the table you are trying to insert into.\n   * Attempting to call addColumn after the first row has been added will throw an exception.\n   *\n   * ```js\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\n   * ```\n   *\n   * @param name The name of the column.\n   * @param type One of the supported `data types`.\n   * @param __namedParameters Type [[ColumnOptions]]<p> Additional column type information. At a minimum, `nullable` must be set to true or false.\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   * @param nullable Indicates whether the column accepts NULL values.\n   * @param objName  If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]], then you can use this option to specify the property name.\n   * @param precision For Numeric, Decimal.\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n  */\n\n\n  addColumn(name, type, {\n    output = false,\n    length,\n    precision,\n    scale,\n    objName = name,\n    nullable = true\n  }) {\n    if (this.firstRowWritten) {\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\n    }\n\n    const column = {\n      type: type,\n      name: name,\n      value: null,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale,\n      objName: objName,\n      nullable: nullable\n    };\n\n    if ((type.id & 0x30) === 0x20) {\n      if (column.length == null && type.resolveLength) {\n        column.length = type.resolveLength(column);\n      }\n    }\n\n    if (type.resolvePrecision && column.precision == null) {\n      column.precision = type.resolvePrecision(column);\n    }\n\n    if (type.resolveScale && column.scale == null) {\n      column.scale = type.resolveScale(column);\n    }\n\n    this.columns.push(column);\n    this.columnsByName[name] = column;\n  }\n  /**\n   * @private\n   */\n\n\n  colTypeValidation(column, value) {\n    if (this.options.validateBulkLoadParameters) {\n      const error = column.type.validate(value);\n\n      if (error instanceof TypeError) {\n        throw error;\n      }\n    }\n  }\n  /**\n   * Adds a row to the bulk insert. This method accepts arguments in three different formats:\n   *\n   * ```js\n   * bulkLoad.addRow( rowObj )\n   * bulkLoad.addRow( columnArray )\n   * bulkLoad.addRow( col0, col1, ... colN )`\n   * ```\n   * * `rowObj`\n   *\n   *    An object of key/value pairs representing column name (or objName) and value.\n   *\n   * * `columnArray`\n   *\n   *    An array representing the values of each column in the same order which they were added to the bulkLoad object.\n   *\n   * * `col0, col1, ... colN`\n   *\n   *    If there are at least two columns, values can be passed as multiple arguments instead of an array. They\n   *    must be in the same order the columns were added in.\n   *\n   * @param input\n   */\n\n\n  addRow(...input) {\n    this.firstRowWritten = true;\n    let row;\n\n    if (input.length > 1 || !input[0] || typeof input[0] !== 'object') {\n      row = input;\n    } else {\n      row = input[0];\n    } // write each column\n\n\n    if (Array.isArray(row)) {\n      this.columns.forEach((column, i) => {\n        this.colTypeValidation(column, row[i]);\n      });\n      this.rowToPacketTransform.write(row);\n    } else {\n      this.columns.forEach(column => {\n        this.colTypeValidation(column, row[column.objName]);\n      });\n      this.rowToPacketTransform.write(this.columns.map(column => {\n        return row[column.objName];\n      }));\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  getOptionsSql() {\n    const addOptions = [];\n\n    if (this.bulkOptions.checkConstraints) {\n      addOptions.push('CHECK_CONSTRAINTS');\n    }\n\n    if (this.bulkOptions.fireTriggers) {\n      addOptions.push('FIRE_TRIGGERS');\n    }\n\n    if (this.bulkOptions.keepNulls) {\n      addOptions.push('KEEP_NULLS');\n    }\n\n    if (this.bulkOptions.lockTable) {\n      addOptions.push('TABLOCK');\n    }\n\n    if (addOptions.length > 0) {\n      return ` WITH (${addOptions.join(',')})`;\n    } else {\n      return '';\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  getBulkInsertSql() {\n    let sql = 'insert bulk ' + this.table + '(';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ', ';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n    }\n\n    sql += ')';\n    sql += this.getOptionsSql();\n    return sql;\n  }\n  /**\n   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\n   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\n   *\n   * ```js\n   * var sql = bulkLoad.getTableCreationSql();\n   * ```\n   *\n   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\n   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\n   */\n\n\n  getTableCreationSql() {\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ',\\n';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n\n      if (c.nullable !== undefined) {\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n      }\n    }\n\n    sql += '\\n)';\n    return sql;\n  }\n  /**\n   * @private\n   */\n\n\n  getColMetaData() {\n    const tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n    tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n    tBuf.writeUInt16LE(this.columns.length);\n\n    for (let j = 0, len = this.columns.length; j < len; j++) {\n      const c = this.columns[j]; // UserType\n\n      if (this.options.tdsVersion < '7_2') {\n        tBuf.writeUInt16LE(0);\n      } else {\n        tBuf.writeUInt32LE(0);\n      } // Flags\n\n\n      let flags = FLAGS.updateableReadWrite;\n\n      if (c.nullable) {\n        flags |= FLAGS.nullable;\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n        flags |= FLAGS.nullableUnknown;\n      }\n\n      tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n      tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options)); // ColName\n\n      tBuf.writeBVarchar(c.name, 'ucs2');\n    }\n\n    return tBuf.data;\n  }\n  /**\n   * Sets a timeout for this bulk load.\n   *\n   * ```js\n   * bulkLoad.setTimeout(timeout);\n   * ```\n   *\n   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\n   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\n   */\n\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n  /**\n   * @private\n   */\n\n\n  createDoneToken() {\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n    const tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n    tBuf.writeUInt8(_token.TYPE.DONE);\n    const status = DONE_STATUS.FINAL;\n    tBuf.writeUInt16LE(status);\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n    if (this.options.tdsVersion >= '7_2') {\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n    }\n\n    return tBuf.data;\n  }\n  /**\n   * Switches the `BulkLoad` object into streaming mode and returns a\n   * [writable stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_streams)\n   * that can be used to send a large amount of rows to the server.\n   *\n   * ```js\n   * const bulkLoad = connection.newBulkLoad(...);\n   * bulkLoad.addColumn(...);\n   *\n   * const rowStream = bulkLoad.getRowStream();\n   *\n   * connection.execBulkLoad(bulkLoad);\n   * ```\n   *\n   * In streaming mode, [[addRow]] cannot be used. Instead all data rows must be written to the returned stream object.\n   * The stream implementation uses data flow control to prevent memory overload. [`stream.write()`](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_write_chunk_encoding_callback)\n   * returns `false` to indicate that data transfer should be paused.\n   *\n   * After that, the stream emits a ['drain' event](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_event_drain)\n   * when it is ready to resume data transfer.\n   */\n\n\n  getRowStream() {\n    if (this.firstRowWritten) {\n      throw new Error('BulkLoad cannot be switched to streaming mode after first row has been written using addRow().');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('BulkLoad cannot be switched to streaming mode after execution has started.');\n    }\n\n    this.streamingMode = true;\n    return this.rowToPacketTransform;\n  }\n  /**\n   * @private\n   */\n\n\n  getMessageStream() {\n    return this.message;\n  }\n  /**\n   * @private\n   */\n\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n\n}\n\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad;","map":{"version":3,"sources":["D:/Bakery/Bakery_ReactjsSourceCode/node_modules/tedious/lib/bulk-load.js"],"names":["Object","defineProperty","exports","value","default","_events","require","_writableTrackingBuffer","_interopRequireDefault","_readableStream","_token","_message","_packet","_errors","obj","__esModule","FLAGS","nullable","caseSen","updateableReadWrite","updateableUnknown","identity","computed","fixedLenCLRType","sparseColumnSet","hidden","key","nullableUnknown","DONE_STATUS","FINAL","MORE","ERROR","INXACT","COUNT","ATTN","SRVERROR","RowTransform","Transform","constructor","bulkLoad","writableObjectMode","columnMetadataWritten","mainOptions","columns","options","_transform","row","_encoding","callback","push","getColMetaData","buf","writeUInt8","TYPE","ROW","data","i","length","c","validateBulkLoadParameters","error","type","validate","TypeError","parameter","scale","precision","chunk","generateParameterData","process","nextTick","_flush","createDoneToken","BulkLoad","EventEmitter","table","connectionOptions","checkConstraints","fireTriggers","keepNulls","lockTable","canceled","executionStarted","streamingMode","timeout","columnsByName","firstRowWritten","rowToPacketTransform","message","bulkOptions","connection","rows","rst","rowCount","undefined","BULK_LOAD","pipe","once","removeListener","onCancel","err","unpipe","ignore","end","emit","RequestError","destroy","addColumn","name","output","objName","Error","column","id","resolveLength","resolvePrecision","resolveScale","colTypeValidation","addRow","input","Array","isArray","forEach","write","map","getOptionsSql","addOptions","join","getBulkInsertSql","sql","len","declaration","getTableCreationSql","tBuf","COLMETADATA","writeUInt16LE","j","tdsVersion","writeUInt32LE","flags","writeBuffer","generateTypeInfo","writeBVarchar","setTimeout","DONE","status","getRowStream","getMessageStream","cancel","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\n\nvar _readableStream = require(\"readable-stream\");\n\nvar _token = require(\"./token/token\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _packet = require(\"./packet\");\n\nvar _errors = require(\"./errors\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @private\n */\nconst FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n\n};\n/**\n * @private\n */\n\nconst DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n/**\n * @private\n */\n\n// A transform that converts rows to packets.\nclass RowTransform extends _readableStream.Transform {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  constructor(bulkLoad) {\n    super({\n      writableObjectMode: true\n    });\n    this.columnMetadataWritten = void 0;\n    this.bulkLoad = void 0;\n    this.mainOptions = void 0;\n    this.columns = void 0;\n    this.bulkLoad = bulkLoad;\n    this.mainOptions = bulkLoad.options;\n    this.columns = bulkLoad.columns;\n    this.columnMetadataWritten = false;\n  }\n  /**\n   * @private\n   */\n\n\n  _transform(row, _encoding, callback) {\n    if (!this.columnMetadataWritten) {\n      this.push(this.bulkLoad.getColMetaData());\n      this.columnMetadataWritten = true;\n    }\n\n    const buf = new _writableTrackingBuffer.default(64, 'ucs2', true);\n    buf.writeUInt8(_token.TYPE.ROW);\n    this.push(buf.data);\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const c = this.columns[i];\n\n      if (this.bulkLoad.options.validateBulkLoadParameters) {\n        const error = c.type.validate(row[i]);\n\n        if (error instanceof TypeError) {\n          return callback(error);\n        }\n      }\n\n      const parameter = {\n        length: c.length,\n        scale: c.scale,\n        precision: c.precision,\n        value: row[i]\n      };\n\n      for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)) {\n        this.push(chunk);\n      }\n    }\n\n    process.nextTick(callback);\n  }\n  /**\n   * @private\n   */\n\n\n  _flush(callback) {\n    this.push(this.bulkLoad.createDoneToken());\n    process.nextTick(callback);\n  }\n\n}\n/**\n * A BulkLoad instance is used to perform a bulk insert.\n *\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\n *\n * Example of BulkLoad Usages:\n *\n * ```js\n * // optional BulkLoad options\n * const options = { keepNulls: true };\n *\n * // instantiate - provide the table where you'll be inserting to, options and a callback\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\n *   console.log('inserted %d rows', rowCount);\n * });\n *\n * // setup your columns - always indicate whether the column is nullable\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\n *\n * // add rows\n * bulkLoad.addRow({ myInt: 7, myString: 'hello' });\n * bulkLoad.addRow({ myInt: 23, myString: 'world' });\n *\n * // execute\n * connection.execBulkLoad(bulkLoad);\n * ```\n */\n\n\nclass BulkLoad extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  constructor(table, connectionOptions, {\n    checkConstraints = false,\n    fireTriggers = false,\n    keepNulls = false,\n    lockTable = false\n  }, callback) {\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    super();\n    this.error = void 0;\n    this.canceled = void 0;\n    this.executionStarted = void 0;\n    this.streamingMode = void 0;\n    this.table = void 0;\n    this.timeout = void 0;\n    this.options = void 0;\n    this.callback = void 0;\n    this.columns = void 0;\n    this.columnsByName = void 0;\n    this.firstRowWritten = void 0;\n    this.rowToPacketTransform = void 0;\n    this.message = void 0;\n    this.bulkOptions = void 0;\n    this.connection = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.error = undefined;\n    this.canceled = false;\n    this.executionStarted = false;\n    this.table = table;\n    this.options = connectionOptions;\n    this.callback = callback;\n    this.columns = [];\n    this.columnsByName = {};\n    this.firstRowWritten = false;\n    this.streamingMode = false;\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\n\n    this.message = new _message.default({\n      type: _packet.TYPE.BULK_LOAD\n    });\n    this.rowToPacketTransform.pipe(this.message);\n    this.rowToPacketTransform.once('finish', () => {\n      this.removeListener('cancel', onCancel);\n    });\n    this.rowToPacketTransform.once('error', err => {\n      this.rowToPacketTransform.unpipe(this.message);\n      this.error = err;\n      this.message.ignore = true;\n      this.message.end();\n    });\n\n    const onCancel = () => {\n      this.rowToPacketTransform.emit('error', (0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n      this.rowToPacketTransform.destroy();\n    };\n\n    this.once('cancel', onCancel);\n    this.bulkOptions = {\n      checkConstraints,\n      fireTriggers,\n      keepNulls,\n      lockTable\n    };\n  }\n  /**\n   * Adds a column to the bulk load.\n   *\n   * The column definitions should match the table you are trying to insert into.\n   * Attempting to call addColumn after the first row has been added will throw an exception.\n   *\n   * ```js\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\n   * ```\n   *\n   * @param name The name of the column.\n   * @param type One of the supported `data types`.\n   * @param __namedParameters Type [[ColumnOptions]]<p> Additional column type information. At a minimum, `nullable` must be set to true or false.\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   * @param nullable Indicates whether the column accepts NULL values.\n   * @param objName  If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]], then you can use this option to specify the property name.\n   * @param precision For Numeric, Decimal.\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n  */\n\n\n  addColumn(name, type, {\n    output = false,\n    length,\n    precision,\n    scale,\n    objName = name,\n    nullable = true\n  }) {\n    if (this.firstRowWritten) {\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\n    }\n\n    const column = {\n      type: type,\n      name: name,\n      value: null,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale,\n      objName: objName,\n      nullable: nullable\n    };\n\n    if ((type.id & 0x30) === 0x20) {\n      if (column.length == null && type.resolveLength) {\n        column.length = type.resolveLength(column);\n      }\n    }\n\n    if (type.resolvePrecision && column.precision == null) {\n      column.precision = type.resolvePrecision(column);\n    }\n\n    if (type.resolveScale && column.scale == null) {\n      column.scale = type.resolveScale(column);\n    }\n\n    this.columns.push(column);\n    this.columnsByName[name] = column;\n  }\n  /**\n   * @private\n   */\n\n\n  colTypeValidation(column, value) {\n    if (this.options.validateBulkLoadParameters) {\n      const error = column.type.validate(value);\n\n      if (error instanceof TypeError) {\n        throw error;\n      }\n    }\n  }\n  /**\n   * Adds a row to the bulk insert. This method accepts arguments in three different formats:\n   *\n   * ```js\n   * bulkLoad.addRow( rowObj )\n   * bulkLoad.addRow( columnArray )\n   * bulkLoad.addRow( col0, col1, ... colN )`\n   * ```\n   * * `rowObj`\n   *\n   *    An object of key/value pairs representing column name (or objName) and value.\n   *\n   * * `columnArray`\n   *\n   *    An array representing the values of each column in the same order which they were added to the bulkLoad object.\n   *\n   * * `col0, col1, ... colN`\n   *\n   *    If there are at least two columns, values can be passed as multiple arguments instead of an array. They\n   *    must be in the same order the columns were added in.\n   *\n   * @param input\n   */\n\n\n  addRow(...input) {\n    this.firstRowWritten = true;\n    let row;\n\n    if (input.length > 1 || !input[0] || typeof input[0] !== 'object') {\n      row = input;\n    } else {\n      row = input[0];\n    } // write each column\n\n\n    if (Array.isArray(row)) {\n      this.columns.forEach((column, i) => {\n        this.colTypeValidation(column, row[i]);\n      });\n      this.rowToPacketTransform.write(row);\n    } else {\n      this.columns.forEach(column => {\n        this.colTypeValidation(column, row[column.objName]);\n      });\n      this.rowToPacketTransform.write(this.columns.map(column => {\n        return row[column.objName];\n      }));\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  getOptionsSql() {\n    const addOptions = [];\n\n    if (this.bulkOptions.checkConstraints) {\n      addOptions.push('CHECK_CONSTRAINTS');\n    }\n\n    if (this.bulkOptions.fireTriggers) {\n      addOptions.push('FIRE_TRIGGERS');\n    }\n\n    if (this.bulkOptions.keepNulls) {\n      addOptions.push('KEEP_NULLS');\n    }\n\n    if (this.bulkOptions.lockTable) {\n      addOptions.push('TABLOCK');\n    }\n\n    if (addOptions.length > 0) {\n      return ` WITH (${addOptions.join(',')})`;\n    } else {\n      return '';\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  getBulkInsertSql() {\n    let sql = 'insert bulk ' + this.table + '(';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ', ';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n    }\n\n    sql += ')';\n    sql += this.getOptionsSql();\n    return sql;\n  }\n  /**\n   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\n   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\n   *\n   * ```js\n   * var sql = bulkLoad.getTableCreationSql();\n   * ```\n   *\n   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\n   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\n   */\n\n\n  getTableCreationSql() {\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ',\\n';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n\n      if (c.nullable !== undefined) {\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n      }\n    }\n\n    sql += '\\n)';\n    return sql;\n  }\n  /**\n   * @private\n   */\n\n\n  getColMetaData() {\n    const tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n    tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n    tBuf.writeUInt16LE(this.columns.length);\n\n    for (let j = 0, len = this.columns.length; j < len; j++) {\n      const c = this.columns[j]; // UserType\n\n      if (this.options.tdsVersion < '7_2') {\n        tBuf.writeUInt16LE(0);\n      } else {\n        tBuf.writeUInt32LE(0);\n      } // Flags\n\n\n      let flags = FLAGS.updateableReadWrite;\n\n      if (c.nullable) {\n        flags |= FLAGS.nullable;\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n        flags |= FLAGS.nullableUnknown;\n      }\n\n      tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n      tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options)); // ColName\n\n      tBuf.writeBVarchar(c.name, 'ucs2');\n    }\n\n    return tBuf.data;\n  }\n  /**\n   * Sets a timeout for this bulk load.\n   *\n   * ```js\n   * bulkLoad.setTimeout(timeout);\n   * ```\n   *\n   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\n   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\n   */\n\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n  /**\n   * @private\n   */\n\n\n  createDoneToken() {\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n    const tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n    tBuf.writeUInt8(_token.TYPE.DONE);\n    const status = DONE_STATUS.FINAL;\n    tBuf.writeUInt16LE(status);\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n    if (this.options.tdsVersion >= '7_2') {\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n    }\n\n    return tBuf.data;\n  }\n  /**\n   * Switches the `BulkLoad` object into streaming mode and returns a\n   * [writable stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_streams)\n   * that can be used to send a large amount of rows to the server.\n   *\n   * ```js\n   * const bulkLoad = connection.newBulkLoad(...);\n   * bulkLoad.addColumn(...);\n   *\n   * const rowStream = bulkLoad.getRowStream();\n   *\n   * connection.execBulkLoad(bulkLoad);\n   * ```\n   *\n   * In streaming mode, [[addRow]] cannot be used. Instead all data rows must be written to the returned stream object.\n   * The stream implementation uses data flow control to prevent memory overload. [`stream.write()`](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_write_chunk_encoding_callback)\n   * returns `false` to indicate that data transfer should be paused.\n   *\n   * After that, the stream emits a ['drain' event](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_event_drain)\n   * when it is ready to resume data transfer.\n   */\n\n\n  getRowStream() {\n    if (this.firstRowWritten) {\n      throw new Error('BulkLoad cannot be switched to streaming mode after first row has been written using addRow().');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('BulkLoad cannot be switched to streaming mode after execution has started.');\n    }\n\n    this.streamingMode = true;\n    return this.rowToPacketTransform;\n  }\n  /**\n   * @private\n   */\n\n\n  getMessageStream() {\n    return this.message;\n  }\n  /**\n   * @private\n   */\n\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n\n}\n\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad;"]},"metadata":{},"sourceType":"script"}