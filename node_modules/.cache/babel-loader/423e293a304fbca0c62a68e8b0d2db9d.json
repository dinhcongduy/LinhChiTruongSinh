{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _regeneratorRuntime = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar msRest = require(\"@azure/ms-rest-js\");\n\nvar applicationTokenCredentialsBase_1 = require(\"../credentials/applicationTokenCredentialsBase\");\n\nvar authConstants_1 = require(\"../util/authConstants\");\n/**\n * Builds an array of tenantIds.\n * @param {TokenCredentialsBase} credentials The credentials.\n * @param {string} apiVersion default value 2016-06-01\n * @returns {Promise<string[]>} resolves to an array of tenantIds and rejects with an error.\n */\n\n\nfunction buildTenantList(credentials) {\n  var apiVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"2016-06-01\";\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var client, baseUrl, reqUrl, req, res, result, tenants, _iterator, _step, tenant;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(credentials.domain && credentials.domain !== authConstants_1.AuthConstants.AAD_COMMON_TENANT)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", [credentials.domain]);\n\n          case 2:\n            client = new msRest.ServiceClient(credentials);\n            baseUrl = credentials.environment.resourceManagerEndpointUrl;\n            reqUrl = \"\".concat(baseUrl).concat(baseUrl.endsWith(\"/\") ? \"\" : \"/\", \"tenants?api-version=\").concat(apiVersion);\n            req = {\n              url: reqUrl,\n              method: \"GET\"\n            };\n            _context.next = 8;\n            return client.sendRequest(req);\n\n          case 8:\n            res = _context.sent;\n            result = [];\n\n            if (res.status < 300) {\n              tenants = res.parsedBody;\n              _iterator = _createForOfIteratorHelper(tenants.value);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  tenant = _step.value;\n                  result.push(tenant.tenantId);\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n\n            return _context.abrupt(\"return\", result);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.buildTenantList = buildTenantList;\n\nfunction getSubscriptionsFromTenants(credentials, tenantList) {\n  var apiVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"2016-06-01\";\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var subscriptions, userType, username, originalDomain, _iterator2, _step2, _loop;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            subscriptions = [];\n            userType = \"user\";\n            originalDomain = credentials.domain;\n\n            if (credentials instanceof applicationTokenCredentialsBase_1.ApplicationTokenCredentialsBase) {\n              userType = \"servicePrincipal\";\n              username = credentials.clientId;\n            } else {\n              username = credentials.username;\n            }\n\n            _iterator2 = _createForOfIteratorHelper(tenantList);\n            _context3.prev = 5;\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n              var tenant, client, baseUrl, reqUrl, req, res, subscriptionList;\n              return _regeneratorRuntime.wrap(function _loop$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      tenant = _step2.value;\n                      credentials.domain = tenant;\n                      client = new msRest.ServiceClient(credentials);\n                      baseUrl = credentials.environment.resourceManagerEndpointUrl;\n                      reqUrl = \"\".concat(baseUrl).concat(baseUrl.endsWith(\"/\") ? \"\" : \"/\", \"subscriptions?api-version=\").concat(apiVersion);\n                      req = {\n                        url: reqUrl,\n                        method: \"GET\"\n                      };\n                      _context2.next = 8;\n                      return client.sendRequest(req);\n\n                    case 8:\n                      res = _context2.sent;\n                      subscriptionList = res.parsedBody.value;\n                      subscriptions = subscriptions.concat(subscriptionList.map(function (s) {\n                        s.tenantId = tenant;\n                        s.user = {\n                          name: username,\n                          type: userType\n                        };\n                        s.environmentName = credentials.environment.name;\n                        s.name = s.displayName;\n                        s.id = s.subscriptionId;\n                        delete s.displayName;\n                        delete s.subscriptionId;\n                        delete s.subscriptionPolicies;\n                        return s;\n                      }));\n\n                    case 11:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _loop);\n            });\n\n            _iterator2.s();\n\n          case 8:\n            if ((_step2 = _iterator2.n()).done) {\n              _context3.next = 12;\n              break;\n            }\n\n            return _context3.delegateYield(_loop(), \"t0\", 10);\n\n          case 10:\n            _context3.next = 8;\n            break;\n\n          case 12:\n            _context3.next = 17;\n            break;\n\n          case 14:\n            _context3.prev = 14;\n            _context3.t1 = _context3[\"catch\"](5);\n\n            _iterator2.e(_context3.t1);\n\n          case 17:\n            _context3.prev = 17;\n\n            _iterator2.f();\n\n            return _context3.finish(17);\n\n          case 20:\n            // Reset the original domain.\n            credentials.domain = originalDomain;\n            return _context3.abrupt(\"return\", subscriptions);\n\n          case 22:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2, null, [[5, 14, 17, 20]]);\n  }));\n}\n\nexports.getSubscriptionsFromTenants = getSubscriptionsFromTenants;","map":{"version":3,"sources":["../../../lib/subscriptionManagement/subscriptionUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst msRest = require(\"@azure/ms-rest-js\");\nconst applicationTokenCredentialsBase_1 = require(\"../credentials/applicationTokenCredentialsBase\");\nconst authConstants_1 = require(\"../util/authConstants\");\n/**\n * Builds an array of tenantIds.\n * @param {TokenCredentialsBase} credentials The credentials.\n * @param {string} apiVersion default value 2016-06-01\n * @returns {Promise<string[]>} resolves to an array of tenantIds and rejects with an error.\n */\nfunction buildTenantList(credentials, apiVersion = \"2016-06-01\") {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (credentials.domain && credentials.domain !== authConstants_1.AuthConstants.AAD_COMMON_TENANT) {\n            return [credentials.domain];\n        }\n        const client = new msRest.ServiceClient(credentials);\n        const baseUrl = credentials.environment.resourceManagerEndpointUrl;\n        const reqUrl = `${baseUrl}${baseUrl.endsWith(\"/\") ? \"\" : \"/\"}tenants?api-version=${apiVersion}`;\n        const req = {\n            url: reqUrl,\n            method: \"GET\",\n        };\n        const res = yield client.sendRequest(req);\n        const result = [];\n        if (res.status < 300) {\n            const tenants = res.parsedBody;\n            for (const tenant of tenants.value) {\n                result.push(tenant.tenantId);\n            }\n        }\n        return result;\n    });\n}\nexports.buildTenantList = buildTenantList;\nfunction getSubscriptionsFromTenants(credentials, tenantList, apiVersion = \"2016-06-01\") {\n    return __awaiter(this, void 0, void 0, function* () {\n        let subscriptions = [];\n        let userType = \"user\";\n        let username;\n        const originalDomain = credentials.domain;\n        if (credentials instanceof applicationTokenCredentialsBase_1.ApplicationTokenCredentialsBase) {\n            userType = \"servicePrincipal\";\n            username = credentials.clientId;\n        }\n        else {\n            username = credentials.username;\n        }\n        for (const tenant of tenantList) {\n            credentials.domain = tenant;\n            const client = new msRest.ServiceClient(credentials);\n            const baseUrl = credentials.environment.resourceManagerEndpointUrl;\n            const reqUrl = `${baseUrl}${baseUrl.endsWith(\"/\") ? \"\" : \"/\"}subscriptions?api-version=${apiVersion}`;\n            const req = {\n                url: reqUrl,\n                method: \"GET\",\n            };\n            const res = yield client.sendRequest(req);\n            const subscriptionList = res.parsedBody.value;\n            subscriptions = subscriptions.concat(subscriptionList.map((s) => {\n                s.tenantId = tenant;\n                s.user = { name: username, type: userType };\n                s.environmentName = credentials.environment.name;\n                s.name = s.displayName;\n                s.id = s.subscriptionId;\n                delete s.displayName;\n                delete s.subscriptionId;\n                delete s.subscriptionPolicies;\n                return s;\n            }));\n        }\n        // Reset the original domain.\n        credentials.domain = originalDomain;\n        return subscriptions;\n    });\n}\nexports.getSubscriptionsFromTenants = getSubscriptionsFromTenants;\n//# sourceMappingURL=subscriptionUtils.js.map"]},"metadata":{},"sourceType":"script"}