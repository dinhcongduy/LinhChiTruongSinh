{"ast":null,"code":"/*\n * @copyright\n * Copyright Â© Microsoft Open Technologies, Inc.\n *\n * All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http: *www.apache.org/licenses/LICENSE-2.0\n *\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\n *\n * See the Apache License, Version 2.0 for the specific language\n * governing permissions and limitations under the License.\n */\n'use strict';\n\nvar request = require('request');\n\nvar url = require('url');\n\nvar _ = require('underscore');\n\nvar AADConstants = require('./constants').AADConstants;\n\nvar Logger = require('./log').Logger;\n\nvar util = require('./util');\n/**\n* Constructs an Authority object with a specific authority URL.\n* @private\n* @constructor\n* @param {string}   authorityUrl        A URL that identifies a token authority.\n* @param {bool}     validateAuthority   Indicates whether the Authority url should be validated as an actual AAD\n*                                       authority.  The default is true.\n*/\n\n\nfunction Authority(authorityUrl, validateAuthority) {\n  this._log = null;\n  this._url = url.parse(authorityUrl);\n\n  this._validateAuthorityUrl();\n\n  this._validated = !validateAuthority;\n  this._host = null;\n  this._tenant = null;\n\n  this._parseAuthority();\n\n  this._authorizationEndpoint = null;\n  this._tokenEndpoint = null;\n  this._deviceCodeEndpoint = null;\n  this._isAdfsAuthority = this._tenant.toLowerCase() === \"adfs\";\n}\n/**\n * The URL of the authority\n * @instance\n * @type {string}\n * @memberOf Authority\n * @name url\n */\n\n\nObject.defineProperty(Authority.prototype, 'url', {\n  get: function get() {\n    return url.format(this._url);\n  }\n});\n/**\n * The token endpoint that the authority uses as discovered by instance discovery.\n * @instance\n * @type {string}\n * @memberOf Authority\n * @name tokenEndpoint\n */\n\nObject.defineProperty(Authority.prototype, 'tokenEndpoint', {\n  get: function get() {\n    return this._tokenEndpoint;\n  }\n});\nObject.defineProperty(Authority.prototype, 'deviceCodeEndpoint', {\n  get: function get() {\n    return this._deviceCodeEndpoint;\n  }\n});\n/**\n * Checks the authority url to ensure that it meets basic requirements such as being over SSL.  If it does not then\n * this method will throw if any of the checks fail.\n * @private\n * @throws {Error} If the authority url fails to pass any validation checks.\n */\n\nAuthority.prototype._validateAuthorityUrl = function () {\n  if (this._url.protocol !== 'https:') {\n    throw new Error('The authority url must be an https endpoint.');\n  }\n\n  if (this._url.query) {\n    throw new Error('The authority url must not have a query string.');\n  }\n};\n/**\n * Parse the authority to get the tenant name.  The rest of the\n * URL is thrown away in favor of one of the endpoints from the validation doc.\n * @private\n */\n\n\nAuthority.prototype._parseAuthority = function () {\n  this._host = this._url.host;\n\n  var pathParts = this._url.pathname.split('/');\n\n  this._tenant = pathParts[1];\n\n  if (!this._tenant) {\n    throw new Error('Could not determine tenant.');\n  }\n};\n/**\n * Performs instance discovery based on a simple match against well known authorities.\n * @private\n * @return {bool}  Returns true if the authority is recognized.\n */\n\n\nAuthority.prototype._performStaticInstanceDiscovery = function () {\n  this._log.verbose('Performing static instance discovery');\n\n  var hostIndex = _.indexOf(AADConstants.WELL_KNOWN_AUTHORITY_HOSTS, this._url.hostname);\n\n  var found = hostIndex > -1;\n\n  if (found) {\n    this._log.verbose('Authority validated via static instance discovery.');\n  }\n\n  return found;\n};\n\nAuthority.prototype._createAuthorityUrl = function () {\n  return 'https://' + this._url.host + '/' + encodeURIComponent(this._tenant) + AADConstants.AUTHORIZE_ENDPOINT_PATH;\n};\n/**\n * Creates an instance discovery endpoint url for the specific authority that this object represents.\n * @private\n * @param  {string} authorityHost The host name of a well known authority.\n * @return {URL}    The constructed endpoint url.\n */\n\n\nAuthority.prototype._createInstanceDiscoveryEndpointFromTemplate = function (authorityHost) {\n  var discoveryEndpoint = AADConstants.INSTANCE_DISCOVERY_ENDPOINT_TEMPLATE;\n  discoveryEndpoint = discoveryEndpoint.replace('{authorize_host}', authorityHost);\n  discoveryEndpoint = discoveryEndpoint.replace('{authorize_endpoint}', encodeURIComponent(this._createAuthorityUrl()));\n  return url.parse(discoveryEndpoint);\n};\n/**\n * Performs instance discovery via a network call to well known authorities.\n * @private\n * @param {Authority.InstanceDiscoveryCallback}   callback    The callback function.  If succesful,\n *                                                            this function calls the callback with the\n *                                                            tenantDiscoveryEndpoint returned by the\n *                                                            server.\n */\n\n\nAuthority.prototype._performDynamicInstanceDiscovery = function (callback) {\n  try {\n    var self = this;\n\n    var discoveryEndpoint = this._createInstanceDiscoveryEndpointFromTemplate(AADConstants.WORLD_WIDE_AUTHORITY);\n\n    var getOptions = util.createRequestOptions(self);\n\n    this._log.verbose('Attempting instance discover');\n\n    this._log.verbose('Attempting instance discover at: ' + url.format(discoveryEndpoint), true);\n\n    request.get(discoveryEndpoint, getOptions, util.createRequestHandler('Instance Discovery', this._log, callback, function (response, body) {\n      var discoveryResponse = JSON.parse(body);\n\n      if (discoveryResponse['tenant_discovery_endpoint']) {\n        callback(null, discoveryResponse['tenant_discovery_endpoint']);\n      } else {\n        callback(self._log.createError('Failed to parse instance discovery response'));\n      }\n    }));\n  } catch (e) {\n    callback(e);\n  }\n};\n/**\n * @callback InstanceDiscoveryCallback\n * @private\n * @memberOf Authority\n * @param {Error} err If an error occurs during instance discovery then it will be returned here.\n * @param {string} tenantDiscoveryEndpoint If instance discovery is successful then this will contain the\n *                                         tenantDiscoveryEndpoint associated with the authority.\n */\n\n/**\n * Determines whether the authority is recognized as a trusted AAD authority.\n * @private\n * @param {Authority.InstanceDiscoveryCallback}   callback    The callback function.\n */\n\n\nAuthority.prototype._validateViaInstanceDiscovery = function (callback) {\n  if (this._performStaticInstanceDiscovery()) {\n    callback();\n  } else {\n    this._performDynamicInstanceDiscovery(callback);\n  }\n};\n/**\n * @callback GetOauthEndpointsCallback\n * @private\n * @memberOf Authority\n * @param {Error} error An error if one occurred.\n */\n\n/**\n * Given a tenant discovery endpoint this method will attempt to discover the token endpoint.  If the\n * tenant discovery endpoint is unreachable for some reason then it will fall back to a algorithmic generation of the\n * token endpoint url.\n * @private\n * @param {string}           tenantDiscoveryEndpoint   The url of the tenant discovery endpoint for this authority.\n * @param {Authority.GetOauthEndpointsCallback}  callback  The callback function.\n */\n\n\nAuthority.prototype._getOAuthEndpoints = function (tenantDiscoveryEndpoint, callback) {\n  if (this._tokenEndpoint && this._deviceCodeEndpoint) {\n    callback();\n    return;\n  } else {\n    // fallback to the well known token endpoint path.\n    if (!this._tokenEndpoint) {\n      this._tokenEndpoint = url.format('https://' + this._url.host + '/' + encodeURIComponent(this._tenant)) + AADConstants.TOKEN_ENDPOINT_PATH;\n    }\n\n    if (!this._deviceCodeEndpoint) {\n      this._deviceCodeEndpoint = url.format('https://' + this._url.host + '/' + encodeURIComponent(this._tenant)) + AADConstants.DEVICE_ENDPOINT_PATH;\n    }\n\n    callback();\n    return;\n  }\n};\n/**\n * @callback ValidateCallback\n * @memberOf Authority\n */\n\n/**\n * Perform validation on the authority represented by this object.  In addition to simple validation\n * the oauth token endpoint will be retrieved.\n * @param {Authority.ValidateCallback}   callback   The callback function.\n */\n\n\nAuthority.prototype.validate = function (callContext, callback) {\n  this._log = new Logger('Authority', callContext._logContext);\n  this._callContext = callContext;\n  var self = this;\n\n  if (!this._validated) {\n    this._log.verbose('Performing instance discovery');\n\n    this._log.verbose('Performing instance discovery: ' + url.format(this._url), true);\n\n    this._validateViaInstanceDiscovery(function (err, tenantDiscoveryEndpoint) {\n      if (err) {\n        callback(err);\n      } else {\n        self._validated = true;\n\n        self._getOAuthEndpoints(tenantDiscoveryEndpoint, callback);\n\n        return;\n      }\n    });\n  } else {\n    this._log.verbose('Instance discovery/validation has either already been completed or is turned off');\n\n    this._log.verbose('Instance discovery/validation has either already been completed or is turned off: ' + url.format(this._url), true);\n\n    this._getOAuthEndpoints(null, callback);\n\n    return;\n  }\n};\n\nmodule.exports.Authority = Authority;","map":{"version":3,"sources":["D:/Bakery/Bakery_ReactjsSourceCode/node_modules/adal-node/lib/authority.js"],"names":["request","require","url","_","AADConstants","Logger","util","Authority","authorityUrl","validateAuthority","_log","_url","parse","_validateAuthorityUrl","_validated","_host","_tenant","_parseAuthority","_authorizationEndpoint","_tokenEndpoint","_deviceCodeEndpoint","_isAdfsAuthority","toLowerCase","Object","defineProperty","prototype","get","format","protocol","Error","query","host","pathParts","pathname","split","_performStaticInstanceDiscovery","verbose","hostIndex","indexOf","WELL_KNOWN_AUTHORITY_HOSTS","hostname","found","_createAuthorityUrl","encodeURIComponent","AUTHORIZE_ENDPOINT_PATH","_createInstanceDiscoveryEndpointFromTemplate","authorityHost","discoveryEndpoint","INSTANCE_DISCOVERY_ENDPOINT_TEMPLATE","replace","_performDynamicInstanceDiscovery","callback","self","WORLD_WIDE_AUTHORITY","getOptions","createRequestOptions","createRequestHandler","response","body","discoveryResponse","JSON","createError","e","_validateViaInstanceDiscovery","_getOAuthEndpoints","tenantDiscoveryEndpoint","TOKEN_ENDPOINT_PATH","DEVICE_ENDPOINT_PATH","validate","callContext","_logContext","_callContext","err","module","exports"],"mappings":"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","sourcesContent":["/*\n * @copyright\n * Copyright Â© Microsoft Open Technologies, Inc.\n *\n * All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http: *www.apache.org/licenses/LICENSE-2.0\n *\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\n *\n * See the Apache License, Version 2.0 for the specific language\n * governing permissions and limitations under the License.\n */\n'use strict';\n\nvar request = require('request');\nvar url = require('url');\nvar _ = require('underscore');\n\nvar AADConstants = require('./constants').AADConstants;\nvar Logger = require('./log').Logger;\nvar util = require('./util');\n\n/**\n* Constructs an Authority object with a specific authority URL.\n* @private\n* @constructor\n* @param {string}   authorityUrl        A URL that identifies a token authority.\n* @param {bool}     validateAuthority   Indicates whether the Authority url should be validated as an actual AAD\n*                                       authority.  The default is true.\n*/\nfunction Authority(authorityUrl, validateAuthority) {\n  this._log = null;\n  this._url = url.parse(authorityUrl);\n  this._validateAuthorityUrl();\n\n  this._validated = !validateAuthority;\n  this._host = null;\n  this._tenant = null;\n  this._parseAuthority();\n\n  this._authorizationEndpoint = null;\n  this._tokenEndpoint = null;\n  this._deviceCodeEndpoint = null;\n  this._isAdfsAuthority = (this._tenant.toLowerCase() === \"adfs\");\n}\n\n/**\n * The URL of the authority\n * @instance\n * @type {string}\n * @memberOf Authority\n * @name url\n */\nObject.defineProperty(Authority.prototype, 'url', {\n  get: function() {\n    return url.format(this._url);\n  }\n});\n\n/**\n * The token endpoint that the authority uses as discovered by instance discovery.\n * @instance\n * @type {string}\n * @memberOf Authority\n * @name tokenEndpoint\n */\nObject.defineProperty(Authority.prototype, 'tokenEndpoint', {\n  get: function() {\n    return this._tokenEndpoint;\n  }\n});\n\nObject.defineProperty(Authority.prototype, 'deviceCodeEndpoint', {\n    get: function() {\n        return this._deviceCodeEndpoint;\n    }\n});\n\n/**\n * Checks the authority url to ensure that it meets basic requirements such as being over SSL.  If it does not then\n * this method will throw if any of the checks fail.\n * @private\n * @throws {Error} If the authority url fails to pass any validation checks.\n */\nAuthority.prototype._validateAuthorityUrl = function() {\n  if (this._url.protocol !== 'https:') {\n    throw new Error('The authority url must be an https endpoint.');\n  }\n\n  if (this._url.query) {\n    throw new Error('The authority url must not have a query string.');\n  }\n};\n\n/**\n * Parse the authority to get the tenant name.  The rest of the\n * URL is thrown away in favor of one of the endpoints from the validation doc.\n * @private\n */\nAuthority.prototype._parseAuthority = function() {\n  this._host = this._url.host;\n\n  var pathParts = this._url.pathname.split('/');\n  this._tenant = pathParts[1];\n\n  if (!this._tenant) {\n    throw new Error('Could not determine tenant.');\n  }\n};\n\n/**\n * Performs instance discovery based on a simple match against well known authorities.\n * @private\n * @return {bool}  Returns true if the authority is recognized.\n */\nAuthority.prototype._performStaticInstanceDiscovery = function() {\n  this._log.verbose('Performing static instance discovery');\n\n  var hostIndex = _.indexOf(AADConstants.WELL_KNOWN_AUTHORITY_HOSTS, this._url.hostname);\n  var found = hostIndex > -1;\n\n  if (found) {\n    this._log.verbose('Authority validated via static instance discovery.');\n  }\n\n  return found;\n};\n\nAuthority.prototype._createAuthorityUrl = function() {\n  return 'https://' + this._url.host + '/' + encodeURIComponent(this._tenant) + AADConstants.AUTHORIZE_ENDPOINT_PATH;\n};\n\n/**\n * Creates an instance discovery endpoint url for the specific authority that this object represents.\n * @private\n * @param  {string} authorityHost The host name of a well known authority.\n * @return {URL}    The constructed endpoint url.\n */\nAuthority.prototype._createInstanceDiscoveryEndpointFromTemplate = function(authorityHost) {\n  var discoveryEndpoint = AADConstants.INSTANCE_DISCOVERY_ENDPOINT_TEMPLATE;\n  discoveryEndpoint = discoveryEndpoint.replace('{authorize_host}', authorityHost);\n  discoveryEndpoint = discoveryEndpoint.replace('{authorize_endpoint}', encodeURIComponent(this._createAuthorityUrl()));\n  return url.parse(discoveryEndpoint);\n};\n\n/**\n * Performs instance discovery via a network call to well known authorities.\n * @private\n * @param {Authority.InstanceDiscoveryCallback}   callback    The callback function.  If succesful,\n *                                                            this function calls the callback with the\n *                                                            tenantDiscoveryEndpoint returned by the\n *                                                            server.\n */\nAuthority.prototype._performDynamicInstanceDiscovery = function(callback) {\n  try {\n    var self = this;\n    var discoveryEndpoint = this._createInstanceDiscoveryEndpointFromTemplate(AADConstants.WORLD_WIDE_AUTHORITY);\n\n    var getOptions = util.createRequestOptions(self);\n\n    this._log.verbose('Attempting instance discover');\n    this._log.verbose('Attempting instance discover at: ' + url.format(discoveryEndpoint), true);\n    request.get(discoveryEndpoint, getOptions, util.createRequestHandler('Instance Discovery', this._log, callback,\n      function(response, body) {\n        var discoveryResponse = JSON.parse(body);\n\n        if (discoveryResponse['tenant_discovery_endpoint']) {\n          callback(null, discoveryResponse['tenant_discovery_endpoint']);\n        } else {\n          callback(self._log.createError('Failed to parse instance discovery response'));\n        }\n      })\n    );\n  } catch(e) {\n    callback(e);\n  }\n};\n\n/**\n * @callback InstanceDiscoveryCallback\n * @private\n * @memberOf Authority\n * @param {Error} err If an error occurs during instance discovery then it will be returned here.\n * @param {string} tenantDiscoveryEndpoint If instance discovery is successful then this will contain the\n *                                         tenantDiscoveryEndpoint associated with the authority.\n */\n\n/**\n * Determines whether the authority is recognized as a trusted AAD authority.\n * @private\n * @param {Authority.InstanceDiscoveryCallback}   callback    The callback function.\n */\nAuthority.prototype._validateViaInstanceDiscovery = function(callback) {\n  if (this._performStaticInstanceDiscovery()) {\n    callback();\n  } else {\n    this._performDynamicInstanceDiscovery(callback);\n  }\n};\n\n/**\n * @callback GetOauthEndpointsCallback\n * @private\n * @memberOf Authority\n * @param {Error} error An error if one occurred.\n */\n\n/**\n * Given a tenant discovery endpoint this method will attempt to discover the token endpoint.  If the\n * tenant discovery endpoint is unreachable for some reason then it will fall back to a algorithmic generation of the\n * token endpoint url.\n * @private\n * @param {string}           tenantDiscoveryEndpoint   The url of the tenant discovery endpoint for this authority.\n * @param {Authority.GetOauthEndpointsCallback}  callback  The callback function.\n */\nAuthority.prototype._getOAuthEndpoints = function(tenantDiscoveryEndpoint, callback) {\n  if (this._tokenEndpoint && this._deviceCodeEndpoint) {\n    callback();\n    return;\n  } else {\n    // fallback to the well known token endpoint path.\n    if (!this._tokenEndpoint){\n       this._tokenEndpoint = url.format('https://' + this._url.host + '/' + encodeURIComponent(this._tenant)) + AADConstants.TOKEN_ENDPOINT_PATH;\n    }\n\n    if (!this._deviceCodeEndpoint){\n       this._deviceCodeEndpoint = url.format('https://' + this._url.host + '/' + encodeURIComponent(this._tenant)) + AADConstants.DEVICE_ENDPOINT_PATH;\n    }\n\n    callback();\n    return;\n  }\n};\n\n/**\n * @callback ValidateCallback\n * @memberOf Authority\n */\n\n/**\n * Perform validation on the authority represented by this object.  In addition to simple validation\n * the oauth token endpoint will be retrieved.\n * @param {Authority.ValidateCallback}   callback   The callback function.\n */\nAuthority.prototype.validate = function(callContext, callback) {\n  this._log = new Logger('Authority', callContext._logContext);\n  this._callContext = callContext;\n  var self = this;\n\n  if (!this._validated) {\n    this._log.verbose('Performing instance discovery');\n    this._log.verbose('Performing instance discovery: ' + url.format(this._url), true);\n    this._validateViaInstanceDiscovery(function(err, tenantDiscoveryEndpoint) {\n      if (err)\n      {\n        callback(err);\n      } else {\n        self._validated = true;\n        self._getOAuthEndpoints(tenantDiscoveryEndpoint, callback);\n        return;\n      }\n    });\n  } else {\n    this._log.verbose('Instance discovery/validation has either already been completed or is turned off');\n    this._log.verbose('Instance discovery/validation has either already been completed or is turned off: ' + url.format(this._url), true);\n    this._getOAuthEndpoints(null, callback);\n    return;\n  }\n};\n\nmodule.exports.Authority = Authority;\n"]},"metadata":{},"sourceType":"script"}