{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"../tracking-buffer/writable-tracking-buffer\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\nconst VarBinary = {\n  id: 0xA5,\n  type: 'BIGVARBIN',\n  name: 'VarBinary',\n  maximumLength: 8000,\n  declaration: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'varbinary(' + length + ')';\n    } else {\n      return 'varbinary(max)';\n    }\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n  generateTypeInfo: function (parameter) {\n    const buffer = Buffer.alloc(3);\n    buffer.writeUInt8(this.id, 0);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(this.maximumLength, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n\n    return buffer;\n  },\n\n  *generateParameterData(parameter, options) {\n    let value = parameter.value;\n\n    if (value != null) {\n      if (!Buffer.isBuffer(value)) {\n        value = value.toString();\n      }\n\n      const length = Buffer.byteLength(value, 'ucs2');\n\n      if (parameter.length <= this.maximumLength) {\n        const buffer = Buffer.alloc(2);\n        buffer.writeUInt16LE(length, 0);\n        yield buffer;\n\n        if (Buffer.isBuffer(value)) {\n          yield value;\n        } else {\n          yield Buffer.from(value, 'ucs2');\n        }\n      } else {\n        // writePLPBody\n        yield UNKNOWN_PLP_LEN;\n\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n\n          if (Buffer.isBuffer(value)) {\n            yield value;\n          } else {\n            yield Buffer.from(value, 'ucs2');\n          }\n        }\n\n        yield PLP_TERMINATOR;\n      }\n    } else if (parameter.length <= this.maximumLength) {\n      const buffer = new _writableTrackingBuffer.default(2);\n      buffer.writeUInt16LE(NULL);\n      yield buffer.data;\n    } else {\n      const buffer = new _writableTrackingBuffer.default(8);\n      buffer.writeUInt32LE(0xFFFFFFFF);\n      buffer.writeUInt32LE(0xFFFFFFFF);\n      yield buffer.data;\n    }\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      return new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};\nvar _default = VarBinary;\nexports.default = _default;\nmodule.exports = VarBinary;","map":{"version":3,"sources":["C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/tedious/lib/data-types/varbinary.js"],"names":["Object","defineProperty","exports","value","default","_writableTrackingBuffer","_interopRequireDefault","require","obj","__esModule","NULL","MAX","UNKNOWN_PLP_LEN","Buffer","from","PLP_TERMINATOR","VarBinary","id","type","name","maximumLength","declaration","parameter","length","output","resolveLength","generateTypeInfo","buffer","alloc","writeUInt8","writeUInt16LE","generateParameterData","options","isBuffer","toString","byteLength","writeUInt32LE","data","validate","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"../tracking-buffer/writable-tracking-buffer\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\nconst VarBinary = {\n  id: 0xA5,\n  type: 'BIGVARBIN',\n  name: 'VarBinary',\n  maximumLength: 8000,\n  declaration: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'varbinary(' + length + ')';\n    } else {\n      return 'varbinary(max)';\n    }\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n  generateTypeInfo: function (parameter) {\n    const buffer = Buffer.alloc(3);\n    buffer.writeUInt8(this.id, 0);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(this.maximumLength, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n\n    return buffer;\n  },\n\n  *generateParameterData(parameter, options) {\n    let value = parameter.value;\n\n    if (value != null) {\n      if (!Buffer.isBuffer(value)) {\n        value = value.toString();\n      }\n\n      const length = Buffer.byteLength(value, 'ucs2');\n\n      if (parameter.length <= this.maximumLength) {\n        const buffer = Buffer.alloc(2);\n        buffer.writeUInt16LE(length, 0);\n        yield buffer;\n\n        if (Buffer.isBuffer(value)) {\n          yield value;\n        } else {\n          yield Buffer.from(value, 'ucs2');\n        }\n      } else {\n        // writePLPBody\n        yield UNKNOWN_PLP_LEN;\n\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n\n          if (Buffer.isBuffer(value)) {\n            yield value;\n          } else {\n            yield Buffer.from(value, 'ucs2');\n          }\n        }\n\n        yield PLP_TERMINATOR;\n      }\n    } else if (parameter.length <= this.maximumLength) {\n      const buffer = new _writableTrackingBuffer.default(2);\n      buffer.writeUInt16LE(NULL);\n      yield buffer.data;\n    } else {\n      const buffer = new _writableTrackingBuffer.default(8);\n      buffer.writeUInt32LE(0xFFFFFFFF);\n      buffer.writeUInt32LE(0xFFFFFFFF);\n      yield buffer.data;\n    }\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      return new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};\nvar _default = VarBinary;\nexports.default = _default;\nmodule.exports = VarBinary;"]},"metadata":{},"sourceType":"script"}