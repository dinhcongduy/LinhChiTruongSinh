{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"../tracking-buffer/writable-tracking-buffer\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst Time = {\n  id: 0x29,\n  type: 'TIMEN',\n  name: 'Time',\n  declaration: function (parameter) {\n    return 'time(' + this.resolveScale(parameter) + ')';\n  },\n  resolveScale: function (parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else if (parameter.value === null) {\n      return 0;\n    } else {\n      return 7;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    return Buffer.from([this.id, parameter.scale]);\n  },\n\n  generateParameterData: function* (parameter, options) {\n    if (parameter.value != null) {\n      const buffer = new _writableTrackingBuffer.default(16);\n      const time = parameter.value;\n      let timestamp;\n\n      if (options.useUTC) {\n        timestamp = ((time.getUTCHours() * 60 + time.getUTCMinutes()) * 60 + time.getUTCSeconds()) * 1000 + time.getUTCMilliseconds();\n      } else {\n        timestamp = ((time.getHours() * 60 + time.getMinutes()) * 60 + time.getSeconds()) * 1000 + time.getMilliseconds();\n      }\n\n      timestamp = timestamp * Math.pow(10, parameter.scale - 3);\n      timestamp += (parameter.value.nanosecondDelta != null ? parameter.value.nanosecondDelta : 0) * Math.pow(10, parameter.scale);\n      timestamp = Math.round(timestamp);\n\n      switch (parameter.scale) {\n        case 0:\n        case 1:\n        case 2:\n          buffer.writeUInt8(3);\n          buffer.writeUInt24LE(timestamp);\n          break;\n\n        case 3:\n        case 4:\n          buffer.writeUInt8(4);\n          buffer.writeUInt32LE(timestamp);\n          break;\n\n        case 5:\n        case 6:\n        case 7:\n          buffer.writeUInt8(5);\n          buffer.writeUInt40LE(timestamp);\n      }\n\n      yield buffer.data;\n    } else {\n      yield Buffer.from([0x00]);\n    }\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid time.');\n    }\n\n    return value;\n  }\n};\nvar _default = Time;\nexports.default = _default;\nmodule.exports = Time;","map":{"version":3,"sources":["C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/tedious/lib/data-types/time.js"],"names":["Object","defineProperty","exports","value","default","_writableTrackingBuffer","_interopRequireDefault","require","obj","__esModule","Time","id","type","name","declaration","parameter","resolveScale","scale","generateTypeInfo","Buffer","from","generateParameterData","options","buffer","time","timestamp","useUTC","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getHours","getMinutes","getSeconds","getMilliseconds","Math","pow","nanosecondDelta","round","writeUInt8","writeUInt24LE","writeUInt32LE","writeUInt40LE","data","validate","Date","parse","isNaN","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"../tracking-buffer/writable-tracking-buffer\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst Time = {\n  id: 0x29,\n  type: 'TIMEN',\n  name: 'Time',\n  declaration: function (parameter) {\n    return 'time(' + this.resolveScale(parameter) + ')';\n  },\n  resolveScale: function (parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else if (parameter.value === null) {\n      return 0;\n    } else {\n      return 7;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    return Buffer.from([this.id, parameter.scale]);\n  },\n\n  generateParameterData: function* (parameter, options) {\n    if (parameter.value != null) {\n      const buffer = new _writableTrackingBuffer.default(16);\n      const time = parameter.value;\n      let timestamp;\n\n      if (options.useUTC) {\n        timestamp = ((time.getUTCHours() * 60 + time.getUTCMinutes()) * 60 + time.getUTCSeconds()) * 1000 + time.getUTCMilliseconds();\n      } else {\n        timestamp = ((time.getHours() * 60 + time.getMinutes()) * 60 + time.getSeconds()) * 1000 + time.getMilliseconds();\n      }\n\n      timestamp = timestamp * Math.pow(10, parameter.scale - 3);\n      timestamp += (parameter.value.nanosecondDelta != null ? parameter.value.nanosecondDelta : 0) * Math.pow(10, parameter.scale);\n      timestamp = Math.round(timestamp);\n\n      switch (parameter.scale) {\n        case 0:\n        case 1:\n        case 2:\n          buffer.writeUInt8(3);\n          buffer.writeUInt24LE(timestamp);\n          break;\n\n        case 3:\n        case 4:\n          buffer.writeUInt8(4);\n          buffer.writeUInt32LE(timestamp);\n          break;\n\n        case 5:\n        case 6:\n        case 7:\n          buffer.writeUInt8(5);\n          buffer.writeUInt40LE(timestamp);\n      }\n\n      yield buffer.data;\n    } else {\n      yield Buffer.from([0x00]);\n    }\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid time.');\n    }\n\n    return value;\n  }\n};\nvar _default = Time;\nexports.default = _default;\nmodule.exports = Time;"]},"metadata":{},"sourceType":"script"}