{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _constants = _interopRequireDefault(require(\"constants\"));\n\nvar _tls = require(\"tls\");\n\nvar _readableStream = require(\"readable-stream\");\n\nvar _msRestNodeauth = require(\"@azure/ms-rest-nodeauth\");\n\nvar _bulkLoad = _interopRequireDefault(require(\"./bulk-load\"));\n\nvar _debug = _interopRequireDefault(require(\"./debug\"));\n\nvar _events = require(\"events\");\n\nvar _instanceLookup = require(\"./instance-lookup\");\n\nvar _transientErrorLookup = require(\"./transient-error-lookup\");\n\nvar _packet = require(\"./packet\");\n\nvar _preloginPayload = _interopRequireDefault(require(\"./prelogin-payload\"));\n\nvar _login7Payload = _interopRequireDefault(require(\"./login7-payload\"));\n\nvar _ntlmPayload = _interopRequireDefault(require(\"./ntlm-payload\"));\n\nvar _request = _interopRequireDefault(require(\"./request\"));\n\nvar _rpcrequestPayload = _interopRequireDefault(require(\"./rpcrequest-payload\"));\n\nvar _sqlbatchPayload = _interopRequireDefault(require(\"./sqlbatch-payload\"));\n\nvar _messageIo = _interopRequireDefault(require(\"./message-io\"));\n\nvar _tokenStreamParser = require(\"./token/token-stream-parser\");\n\nvar _transaction = require(\"./transaction\");\n\nvar _errors = require(\"./errors\");\n\nvar _connector = require(\"./connector\");\n\nvar _library = require(\"./library\");\n\nvar _tdsVersions = require(\"./tds-versions\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _ntlm = require(\"./ntlm\");\n\nvar _depd = _interopRequireDefault(require(\"depd\"));\n\nvar _adalNode = require(\"adal-node\");\n\nvar _nodeAbortController = _interopRequireDefault(require(\"node-abort-controller\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nvar deprecate = (0, _depd.default)('tedious');\n/**\n * @private\n */\n\nvar KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\n/**\n * @private\n */\n\nvar DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\n\nvar DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\n\nvar DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\n/**\n * @private\n */\n\nvar DEFAULT_CONNECT_RETRY_INTERVAL = 500;\n/**\n * @private\n */\n\nvar DEFAULT_PACKET_SIZE = 4 * 1024;\n/**\n * @private\n */\n\nvar DEFAULT_TEXTSIZE = '2147483647';\n/**\n * @private\n */\n\nvar DEFAULT_DATEFIRST = 7;\n/**\n * @private\n */\n\nvar DEFAULT_PORT = 1433;\n/**\n * @private\n */\n\nvar DEFAULT_TDS_VERSION = '7_4';\n/**\n * @private\n */\n\nvar DEFAULT_LANGUAGE = 'us_english';\n/**\n * @private\n */\n\nvar DEFAULT_DATEFORMAT = 'mdy';\n/**\n * @private\n */\n\nvar CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n/**\n * A [[Connection]] instance represents a single connection to a database server.\n *\n * ```js\n * var Connection = require('tedious').Connection;\n * var config = {\n *  \"authentication\": {\n *    ...,\n *    \"options\": {...}\n *  },\n *  \"options\": {...}\n * };\n * var connection = new Connection(config);\n * ```\n *\n * Only one request at a time may be executed on a connection. Once a [[Request]]\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\n * [[Request]]'s completion callback is called.\n */\n\nvar Connection = /*#__PURE__*/function (_events$EventEmitter) {\n  _inherits(Connection, _events$EventEmitter);\n\n  var _super = _createSuper(Connection);\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * Note: be aware of the different options field:\n   * 1. config.authentication.options\n   * 2. config.options\n   *\n   * ```js\n   * const { Connection } = require('tedious');\n   *\n   * const config = {\n   *  \"authentication\": {\n   *    ...,\n   *    \"options\": {...}\n   *  },\n   *  \"options\": {...}\n   * };\n   *\n   * const connection = new Connection(config);\n   * ```\n   *\n   * @param config\n   */\n  function Connection(config) {\n    var _this;\n\n    _classCallCheck(this, Connection);\n\n    _this = _super.call(this);\n    _this.fedAuthRequired = void 0;\n    _this.fedAuthInfoToken = void 0;\n    _this.config = void 0;\n    _this.secureContext = void 0;\n    _this.inTransaction = void 0;\n    _this.transactionDescriptors = void 0;\n    _this.transactionDepth = void 0;\n    _this.isSqlBatch = void 0;\n    _this.curTransientRetryCount = void 0;\n    _this.transientErrorLookup = void 0;\n    _this.closed = void 0;\n    _this.loggedIn = void 0;\n    _this.loginError = void 0;\n    _this.debug = void 0;\n    _this.tokenStreamParser = void 0;\n    _this.ntlmpacket = void 0;\n    _this.ntlmpacketBuffer = void 0;\n    _this.routingData = void 0;\n    _this.messageIo = void 0;\n    _this.state = void 0;\n    _this.resetConnectionOnNextRequest = void 0;\n    _this.attentionReceived = void 0;\n    _this.request = void 0;\n    _this.procReturnStatusValue = void 0;\n    _this.socket = void 0;\n    _this.messageBuffer = void 0;\n    _this.connectTimer = void 0;\n    _this.cancelTimer = void 0;\n    _this.requestTimer = void 0;\n    _this.retryTimer = void 0;\n\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n\n    _this.fedAuthRequired = false;\n    _this.fedAuthInfoToken = undefined;\n    var authentication;\n\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n\n      var type = config.authentication.type;\n      var options = config.authentication.options === undefined ? {} : config.authentication.options;\n\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId,\n            msiEndpoint: options.msiEndpoint\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\n        }\n\n        if (options.msiSecret !== undefined && typeof options.msiSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiSecret\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId,\n            msiEndpoint: options.msiEndpoint,\n            msiSecret: options.msiSecret\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n\n    _this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connectionIsolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: true,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: true,\n        fallbackToDefaultDb: false,\n        instanceName: undefined,\n        isolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustServerCertificate: false,\n        useColumnNames: false,\n        useUTC: true,\n        validateBulkLoadParameters: true,\n        workstationId: undefined,\n        lowerCaseGuids: false\n      }\n    };\n\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n\n        _this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n\n        _this.config.options.appName = config.options.appName;\n      }\n\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n\n        _this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n\n        _this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n\n        _this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        _this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.connectionIsolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\n        _this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        _this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n\n        _this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n\n        _this.config.options.database = config.options.database;\n      }\n\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n\n        _this.config.options.datefirst = config.options.datefirst;\n      }\n\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n\n        _this.config.options.dateFormat = config.options.dateFormat;\n      }\n\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n\n          _this.config.options.debug.data = config.options.debug.data;\n        }\n\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n\n          _this.config.options.debug.packet = config.options.debug.packet;\n        }\n\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n\n          _this.config.options.debug.payload = config.options.debug.payload;\n        }\n\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n\n          _this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\n        }\n\n        _this.config.options.encrypt = config.options.encrypt;\n      }\n\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n\n        _this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n\n        _this.config.options.instanceName = config.options.instanceName;\n        _this.config.options.port = undefined;\n      }\n\n      if (config.options.isolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.isolationLevel, 'config.options.isolationLevel');\n        _this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n\n        _this.config.options.language = config.options.language;\n      }\n\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n\n        _this.config.options.localAddress = config.options.localAddress;\n      }\n\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n\n        _this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n\n        _this.config.options.packetSize = config.options.packetSize;\n      }\n\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n\n        _this.config.options.port = config.options.port;\n        _this.config.options.instanceName = undefined;\n      }\n\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n\n        _this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n\n        _this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n\n        _this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n\n        _this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n\n        _this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n\n        _this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n\n        _this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n\n        _this.config.options.textsize = config.options.textsize;\n      }\n\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n\n        _this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n\n        _this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n\n        _this.config.options.useUTC = config.options.useUTC;\n      }\n\n      if (config.options.validateBulkLoadParameters !== undefined) {\n        if (typeof config.options.validateBulkLoadParameters !== 'boolean') {\n          throw new TypeError('The \"config.options.validateBulkLoadParameters\" property must be of type boolean.');\n        }\n\n        _this.config.options.validateBulkLoadParameters = config.options.validateBulkLoadParameters;\n      }\n\n      if (config.options.workstationId !== undefined) {\n        if (typeof config.options.workstationId !== 'string') {\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\n        }\n\n        _this.config.options.workstationId = config.options.workstationId;\n      }\n\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n\n        _this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n\n    var credentialsDetails = _this.config.options.cryptoCredentialsDetails;\n\n    if (credentialsDetails.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      credentialsDetails = Object.create(credentialsDetails, {\n        secureOptions: {\n          value: _constants.default.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n\n    _this.secureContext = (0, _tls.createSecureContext)(credentialsDetails);\n    _this.debug = _this.createDebug();\n    _this.tokenStreamParser = _this.createTokenStreamParser();\n    _this.inTransaction = false;\n    _this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])]; // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n\n    _this.transactionDepth = 0;\n    _this.isSqlBatch = false;\n    _this.closed = false;\n    _this.loggedIn = false;\n    _this.messageBuffer = Buffer.alloc(0);\n    _this.curTransientRetryCount = 0;\n    _this.transientErrorLookup = new _transientErrorLookup.TransientErrorLookup();\n    _this.state = _this.STATE.INITIALIZED;\n    return _this;\n  }\n\n  _createClass(Connection, [{\n    key: \"connect\",\n    value: function connect(connectListener) {\n      var _this2 = this;\n\n      if (this.state !== this.STATE.INITIALIZED) {\n        throw new _errors.ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\n      }\n\n      if (connectListener) {\n        var onConnect = function onConnect(err) {\n          _this2.removeListener('error', onError);\n\n          connectListener(err);\n        };\n\n        var onError = function onError(err) {\n          _this2.removeListener('connect', onConnect);\n\n          connectListener(err);\n        };\n\n        this.once('connect', onConnect);\n        this.once('error', onError);\n      }\n\n      this.transitionTo(this.STATE.CONNECTING);\n    }\n    /**\n     * The server has reported that the charset has changed.\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, listener) {\n      return _get(_getPrototypeOf(Connection.prototype), \"on\", this).call(this, event, listener);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var _get2;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_get2 = _get(_getPrototypeOf(Connection.prototype), \"emit\", this)).call.apply(_get2, [this, event].concat(args));\n    }\n    /**\n     * Closes the connection to the database.\n     *\n     * The [[Event_end]] will be emitted once the connection has been closed.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.transitionTo(this.STATE.FINAL);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"initialiseConnection\",\n    value: function initialiseConnection() {\n      var _this3 = this;\n\n      var signal = this.createConnectTimer();\n\n      if (this.config.options.port) {\n        return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal);\n      } else {\n        return new _instanceLookup.InstanceLookup().instanceLookup({\n          server: this.config.server,\n          instanceName: this.config.options.instanceName,\n          timeout: this.config.options.connectTimeout,\n          signal: signal\n        }, function (err, port) {\n          if (err) {\n            if (err.name === 'AbortError') {\n              return;\n            }\n\n            _this3.emit('connect', (0, _errors.ConnectionError)(err.message, 'EINSTLOOKUP'));\n          } else {\n            _this3.connectOnPort(port, _this3.config.options.multiSubnetFailover, signal);\n          }\n        });\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"cleanupConnection\",\n    value: function cleanupConnection(cleanupType) {\n      var _this4 = this;\n\n      if (!this.closed) {\n        this.clearConnectTimer();\n        this.clearRequestTimer();\n        this.clearRetryTimer();\n        this.closeConnection();\n\n        if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n          this.emit('rerouting');\n        } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n          process.nextTick(function () {\n            _this4.emit('end');\n          });\n        }\n\n        var request = this.request;\n\n        if (request) {\n          var err = (0, _errors.RequestError)('Connection closed before request completed.', 'ECLOSE');\n          request.callback(err);\n          this.request = undefined;\n        }\n\n        this.closed = true;\n        this.loggedIn = false;\n        this.loginError = undefined;\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"createDebug\",\n    value: function createDebug() {\n      var _this5 = this;\n\n      var debug = new _debug.default(this.config.options.debug);\n      debug.on('debug', function (message) {\n        _this5.emit('debug', message);\n      });\n      return debug;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"createTokenStreamParser\",\n    value: function createTokenStreamParser() {\n      var _this6 = this;\n\n      var tokenStreamParser = new _tokenStreamParser.Parser(this.debug, this.config.options);\n      tokenStreamParser.on('infoMessage', function (token) {\n        _this6.emit('infoMessage', token);\n      });\n      tokenStreamParser.on('sspichallenge', function (token) {\n        if (token.ntlmpacket) {\n          _this6.ntlmpacket = token.ntlmpacket;\n          _this6.ntlmpacketBuffer = token.ntlmpacketBuffer;\n        }\n\n        _this6.emit('sspichallenge', token);\n      });\n      tokenStreamParser.on('errorMessage', function (token) {\n        _this6.emit('errorMessage', token);\n\n        if (_this6.loggedIn) {\n          var request = _this6.request;\n\n          if (request) {\n            if (!request.canceled) {\n              var error = new _errors.RequestError(token.message, 'EREQUEST');\n              error.number = token.number;\n              error.state = token.state;\n              error.class = token.class;\n              error.serverName = token.serverName;\n              error.procName = token.procName;\n              error.lineNumber = token.lineNumber;\n              request.error = error;\n            }\n          }\n        } else {\n          var _error = (0, _errors.ConnectionError)(token.message, 'ELOGIN');\n\n          var isLoginErrorTransient = _this6.transientErrorLookup.isTransientError(token.number);\n\n          if (isLoginErrorTransient && _this6.curTransientRetryCount !== _this6.config.options.maxRetriesOnTransientErrors) {\n            _error.isTransient = true;\n          }\n\n          _this6.loginError = _error;\n        }\n      });\n      tokenStreamParser.on('databaseChange', function (token) {\n        _this6.emit('databaseChange', token.newValue);\n      });\n      tokenStreamParser.on('languageChange', function (token) {\n        _this6.emit('languageChange', token.newValue);\n      });\n      tokenStreamParser.on('charsetChange', function (token) {\n        _this6.emit('charsetChange', token.newValue);\n      });\n      tokenStreamParser.on('fedAuthInfo', function (token) {\n        _this6.dispatchEvent('fedAuthInfo', token);\n      });\n      tokenStreamParser.on('featureExtAck', function (token) {\n        _this6.dispatchEvent('featureExtAck', token);\n      });\n      tokenStreamParser.on('loginack', function (token) {\n        if (!token.tdsVersion) {\n          // unsupported TDS version\n          _this6.loginError = (0, _errors.ConnectionError)('Server responded with unknown TDS version.', 'ETDS');\n          _this6.loggedIn = false;\n          return;\n        }\n\n        if (!token.interface) {\n          // unsupported interface\n          _this6.loginError = (0, _errors.ConnectionError)('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n          _this6.loggedIn = false;\n          return;\n        } // use negotiated version\n\n\n        _this6.config.options.tdsVersion = token.tdsVersion;\n        _this6.loggedIn = true;\n      });\n      tokenStreamParser.on('routingChange', function (token) {\n        _this6.routingData = token.newValue;\n\n        _this6.dispatchEvent('routingChange');\n      });\n      tokenStreamParser.on('packetSizeChange', function (token) {\n        _this6.messageIo.packetSize(token.newValue);\n      }); // A new top-level transaction was started. This is not fired\n      // for nested transactions.\n\n      tokenStreamParser.on('beginTransaction', function (token) {\n        _this6.transactionDescriptors.push(token.newValue);\n\n        _this6.inTransaction = true;\n      }); // A top-level transaction was committed. This is not fired\n      // for nested transactions.\n\n      tokenStreamParser.on('commitTransaction', function () {\n        _this6.transactionDescriptors.length = 1;\n        _this6.inTransaction = false;\n      }); // A top-level transaction was rolled back. This is not fired\n      // for nested transactions. This is also fired if a batch\n      // aborting error happened that caused a rollback.\n\n      tokenStreamParser.on('rollbackTransaction', function () {\n        _this6.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n        _this6.inTransaction = false;\n\n        _this6.emit('rollbackTransaction');\n      });\n      tokenStreamParser.on('columnMetadata', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            if (_this6.config.options.useColumnNames) {\n              var columns = {};\n\n              for (var j = 0, len = token.columns.length; j < len; j++) {\n                var col = token.columns[j];\n\n                if (columns[col.colName] == null) {\n                  columns[col.colName] = col;\n                }\n              }\n\n              request.emit('columnMetadata', columns);\n            } else {\n              request.emit('columnMetadata', token.columns);\n            }\n          }\n        } else {\n          _this6.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n\n          _this6.close();\n        }\n      });\n      tokenStreamParser.on('order', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            request.emit('order', token.orderColumns);\n          }\n        } else {\n          _this6.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n\n          _this6.close();\n        }\n      });\n      tokenStreamParser.on('row', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            if (_this6.config.options.rowCollectionOnRequestCompletion) {\n              request.rows.push(token.columns);\n            }\n\n            if (_this6.config.options.rowCollectionOnDone) {\n              request.rst.push(token.columns);\n            }\n\n            if (!(_this6.state === _this6.STATE.SENT_ATTENTION && request.paused)) {\n              request.emit('row', token.columns);\n            }\n          }\n        } else {\n          _this6.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n\n          _this6.close();\n        }\n      });\n      tokenStreamParser.on('returnStatus', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            // Keep value for passing in 'doneProc' event.\n            _this6.procReturnStatusValue = token.value;\n          }\n        }\n      });\n      tokenStreamParser.on('returnValue', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            request.emit('returnValue', token.paramName, token.value, token.metadata);\n          }\n        }\n      });\n      tokenStreamParser.on('doneProc', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            request.emit('doneProc', token.rowCount, token.more, _this6.procReturnStatusValue, request.rst);\n            _this6.procReturnStatusValue = undefined;\n\n            if (token.rowCount !== undefined) {\n              request.rowCount += token.rowCount;\n            }\n\n            if (_this6.config.options.rowCollectionOnDone) {\n              request.rst = [];\n            }\n          }\n        }\n      });\n      tokenStreamParser.on('doneInProc', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            request.emit('doneInProc', token.rowCount, token.more, request.rst);\n\n            if (token.rowCount !== undefined) {\n              request.rowCount += token.rowCount;\n            }\n\n            if (_this6.config.options.rowCollectionOnDone) {\n              request.rst = [];\n            }\n          }\n        }\n      });\n      tokenStreamParser.on('done', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (token.attention) {\n            _this6.dispatchEvent('attention');\n          }\n\n          if (request.canceled) {\n            // If we received a `DONE` token with `DONE_ERROR`, but no previous `ERROR` token,\n            // We assume this is the indication that an in-flight request was canceled.\n            if (token.sqlError && !request.error) {\n              _this6.clearCancelTimer();\n\n              request.error = (0, _errors.RequestError)('Canceled.', 'ECANCEL');\n            }\n          } else {\n            if (token.sqlError && !request.error) {\n              // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n              request.error = (0, _errors.RequestError)('An unknown error has occurred.', 'UNKNOWN');\n            }\n\n            request.emit('done', token.rowCount, token.more, request.rst);\n\n            if (token.rowCount !== undefined) {\n              request.rowCount += token.rowCount;\n            }\n\n            if (_this6.config.options.rowCollectionOnDone) {\n              request.rst = [];\n            }\n          }\n        }\n      });\n      tokenStreamParser.on('endOfMessage', function () {\n        // EOM pseudo token received\n        if (_this6.state === _this6.STATE.SENT_CLIENT_REQUEST) {\n          _this6.dispatchEvent('endOfMessageMarkerReceived');\n        }\n      });\n      tokenStreamParser.on('resetConnection', function () {\n        _this6.emit('resetConnection');\n      });\n      tokenStreamParser.on('drain', function () {\n        // Bridge the release of backpressure from the token stream parser\n        // transform to the packet stream transform.\n        _this6.messageIo.resume();\n      });\n      return tokenStreamParser;\n    }\n  }, {\n    key: \"connectOnPort\",\n    value: function connectOnPort(port, multiSubnetFailover, signal) {\n      var _this7 = this;\n\n      var connectOpts = {\n        host: this.routingData ? this.routingData.server : this.config.server,\n        port: this.routingData ? this.routingData.port : port,\n        localAddress: this.config.options.localAddress\n      };\n      new _connector.Connector(connectOpts, signal, multiSubnetFailover).execute(function (err, socket) {\n        if (err) {\n          if (err.name === 'AbortError') {\n            return;\n          }\n\n          return _this7.socketError(err);\n        }\n\n        socket = socket;\n        socket.on('error', function (error) {\n          _this7.socketError(error);\n        });\n        socket.on('close', function () {\n          _this7.socketClose();\n        });\n        socket.on('end', function () {\n          _this7.socketEnd();\n        });\n        socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n        _this7.messageIo = new _messageIo.default(socket, _this7.config.options.packetSize, _this7.debug);\n\n        _this7.messageIo.on('data', function (data) {\n          _this7.dispatchEvent('data', data);\n        });\n\n        _this7.messageIo.on('message', function () {\n          _this7.dispatchEvent('message');\n        });\n\n        _this7.messageIo.on('secure', function (cleartext) {\n          _this7.emit('secure', cleartext);\n        });\n\n        _this7.messageIo.on('error', function (error) {\n          _this7.socketError(error);\n        });\n\n        _this7.socket = socket;\n\n        _this7.socketConnect();\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"closeConnection\",\n    value: function closeConnection() {\n      if (this.socket) {\n        this.socket.destroy();\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"createConnectTimer\",\n    value: function createConnectTimer() {\n      var _this8 = this;\n\n      var controller = new _nodeAbortController.default();\n      this.connectTimer = setTimeout(function () {\n        controller.abort();\n\n        _this8.connectTimeout();\n      }, this.config.options.connectTimeout);\n      return controller.signal;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"createCancelTimer\",\n    value: function createCancelTimer() {\n      var _this9 = this;\n\n      this.clearCancelTimer();\n      var timeout = this.config.options.cancelTimeout;\n\n      if (timeout > 0) {\n        this.cancelTimer = setTimeout(function () {\n          _this9.cancelTimeout();\n        }, timeout);\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"createRequestTimer\",\n    value: function createRequestTimer() {\n      var _this10 = this;\n\n      this.clearRequestTimer(); // release old timer, just to be safe\n\n      var request = this.request;\n      var timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n\n      if (timeout) {\n        this.requestTimer = setTimeout(function () {\n          _this10.requestTimeout();\n        }, timeout);\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"createRetryTimer\",\n    value: function createRetryTimer() {\n      var _this11 = this;\n\n      this.clearRetryTimer();\n      this.retryTimer = setTimeout(function () {\n        _this11.retryTimeout();\n      }, this.config.options.connectionRetryInterval);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"connectTimeout\",\n    value: function connectTimeout() {\n      var message = \"Failed to connect to \".concat(this.config.server).concat(this.config.options.port ? \":\".concat(this.config.options.port) : \"\\\\\".concat(this.config.options.instanceName), \" in \").concat(this.config.options.connectTimeout, \"ms\");\n      this.debug.log(message);\n      this.emit('connect', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\n      this.connectTimer = undefined;\n      this.dispatchEvent('connectTimeout');\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"cancelTimeout\",\n    value: function cancelTimeout() {\n      var message = \"Failed to cancel request in \".concat(this.config.options.cancelTimeout, \"ms\");\n      this.debug.log(message);\n      this.dispatchEvent('socketError', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"requestTimeout\",\n    value: function requestTimeout() {\n      this.requestTimer = undefined;\n      var request = this.request;\n      request.cancel();\n      var timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n      var message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n      request.error = (0, _errors.RequestError)(message, 'ETIMEOUT');\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"retryTimeout\",\n    value: function retryTimeout() {\n      this.retryTimer = undefined;\n      this.emit('retry');\n      this.transitionTo(this.STATE.CONNECTING);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"clearConnectTimer\",\n    value: function clearConnectTimer() {\n      if (this.connectTimer) {\n        clearTimeout(this.connectTimer);\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"clearCancelTimer\",\n    value: function clearCancelTimer() {\n      if (this.cancelTimer) {\n        clearTimeout(this.cancelTimer);\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"clearRequestTimer\",\n    value: function clearRequestTimer() {\n      if (this.requestTimer) {\n        clearTimeout(this.requestTimer);\n        this.requestTimer = undefined;\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"clearRetryTimer\",\n    value: function clearRetryTimer() {\n      if (this.retryTimer) {\n        clearTimeout(this.retryTimer);\n        this.retryTimer = undefined;\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"transitionTo\",\n    value: function transitionTo(newState) {\n      if (this.state === newState) {\n        this.debug.log('State is already ' + newState.name);\n        return;\n      }\n\n      if (this.state && this.state.exit) {\n        this.state.exit.call(this, newState);\n      }\n\n      this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n      this.state = newState;\n\n      if (this.state.enter) {\n        this.state.enter.apply(this);\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"getEventHandler\",\n    value: function getEventHandler(eventName) {\n      var handler = this.state.events[eventName];\n\n      if (!handler) {\n        throw new Error(\"No event '\".concat(eventName, \"' in state '\").concat(this.state.name, \"'\"));\n      }\n\n      return handler;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(eventName) {\n      var handler = this.state.events[eventName];\n\n      if (handler) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        handler.apply(this, args);\n      } else {\n        this.emit('error', new Error(\"No event '\".concat(eventName, \"' in state '\").concat(this.state.name, \"'\")));\n        this.close();\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"socketError\",\n    value: function socketError(error) {\n      if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n        var message = \"Failed to connect to \".concat(this.config.server, \":\").concat(this.config.options.port, \" - \").concat(error.message);\n        this.debug.log(message);\n        this.emit('connect', (0, _errors.ConnectionError)(message, 'ESOCKET'));\n      } else {\n        var _message2 = \"Connection lost - \".concat(error.message);\n\n        this.debug.log(_message2);\n        this.emit('error', (0, _errors.ConnectionError)(_message2, 'ESOCKET'));\n      }\n\n      this.dispatchEvent('socketError', error);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"socketConnect\",\n    value: function socketConnect() {\n      this.closed = false;\n      this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n      this.dispatchEvent('socketConnect');\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"socketEnd\",\n    value: function socketEnd() {\n      this.debug.log('socket ended');\n\n      if (this.state !== this.STATE.FINAL) {\n        var error = new Error('socket hang up');\n        error.code = 'ECONNRESET';\n        this.socketError(error);\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"socketClose\",\n    value: function socketClose() {\n      this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n\n      if (this.state === this.STATE.REROUTING) {\n        this.debug.log('Rerouting to ' + this.routingData.server + ':' + this.routingData.port);\n        this.dispatchEvent('reconnect');\n      } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n        var server = this.routingData ? this.routingData.server : this.config.server;\n        var port = this.routingData ? this.routingData.port : this.config.options.port;\n        this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n        this.dispatchEvent('retry');\n      } else {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"sendPreLogin\",\n    value: function sendPreLogin() {\n      var payload = new _preloginPayload.default({\n        encrypt: this.config.options.encrypt\n      });\n      this.messageIo.sendMessage(_packet.TYPE.PRELOGIN, payload.data);\n      this.debug.payload(function () {\n        return payload.toString('  ');\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"emptyMessageBuffer\",\n    value: function emptyMessageBuffer() {\n      this.messageBuffer = Buffer.alloc(0);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"addToMessageBuffer\",\n    value: function addToMessageBuffer(data) {\n      this.messageBuffer = Buffer.concat([this.messageBuffer, data]);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"sendLogin7Packet\",\n    value: function sendLogin7Packet() {\n      var payload = new _login7Payload.default({\n        tdsVersion: _tdsVersions.versions[this.config.options.tdsVersion],\n        packetSize: this.config.options.packetSize,\n        clientProgVer: 0,\n        clientPid: process.pid,\n        connectionId: 0,\n        clientTimeZone: new Date().getTimezoneOffset(),\n        clientLcid: 0x00000409\n      });\n      var authentication = this.config.authentication;\n\n      switch (authentication.type) {\n        case 'azure-active-directory-password':\n          payload.fedAuth = {\n            type: 'ADAL',\n            echo: this.fedAuthRequired,\n            workflow: 'default'\n          };\n          break;\n\n        case 'azure-active-directory-access-token':\n          payload.fedAuth = {\n            type: 'SECURITYTOKEN',\n            echo: this.fedAuthRequired,\n            fedAuthToken: authentication.options.token\n          };\n          break;\n\n        case 'azure-active-directory-msi-vm':\n        case 'azure-active-directory-msi-app-service':\n        case 'azure-active-directory-service-principal-secret':\n          payload.fedAuth = {\n            type: 'ADAL',\n            echo: this.fedAuthRequired,\n            workflow: 'integrated'\n          };\n          break;\n\n        case 'ntlm':\n          payload.sspi = (0, _ntlm.createNTLMRequest)({\n            domain: authentication.options.domain\n          });\n          break;\n\n        default:\n          payload.userName = authentication.options.userName;\n          payload.password = authentication.options.password;\n      }\n\n      payload.hostname = this.config.options.workstationId || _os.default.hostname();\n      payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n      payload.appName = this.config.options.appName || 'Tedious';\n      payload.libraryName = _library.name;\n      payload.language = this.config.options.language;\n      payload.database = this.config.options.database;\n      payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n      payload.readOnlyIntent = this.config.options.readOnlyIntent;\n      payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n      this.routingData = undefined;\n      this.messageIo.sendMessage(_packet.TYPE.LOGIN7, payload.toBuffer());\n      this.debug.payload(function () {\n        return payload.toString('  ');\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"sendFedAuthTokenMessage\",\n    value: function sendFedAuthTokenMessage(token) {\n      var accessTokenLen = Buffer.byteLength(token, 'ucs2');\n      var data = Buffer.alloc(8 + accessTokenLen);\n      var offset = 0;\n      offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n      offset = data.writeUInt32LE(accessTokenLen, offset);\n      data.write(token, offset, 'ucs2');\n      this.messageIo.sendMessage(_packet.TYPE.FEDAUTH_TOKEN, data); // sent the fedAuth token message, the rest is similar to standard login 7\n\n      this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n    }\n    /**\n     * Returns false to apply backpressure.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"sendDataToTokenStreamParser\",\n    value: function sendDataToTokenStreamParser(data) {\n      return this.tokenStreamParser.addBuffer(data);\n    }\n    /**\n     * This is an internal method that is called from [[Request.pause]].\n     * It has to check whether the passed Request object represents the currently\n     * active request, because the application might have called [[Request.pause]]\n     * on an old inactive Request object.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"pauseRequest\",\n    value: function pauseRequest(request) {\n      if (this.isRequestActive(request)) {\n        this.tokenStreamParser.pause();\n      }\n    }\n    /**\n     * This is an internal method that is called from [[Request.resume]].\n     *\n     * @private\n     */\n\n  }, {\n    key: \"resumeRequest\",\n    value: function resumeRequest(request) {\n      if (this.isRequestActive(request)) {\n        this.tokenStreamParser.resume();\n      }\n    }\n    /**\n     * Returns true if the passed request is the currently active request of the connection.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"isRequestActive\",\n    value: function isRequestActive(request) {\n      return request === this.request && this.state === this.STATE.SENT_CLIENT_REQUEST;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"sendInitialSql\",\n    value: function sendInitialSql() {\n      var payload = new _sqlbatchPayload.default(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n      var message = new _message.default({\n        type: _packet.TYPE.SQL_BATCH\n      });\n      this.messageIo.outgoingMessageStream.write(message);\n\n      _readableStream.Readable.from(payload).pipe(message);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"getInitialSql\",\n    value: function getInitialSql() {\n      var options = [];\n\n      if (this.config.options.enableAnsiNull === true) {\n        options.push('set ansi_nulls on');\n      } else if (this.config.options.enableAnsiNull === false) {\n        options.push('set ansi_nulls off');\n      }\n\n      if (this.config.options.enableAnsiNullDefault === true) {\n        options.push('set ansi_null_dflt_on on');\n      } else if (this.config.options.enableAnsiNullDefault === false) {\n        options.push('set ansi_null_dflt_on off');\n      }\n\n      if (this.config.options.enableAnsiPadding === true) {\n        options.push('set ansi_padding on');\n      } else if (this.config.options.enableAnsiPadding === false) {\n        options.push('set ansi_padding off');\n      }\n\n      if (this.config.options.enableAnsiWarnings === true) {\n        options.push('set ansi_warnings on');\n      } else if (this.config.options.enableAnsiWarnings === false) {\n        options.push('set ansi_warnings off');\n      }\n\n      if (this.config.options.enableArithAbort === true) {\n        options.push('set arithabort on');\n      } else if (this.config.options.enableArithAbort === false) {\n        options.push('set arithabort off');\n      }\n\n      if (this.config.options.enableConcatNullYieldsNull === true) {\n        options.push('set concat_null_yields_null on');\n      } else if (this.config.options.enableConcatNullYieldsNull === false) {\n        options.push('set concat_null_yields_null off');\n      }\n\n      if (this.config.options.enableCursorCloseOnCommit === true) {\n        options.push('set cursor_close_on_commit on');\n      } else if (this.config.options.enableCursorCloseOnCommit === false) {\n        options.push('set cursor_close_on_commit off');\n      }\n\n      if (this.config.options.datefirst !== null) {\n        options.push(\"set datefirst \".concat(this.config.options.datefirst));\n      }\n\n      if (this.config.options.dateFormat !== null) {\n        options.push(\"set dateformat \".concat(this.config.options.dateFormat));\n      }\n\n      if (this.config.options.enableImplicitTransactions === true) {\n        options.push('set implicit_transactions on');\n      } else if (this.config.options.enableImplicitTransactions === false) {\n        options.push('set implicit_transactions off');\n      }\n\n      if (this.config.options.language !== null) {\n        options.push(\"set language \".concat(this.config.options.language));\n      }\n\n      if (this.config.options.enableNumericRoundabort === true) {\n        options.push('set numeric_roundabort on');\n      } else if (this.config.options.enableNumericRoundabort === false) {\n        options.push('set numeric_roundabort off');\n      }\n\n      if (this.config.options.enableQuotedIdentifier === true) {\n        options.push('set quoted_identifier on');\n      } else if (this.config.options.enableQuotedIdentifier === false) {\n        options.push('set quoted_identifier off');\n      }\n\n      if (this.config.options.textsize !== null) {\n        options.push(\"set textsize \".concat(this.config.options.textsize));\n      }\n\n      if (this.config.options.connectionIsolationLevel !== null) {\n        options.push(\"set transaction isolation level \".concat(this.getIsolationLevelText(this.config.options.connectionIsolationLevel)));\n      }\n\n      if (this.config.options.abortTransactionOnError === true) {\n        options.push('set xact_abort on');\n      } else if (this.config.options.abortTransactionOnError === false) {\n        options.push('set xact_abort off');\n      }\n\n      return options.join('\\n');\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"processedInitialSql\",\n    value: function processedInitialSql() {\n      this.clearConnectTimer();\n      this.emit('connect');\n    }\n    /**\n     * Execute the SQL batch represented by [[Request]].\n     * There is no param support, and unlike [[Request.execSql]],\n     * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\n     *\n     * In almost all cases, [[Request.execSql]] will be a better choice.\n     *\n     * @param request A [[Request]] object representing the request.\n     */\n\n  }, {\n    key: \"execSqlBatch\",\n    value: function execSqlBatch(request) {\n      this.makeRequest(request, _packet.TYPE.SQL_BATCH, new _sqlbatchPayload.default(request.sqlTextOrProcedure, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\n     *  Execute the SQL represented by [[Request]].\n     *\n     * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\n     * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\n     * for the first execution. This may also result in SQL server treating the request like a stored procedure\n     * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\n     * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\n     *\n     * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\n     * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\n     * See also [issue #24](https://github.com/pekim/tedious/issues/24)\n     *\n     * @param request A [[Request]] object representing the request.\n     */\n\n  }, {\n    key: \"execSql\",\n    value: function execSql(request) {\n      var _this12 = this;\n\n      request.transformIntoExecuteSqlRpc();\n      var error = request.error;\n\n      if (error != null) {\n        process.nextTick(function () {\n          _this12.debug.log(error.message);\n\n          request.callback(error);\n        });\n        return;\n      }\n\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\n     * Creates a new BulkLoad instance.\n     *\n     * @param table The name of the table to bulk-insert into.\n     * @param options A set of bulk load options.\n     */\n\n  }, {\n    key: \"newBulkLoad\",\n    value: function newBulkLoad(table, callbackOrOptions, callback) {\n      var options;\n\n      if (callback === undefined) {\n        callback = callbackOrOptions;\n        options = {};\n      } else {\n        options = callbackOrOptions;\n      }\n\n      if (typeof options !== 'object') {\n        throw new TypeError('\"options\" argument must be an object');\n      }\n\n      return new _bulkLoad.default(table, this.config.options, options, callback);\n    }\n    /**\n     * Execute the SQL batch represented by [[Request]] .\n     * There is no param support, and unlike [[execSql]],\n     * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\n     *\n     * In almost all cases, [[execSql]] will be a better choice.\n     *\n     * @param bulkLoad A previously prepared [[Request]] .\n     */\n\n  }, {\n    key: \"execBulkLoad\",\n    value: function execBulkLoad(bulkLoad) {\n      var _this13 = this;\n\n      bulkLoad.executionStarted = true;\n      var request = new _request.default(bulkLoad.getBulkInsertSql(), function (error) {\n        if (error) {\n          if (error.code === 'UNKNOWN') {\n            error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n          }\n\n          bulkLoad.error = error;\n          bulkLoad.callback(error);\n          return;\n        }\n\n        _this13.makeRequest(bulkLoad, _packet.TYPE.BULK_LOAD);\n      });\n      bulkLoad.once('cancel', function () {\n        request.cancel();\n      });\n      this.execSqlBatch(request);\n    }\n    /**\n     * Prepare the SQL represented by the request.\n     *\n     * The request can then be used in subsequent calls to\n     * [[execute]] and [[unprepare]]\n     *\n     * @param request A [[Request]] object representing the request.\n     *   Parameters only require a name and type. Parameter values are ignored.\n     */\n\n  }, {\n    key: \"prepare\",\n    value: function prepare(request) {\n      request.transformIntoPrepareRpc();\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\n     * Release the SQL Server resources associated with a previously prepared request.\n     *\n     * @param request A [[Request]] object representing the request.\n     *   Parameters only require a name and type.\n     *   Parameter values are ignored.\n     */\n\n  }, {\n    key: \"unprepare\",\n    value: function unprepare(request) {\n      request.transformIntoUnprepareRpc();\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\n     * Execute previously prepared SQL, using the supplied parameters.\n     *\n     * @param request A previously prepared [[Request]].\n     * @param parameters  An object whose names correspond to the names of\n     *   parameters that were added to the [[Request]] before it was prepared.\n     *   The object's values are passed as the parameters' values when the\n     *   request is executed.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(request, parameters) {\n      var _this14 = this;\n\n      request.transformIntoExecuteRpc(parameters);\n      var error = request.error;\n\n      if (error != null) {\n        process.nextTick(function () {\n          _this14.debug.log(error.message);\n\n          request.callback(error);\n        });\n        return;\n      }\n\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\n     * Call a stored procedure represented by [[Request]].\n     *\n     * @param request A [[Request]] object representing the request.\n     */\n\n  }, {\n    key: \"callProcedure\",\n    value: function callProcedure(request) {\n      var _this15 = this;\n\n      request.validateParameters();\n      var error = request.error;\n\n      if (error != null) {\n        process.nextTick(function () {\n          _this15.debug.log(error.message);\n\n          request.callback(error);\n        });\n        return;\n      }\n\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\n     * Start a transaction.\n     *\n     * @param callback\n     * @param name A string representing a name to associate with the transaction.\n     *   Optional, and defaults to an empty string. Required when `isolationLevel`\n     *   is present.\n     * @param isolationLevel The isolation level that the transaction is to be run with.\n     *\n     *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n     *   * `READ_UNCOMMITTED`\n     *   * `READ_COMMITTED`\n     *   * `REPEATABLE_READ`\n     *   * `SERIALIZABLE`\n     *   * `SNAPSHOT`\n     *\n     *   Optional, and defaults to the Connection's isolation level.\n     */\n\n  }, {\n    key: \"beginTransaction\",\n    value: function beginTransaction(callback) {\n      var _this16 = this;\n\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var isolationLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.config.options.isolationLevel;\n      (0, _transaction.assertValidIsolationLevel)(isolationLevel, 'isolationLevel');\n      var transaction = new _transaction.Transaction(name, isolationLevel);\n\n      if (this.config.options.tdsVersion < '7_2') {\n        return this.execSqlBatch(new _request.default('SET TRANSACTION ISOLATION LEVEL ' + transaction.isolationLevelToTSQL() + ';BEGIN TRAN ' + transaction.name, function (err) {\n          _this16.transactionDepth++;\n\n          if (_this16.transactionDepth === 1) {\n            _this16.inTransaction = true;\n          }\n\n          callback(err);\n        }));\n      }\n\n      var request = new _request.default(undefined, function (err) {\n        return callback(err, _this16.currentTransactionDescriptor());\n      });\n      return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n    }\n    /**\n     * Commit a transaction.\n     *\n     * There should be an active transaction - that is, [[beginTransaction]]\n     * should have been previously called.\n     *\n     * @param callback\n     * @param name A string representing a name to associate with the transaction.\n     *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\n     */\n\n  }, {\n    key: \"commitTransaction\",\n    value: function commitTransaction(callback) {\n      var _this17 = this;\n\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var transaction = new _transaction.Transaction(name);\n\n      if (this.config.options.tdsVersion < '7_2') {\n        return this.execSqlBatch(new _request.default('COMMIT TRAN ' + transaction.name, function (err) {\n          _this17.transactionDepth--;\n\n          if (_this17.transactionDepth === 0) {\n            _this17.inTransaction = false;\n          }\n\n          callback(err);\n        }));\n      }\n\n      var request = new _request.default(undefined, callback);\n      return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n    }\n    /**\n     * Rollback a transaction.\n     *\n     * There should be an active transaction - that is, [[beginTransaction]]\n     * should have been previously called.\n     *\n     * @param callback\n     * @param name A string representing a name to associate with the transaction.\n     *   Optional, and defaults to an empty string.\n     *   Required when `isolationLevel` is present.\n     */\n\n  }, {\n    key: \"rollbackTransaction\",\n    value: function rollbackTransaction(callback) {\n      var _this18 = this;\n\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var transaction = new _transaction.Transaction(name);\n\n      if (this.config.options.tdsVersion < '7_2') {\n        return this.execSqlBatch(new _request.default('ROLLBACK TRAN ' + transaction.name, function (err) {\n          _this18.transactionDepth--;\n\n          if (_this18.transactionDepth === 0) {\n            _this18.inTransaction = false;\n          }\n\n          callback(err);\n        }));\n      }\n\n      var request = new _request.default(undefined, callback);\n      return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n    }\n    /**\n     * Set a savepoint within a transaction.\n     *\n     * There should be an active transaction - that is, [[beginTransaction]]\n     * should have been previously called.\n     *\n     * @param callback\n     * @param name A string representing a name to associate with the transaction.\\\n     *   Optional, and defaults to an empty string.\n     *   Required when `isolationLevel` is present.\n     */\n\n  }, {\n    key: \"saveTransaction\",\n    value: function saveTransaction(callback, name) {\n      var _this19 = this;\n\n      var transaction = new _transaction.Transaction(name);\n\n      if (this.config.options.tdsVersion < '7_2') {\n        return this.execSqlBatch(new _request.default('SAVE TRAN ' + transaction.name, function (err) {\n          _this19.transactionDepth++;\n          callback(err);\n        }));\n      }\n\n      var request = new _request.default(undefined, callback);\n      return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n    }\n    /**\n     * Run the given callback after starting a transaction, and commit or\n     * rollback the transaction afterwards.\n     *\n     * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\n     * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\n     * use of database transactions and automatically handle transaction nesting.\n     *\n     * @param cb\n     * @param isolationLevel\n     *   The isolation level that the transaction is to be run with.\n     *\n     *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n     *   * `READ_UNCOMMITTED`\n     *   * `READ_COMMITTED`\n     *   * `REPEATABLE_READ`\n     *   * `SERIALIZABLE`\n     *   * `SNAPSHOT`\n     *\n     *   Optional, and defaults to the Connection's isolation level.\n     */\n\n  }, {\n    key: \"transaction\",\n    value: function transaction(cb, isolationLevel) {\n      var _this20 = this;\n\n      if (typeof cb !== 'function') {\n        throw new TypeError('`cb` must be a function');\n      }\n\n      var useSavepoint = this.inTransaction;\n\n      var name = '_tedious_' + _crypto.default.randomBytes(10).toString('hex');\n\n      var txDone = function txDone(err, done) {\n        for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n          args[_key3 - 2] = arguments[_key3];\n        }\n\n        if (err) {\n          if (_this20.inTransaction && _this20.state === _this20.STATE.LOGGED_IN) {\n            _this20.rollbackTransaction(function (txErr) {\n              done.apply(void 0, [txErr || err].concat(args));\n            }, name);\n          } else {\n            done.apply(void 0, [err].concat(args));\n          }\n        } else if (useSavepoint) {\n          if (_this20.config.options.tdsVersion < '7_2') {\n            _this20.transactionDepth--;\n          }\n\n          done.apply(void 0, [null].concat(args));\n        } else {\n          _this20.commitTransaction(function (txErr) {\n            done.apply(void 0, [txErr].concat(args));\n          }, name);\n        }\n      };\n\n      if (useSavepoint) {\n        return this.saveTransaction(function (err) {\n          if (err) {\n            return cb(err);\n          }\n\n          if (isolationLevel) {\n            return _this20.execSqlBatch(new _request.default('SET transaction isolation level ' + _this20.getIsolationLevelText(isolationLevel), function (err) {\n              return cb(err, txDone);\n            }));\n          } else {\n            return cb(null, txDone);\n          }\n        }, name);\n      } else {\n        return this.beginTransaction(function (err) {\n          if (err) {\n            return cb(err);\n          }\n\n          return cb(null, txDone);\n        }, name, isolationLevel);\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(request, packetType, payload) {\n      var _this21 = this;\n\n      if (this.state !== this.STATE.LOGGED_IN) {\n        var message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n        this.debug.log(message);\n        request.callback((0, _errors.RequestError)(message, 'EINVALIDSTATE'));\n      } else if (request.canceled) {\n        process.nextTick(function () {\n          request.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n        });\n      } else {\n        if (packetType === _packet.TYPE.SQL_BATCH) {\n          this.isSqlBatch = true;\n        } else {\n          this.isSqlBatch = false;\n        }\n\n        this.request = request;\n        request.connection = this;\n        request.rowCount = 0;\n        request.rows = [];\n        request.rst = [];\n\n        var _message3;\n\n        request.once('cancel', function () {\n          // There's three ways to handle request cancelation:\n          if (!_this21.isRequestActive(request)) {\n            // Cancel was called on a request that is no longer active on this connection\n            return;\n          } else if (_message3.writable) {\n            // - if the message is still writable, we'll set the ignore bit\n            //   and end the message.\n            _message3.ignore = true;\n\n            _message3.end();\n          } else {\n            // - but if the message has been ended (and thus has been fully sent off),\n            //   we need to send an `ATTENTION` message to the server\n            _this21.messageIo.sendMessage(_packet.TYPE.ATTENTION);\n\n            _this21.transitionTo(_this21.STATE.SENT_ATTENTION);\n          }\n\n          _this21.clearRequestTimer();\n\n          _this21.createCancelTimer();\n        });\n        this.createRequestTimer();\n\n        if (request instanceof _bulkLoad.default) {\n          _message3 = request.getMessageStream(); // If the bulkload was not put into streaming mode by the user,\n          // we end the rowToPacketTransform here for them.\n          //\n          // If it was put into streaming mode, it's the user's responsibility\n          // to end the stream.\n\n          if (!request.streamingMode) {\n            request.rowToPacketTransform.end();\n          }\n\n          this.messageIo.outgoingMessageStream.write(_message3);\n          this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n        } else {\n          _message3 = new _message.default({\n            type: packetType,\n            resetConnection: this.resetConnectionOnNextRequest\n          });\n          this.messageIo.outgoingMessageStream.write(_message3);\n          this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n\n          _message3.once('finish', function () {\n            _this21.resetConnectionOnNextRequest = false;\n\n            _this21.debug.payload(function () {\n              return payload.toString('  ');\n            });\n\n            if (request.paused) {\n              // Request.pause() has been called before the request was started\n              _this21.pauseRequest(request);\n            }\n          });\n\n          _readableStream.Readable.from(payload).pipe(_message3);\n        }\n      }\n    }\n    /**\n     * Cancel currently executed request.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this.request) {\n        return false;\n      }\n\n      if (this.request.canceled) {\n        return false;\n      }\n\n      this.request.cancel();\n      return true;\n    }\n    /**\n     * Reset the connection to its initial state.\n     * Can be useful for connection pool implementations.\n     *\n     * @param callback\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(callback) {\n      var _this22 = this;\n\n      var request = new _request.default(this.getInitialSql(), function (err) {\n        if (_this22.config.options.tdsVersion < '7_2') {\n          _this22.inTransaction = false;\n        }\n\n        callback(err);\n      });\n      this.resetConnectionOnNextRequest = true;\n      this.execSqlBatch(request);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"currentTransactionDescriptor\",\n    value: function currentTransactionDescriptor() {\n      return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"getIsolationLevelText\",\n    value: function getIsolationLevelText(isolationLevel) {\n      switch (isolationLevel) {\n        case _transaction.ISOLATION_LEVEL.READ_UNCOMMITTED:\n          return 'read uncommitted';\n\n        case _transaction.ISOLATION_LEVEL.REPEATABLE_READ:\n          return 'repeatable read';\n\n        case _transaction.ISOLATION_LEVEL.SERIALIZABLE:\n          return 'serializable';\n\n        case _transaction.ISOLATION_LEVEL.SNAPSHOT:\n          return 'snapshot';\n\n        default:\n          return 'read committed';\n      }\n    }\n  }]);\n\n  return Connection;\n}(_events.EventEmitter);\n\nvar _default = Connection;\nexports.default = _default;\nmodule.exports = Connection;\nvar authenticationCache = new _adalNode.MemoryCache();\nConnection.prototype.STATE = {\n  INITIALIZED: {\n    name: 'Initialized',\n    events: {}\n  },\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function enter() {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      socketConnect: function socketConnect() {\n        this.sendPreLogin();\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function enter() {\n      this.emptyMessageBuffer();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function data(_data) {\n        this.addToMessageBuffer(_data);\n      },\n      message: function message() {\n        var preloginPayload = new _preloginPayload.default(this.messageBuffer);\n        this.debug.payload(function () {\n          return preloginPayload.toString('  ');\n        });\n\n        if (preloginPayload.fedAuthRequired === 1) {\n          this.fedAuthRequired = true;\n        }\n\n        if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\n          var _this$routingData$ser, _this$routingData;\n\n          if (!this.config.options.encrypt) {\n            this.emit('connect', (0, _errors.ConnectionError)(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n            return this.close();\n          }\n\n          this.messageIo.startTls(this.secureContext, (_this$routingData$ser = (_this$routingData = this.routingData) === null || _this$routingData === void 0 ? void 0 : _this$routingData.server) !== null && _this$routingData$ser !== void 0 ? _this$routingData$ser : this.config.server, this.config.options.trustServerCertificate);\n          this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\n        } else {\n          this.sendLogin7Packet();\n          var authentication = this.config.authentication;\n\n          if (authentication.type === 'ntlm') {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n          } else {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n          }\n        }\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function enter() {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function message() {},\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function reconnect() {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function enter() {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function message() {},\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function retry() {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function data(_data2) {\n        this.messageIo.tlsHandshakeData(_data2);\n      },\n      message: function message() {\n        if (this.messageIo.tlsNegotiationComplete) {\n          this.sendLogin7Packet();\n          var authentication = this.config.authentication;\n\n          if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n          } else if (authentication.type === 'ntlm') {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n          } else {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n          }\n        }\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function data(_data3) {\n        this.sendDataToTokenStreamParser(_data3);\n      },\n      routingChange: function routingChange() {\n        this.transitionTo(this.STATE.REROUTING);\n      },\n      featureExtAck: function featureExtAck(token) {\n        var authentication = this.config.authentication;\n\n        if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\n          if (token.fedAuth === undefined) {\n            this.loginError = (0, _errors.ConnectionError)('Did not receive Active Directory authentication acknowledgement');\n            this.loggedIn = false;\n          } else if (token.fedAuth.length !== 0) {\n            this.loginError = (0, _errors.ConnectionError)(\"Active Directory authentication acknowledgment for \".concat(authentication.type, \" authentication method includes extra data\"));\n            this.loggedIn = false;\n          }\n        } else if (token.fedAuth === undefined) {\n          this.loginError = (0, _errors.ConnectionError)('Received acknowledgement for unknown feature');\n          this.loggedIn = false;\n        } else {\n          this.loginError = (0, _errors.ConnectionError)('Did not request Active Directory authentication, but received the acknowledgment');\n          this.loggedIn = false;\n        }\n      },\n      message: function message() {\n        if (this.loggedIn) {\n          this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n        } else if (this.loginError) {\n          if (this.loginError.isTransient) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function data(_data4) {\n        this.sendDataToTokenStreamParser(_data4);\n      },\n      message: function message() {\n        if (this.ntlmpacket) {\n          var authentication = this.config.authentication;\n          var payload = new _ntlmPayload.default({\n            domain: authentication.options.domain,\n            userName: authentication.options.userName,\n            password: authentication.options.password,\n            ntlmpacket: this.ntlmpacket\n          });\n          this.messageIo.sendMessage(_packet.TYPE.NTLMAUTH_PKT, payload.data);\n          this.debug.payload(function () {\n            return payload.toString('  ');\n          });\n          this.ntlmpacket = undefined;\n        } else if (this.loggedIn) {\n          this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n        } else if (this.loginError) {\n          if (this.loginError.isTransient) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function data(_data5) {\n        this.sendDataToTokenStreamParser(_data5);\n      },\n      routingChange: function routingChange() {\n        this.transitionTo(this.STATE.REROUTING);\n      },\n      fedAuthInfo: function fedAuthInfo(token) {\n        this.fedAuthInfoToken = token;\n      },\n      message: function message() {\n        var _this23 = this;\n\n        var fedAuthInfoToken = this.fedAuthInfoToken;\n\n        if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n          var authentication = this.config.authentication;\n\n          var getToken = function getToken(callback) {\n            var getTokenFromCredentials = function getTokenFromCredentials(err, credentials) {\n              if (err) {\n                return callback(err);\n              }\n\n              credentials.getToken().then(function (tokenResponse) {\n                callback(null, tokenResponse.accessToken);\n              }, callback);\n            };\n\n            if (authentication.type === 'azure-active-directory-password') {\n              var _authentication$optio;\n\n              var credentials = new _msRestNodeauth.UserTokenCredentials('7f98cb04-cd1e-40df-9140-3bf7e2cea4db', (_authentication$optio = authentication.options.domain) !== null && _authentication$optio !== void 0 ? _authentication$optio : 'common', authentication.options.userName, authentication.options.password, fedAuthInfoToken.spn, undefined, // environment\n              authenticationCache);\n              getTokenFromCredentials(undefined, credentials);\n            } else if (authentication.type === 'azure-active-directory-msi-vm') {\n              (0, _msRestNodeauth.loginWithVmMSI)({\n                clientId: authentication.options.clientId,\n                msiEndpoint: authentication.options.msiEndpoint,\n                resource: fedAuthInfoToken.spn\n              }, getTokenFromCredentials);\n            } else if (authentication.type === 'azure-active-directory-msi-app-service') {\n              (0, _msRestNodeauth.loginWithAppServiceMSI)({\n                msiEndpoint: authentication.options.msiEndpoint,\n                msiSecret: authentication.options.msiSecret,\n                resource: fedAuthInfoToken.spn,\n                clientId: authentication.options.clientId\n              }, getTokenFromCredentials);\n            } else if (authentication.type === 'azure-active-directory-service-principal-secret') {\n              var _credentials = new _msRestNodeauth.ApplicationTokenCredentials(authentication.options.clientId, authentication.options.tenantId, // domain\n              authentication.options.clientSecret, fedAuthInfoToken.spn, undefined, // environment\n              authenticationCache);\n\n              getTokenFromCredentials(undefined, _credentials);\n            }\n          };\n\n          getToken(function (err, token) {\n            if (err) {\n              _this23.loginError = (0, _errors.ConnectionError)('Security token could not be authenticated or authorized.', 'EFEDAUTH');\n\n              _this23.emit('connect', _this23.loginError);\n\n              _this23.transitionTo(_this23.STATE.FINAL);\n\n              return;\n            }\n\n            _this23.sendFedAuthTokenMessage(token);\n          });\n        } else if (this.loginError) {\n          if (this.loginError.isTransient) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function enter() {\n      this.sendInitialSql();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function data(_data6) {\n        this.sendDataToTokenStreamParser(_data6);\n      },\n      message: function message() {\n        this.transitionTo(this.STATE.LOGGED_IN);\n        this.processedInitialSql();\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    exit: function exit(nextState) {\n      this.clearRequestTimer();\n\n      if (nextState !== this.STATE.FINAL) {\n        this.tokenStreamParser.resume();\n      }\n    },\n    events: {\n      socketError: function socketError(err) {\n        var sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      },\n      data: function data(_data7) {\n        this.clearRequestTimer(); // request timer is stopped on first data package\n\n        var ret = this.sendDataToTokenStreamParser(_data7);\n\n        if (ret === false) {\n          // Bridge backpressure from the token stream parser transform to the\n          // packet stream transform.\n          this.messageIo.pause();\n        }\n      },\n      message: function message() {\n        // We have to channel the 'message' (EOM) event through the token stream\n        // parser transform, to keep it in line with the flow of the tokens, when\n        // the incoming data flow is paused and resumed.\n        this.tokenStreamParser.addEndOfMessageMarker();\n      },\n      endOfMessageMarkerReceived: function endOfMessageMarkerReceived() {\n        this.transitionTo(this.STATE.LOGGED_IN);\n        var sqlRequest = this.request;\n        this.request = undefined;\n\n        if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\n          this.inTransaction = false;\n        }\n\n        sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function enter() {\n      this.attentionReceived = false;\n    },\n    events: {\n      socketError: function socketError(err) {\n        var sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      },\n      data: function data(_data8) {\n        this.sendDataToTokenStreamParser(_data8);\n      },\n      attention: function attention() {\n        this.attentionReceived = true;\n      },\n      message: function message() {\n        // 3.2.5.7 Sent Attention State\n        // Discard any data contained in the response, until we receive the attention response\n        if (this.attentionReceived) {\n          this.clearCancelTimer();\n          var sqlRequest = this.request;\n          this.request = undefined;\n          this.transitionTo(this.STATE.LOGGED_IN);\n\n          if (sqlRequest.error && sqlRequest.error instanceof _errors.RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n            sqlRequest.callback(sqlRequest.error);\n          } else {\n            sqlRequest.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n          }\n        }\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function enter() {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      loginFailed: function loginFailed() {// Do nothing. The connection was probably closed by the client code.\n      },\n      connectTimeout: function connectTimeout() {// Do nothing, as the timer should be cleaned up.\n      },\n      message: function message() {// Do nothing\n      },\n      socketError: function socketError() {// Do nothing\n      }\n    }\n  }\n};","map":{"version":3,"sources":["D:/Bakery/Bakery_ReactjsSourceCode/node_modules/tedious/lib/connection.js"],"names":["Object","defineProperty","exports","value","default","_crypto","_interopRequireDefault","require","_os","_constants","_tls","_readableStream","_msRestNodeauth","_bulkLoad","_debug","_events","_instanceLookup","_transientErrorLookup","_packet","_preloginPayload","_login7Payload","_ntlmPayload","_request","_rpcrequestPayload","_sqlbatchPayload","_messageIo","_tokenStreamParser","_transaction","_errors","_connector","_library","_tdsVersions","_message","_ntlm","_depd","_adalNode","_nodeAbortController","obj","__esModule","deprecate","KEEP_ALIVE_INITIAL_DELAY","DEFAULT_CONNECT_TIMEOUT","DEFAULT_CLIENT_REQUEST_TIMEOUT","DEFAULT_CANCEL_TIMEOUT","DEFAULT_CONNECT_RETRY_INTERVAL","DEFAULT_PACKET_SIZE","DEFAULT_TEXTSIZE","DEFAULT_DATEFIRST","DEFAULT_PORT","DEFAULT_TDS_VERSION","DEFAULT_LANGUAGE","DEFAULT_DATEFORMAT","CLEANUP_TYPE","NORMAL","REDIRECT","RETRY","Connection","config","fedAuthRequired","fedAuthInfoToken","secureContext","inTransaction","transactionDescriptors","transactionDepth","isSqlBatch","curTransientRetryCount","transientErrorLookup","closed","loggedIn","loginError","debug","tokenStreamParser","ntlmpacket","ntlmpacketBuffer","routingData","messageIo","state","resetConnectionOnNextRequest","attentionReceived","request","procReturnStatusValue","socket","messageBuffer","connectTimer","cancelTimer","requestTimer","retryTimer","TypeError","server","undefined","authentication","type","options","domain","userName","password","toUpperCase","token","clientId","msiEndpoint","msiSecret","clientSecret","tenantId","abortTransactionOnError","appName","camelCaseColumns","cancelTimeout","columnNameReplacer","connectionRetryInterval","connectTimeout","connectionIsolationLevel","ISOLATION_LEVEL","READ_COMMITTED","cryptoCredentialsDetails","database","datefirst","dateFormat","data","packet","payload","enableAnsiNull","enableAnsiNullDefault","enableAnsiPadding","enableAnsiWarnings","enableArithAbort","enableConcatNullYieldsNull","enableCursorCloseOnCommit","enableImplicitTransactions","enableNumericRoundabort","enableQuotedIdentifier","encrypt","fallbackToDefaultDb","instanceName","isolationLevel","language","localAddress","maxRetriesOnTransientErrors","multiSubnetFailover","packetSize","port","readOnlyIntent","requestTimeout","rowCollectionOnDone","rowCollectionOnRequestCompletion","tdsVersion","textsize","trustServerCertificate","useColumnNames","useUTC","validateBulkLoadParameters","workstationId","lowerCaseGuids","Error","assertValidIsolationLevel","RangeError","credentialsDetails","secureOptions","create","SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","createSecureContext","createDebug","createTokenStreamParser","Buffer","from","alloc","TransientErrorLookup","STATE","INITIALIZED","connectListener","ConnectionError","name","onConnect","err","removeListener","onError","once","transitionTo","CONNECTING","event","listener","args","FINAL","signal","createConnectTimer","connectOnPort","InstanceLookup","instanceLookup","timeout","emit","message","cleanupType","clearConnectTimer","clearRequestTimer","clearRetryTimer","closeConnection","process","nextTick","RequestError","callback","on","Parser","canceled","error","number","class","serverName","procName","lineNumber","isLoginErrorTransient","isTransientError","isTransient","newValue","dispatchEvent","interface","push","length","columns","j","len","col","colName","close","orderColumns","rows","rst","SENT_ATTENTION","paused","paramName","metadata","rowCount","more","attention","sqlError","clearCancelTimer","SENT_CLIENT_REQUEST","resume","connectOpts","host","Connector","execute","socketError","socketClose","socketEnd","setKeepAlive","cleartext","socketConnect","destroy","controller","setTimeout","abort","retryTimeout","log","cancel","clearTimeout","newState","exit","call","enter","apply","eventName","handler","events","SENT_TLSSSLNEGOTIATION","code","REROUTING","TRANSIENT_FAILURE_RETRY","sendMessage","TYPE","PRELOGIN","toString","concat","versions","clientProgVer","clientPid","pid","connectionId","clientTimeZone","Date","getTimezoneOffset","clientLcid","fedAuth","echo","workflow","fedAuthToken","sspi","createNTLMRequest","hostname","libraryName","initDbFatal","LOGIN7","toBuffer","accessTokenLen","byteLength","offset","writeUInt32LE","write","FEDAUTH_TOKEN","SENT_LOGIN7_WITH_STANDARD_LOGIN","addBuffer","isRequestActive","pause","getInitialSql","currentTransactionDescriptor","SQL_BATCH","outgoingMessageStream","Readable","pipe","getIsolationLevelText","join","makeRequest","sqlTextOrProcedure","transformIntoExecuteSqlRpc","RPC_REQUEST","table","callbackOrOptions","bulkLoad","executionStarted","getBulkInsertSql","BULK_LOAD","execSqlBatch","transformIntoPrepareRpc","transformIntoUnprepareRpc","parameters","transformIntoExecuteRpc","validateParameters","transaction","Transaction","isolationLevelToTSQL","TRANSACTION_MANAGER","beginPayload","commitPayload","rollbackPayload","savePayload","cb","useSavepoint","randomBytes","txDone","done","LOGGED_IN","rollbackTransaction","txErr","commitTransaction","saveTransaction","beginTransaction","packetType","connection","writable","ignore","end","ATTENTION","createCancelTimer","createRequestTimer","getMessageStream","streamingMode","rowToPacketTransform","resetConnection","pauseRequest","READ_UNCOMMITTED","REPEATABLE_READ","SERIALIZABLE","SNAPSHOT","EventEmitter","_default","module","authenticationCache","MemoryCache","prototype","initialiseConnection","sendPreLogin","SENT_PRELOGIN","emptyMessageBuffer","addToMessageBuffer","preloginPayload","encryptionString","_this$routingData$ser","_this$routingData","startTls","sendLogin7Packet","SENT_LOGIN7_WITH_NTLM","cleanupConnection","reconnect","retry","createRetryTimer","tlsHandshakeData","tlsNegotiationComplete","SENT_LOGIN7_WITH_FEDAUTH","sendDataToTokenStreamParser","routingChange","featureExtAck","LOGGED_IN_SENDING_INITIAL_SQL","NTLMAUTH_PKT","fedAuthInfo","stsurl","spn","getToken","getTokenFromCredentials","credentials","then","tokenResponse","accessToken","_authentication$optio","UserTokenCredentials","loginWithVmMSI","resource","loginWithAppServiceMSI","ApplicationTokenCredentials","sendFedAuthTokenMessage","sendInitialSql","processedInitialSql","nextState","sqlRequest","ret","addEndOfMessageMarker","endOfMessageMarkerReceived","loginFailed"],"mappings":"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CA;;AAEA,IAAMC,YAAY,GAAG,IAArB;AACA;AACA;AACA;;AAEA,IAAMC,mBAAmB,GAAG,KAA5B;AACA;AACA;AACA;;AAEA,IAAMC,gBAAgB,GAAG,YAAzB;AACA;AACA;AACA;;AAEA,IAAMC,kBAAkB,GAAG,KAA3B;AAEA;AACA;AACA;;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,CADW;AAEnBC,EAAAA,QAAQ,EAAE,CAFS;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,U;;;;;AACJ;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,sBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAClB;AACA,UAAKC,eAAL,GAAuB,KAAK,CAA5B;AACA,UAAKC,gBAAL,GAAwB,KAAK,CAA7B;AACA,UAAKF,MAAL,GAAc,KAAK,CAAnB;AACA,UAAKG,aAAL,GAAqB,KAAK,CAA1B;AACA,UAAKC,aAAL,GAAqB,KAAK,CAA1B;AAC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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _constants = _interopRequireDefault(require(\"constants\"));\n\nvar _tls = require(\"tls\");\n\nvar _readableStream = require(\"readable-stream\");\n\nvar _msRestNodeauth = require(\"@azure/ms-rest-nodeauth\");\n\nvar _bulkLoad = _interopRequireDefault(require(\"./bulk-load\"));\n\nvar _debug = _interopRequireDefault(require(\"./debug\"));\n\nvar _events = require(\"events\");\n\nvar _instanceLookup = require(\"./instance-lookup\");\n\nvar _transientErrorLookup = require(\"./transient-error-lookup\");\n\nvar _packet = require(\"./packet\");\n\nvar _preloginPayload = _interopRequireDefault(require(\"./prelogin-payload\"));\n\nvar _login7Payload = _interopRequireDefault(require(\"./login7-payload\"));\n\nvar _ntlmPayload = _interopRequireDefault(require(\"./ntlm-payload\"));\n\nvar _request = _interopRequireDefault(require(\"./request\"));\n\nvar _rpcrequestPayload = _interopRequireDefault(require(\"./rpcrequest-payload\"));\n\nvar _sqlbatchPayload = _interopRequireDefault(require(\"./sqlbatch-payload\"));\n\nvar _messageIo = _interopRequireDefault(require(\"./message-io\"));\n\nvar _tokenStreamParser = require(\"./token/token-stream-parser\");\n\nvar _transaction = require(\"./transaction\");\n\nvar _errors = require(\"./errors\");\n\nvar _connector = require(\"./connector\");\n\nvar _library = require(\"./library\");\n\nvar _tdsVersions = require(\"./tds-versions\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _ntlm = require(\"./ntlm\");\n\nvar _depd = _interopRequireDefault(require(\"depd\"));\n\nvar _adalNode = require(\"adal-node\");\n\nvar _nodeAbortController = _interopRequireDefault(require(\"node-abort-controller\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst deprecate = (0, _depd.default)('tedious');\n\n/**\n * @private\n */\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\n/**\n * @private\n */\n\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\n/**\n * @private\n */\n\nconst DEFAULT_TEXTSIZE = '2147483647';\n/**\n * @private\n */\n\nconst DEFAULT_DATEFIRST = 7;\n/**\n * @private\n */\n\nconst DEFAULT_PORT = 1433;\n/**\n * @private\n */\n\nconst DEFAULT_TDS_VERSION = '7_4';\n/**\n * @private\n */\n\nconst DEFAULT_LANGUAGE = 'us_english';\n/**\n * @private\n */\n\nconst DEFAULT_DATEFORMAT = 'mdy';\n\n/**\n * @private\n */\nconst CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n/**\n * A [[Connection]] instance represents a single connection to a database server.\n *\n * ```js\n * var Connection = require('tedious').Connection;\n * var config = {\n *  \"authentication\": {\n *    ...,\n *    \"options\": {...}\n *  },\n *  \"options\": {...}\n * };\n * var connection = new Connection(config);\n * ```\n *\n * Only one request at a time may be executed on a connection. Once a [[Request]]\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\n * [[Request]]'s completion callback is called.\n */\n\nclass Connection extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * Note: be aware of the different options field:\n   * 1. config.authentication.options\n   * 2. config.options\n   *\n   * ```js\n   * const { Connection } = require('tedious');\n   *\n   * const config = {\n   *  \"authentication\": {\n   *    ...,\n   *    \"options\": {...}\n   *  },\n   *  \"options\": {...}\n   * };\n   *\n   * const connection = new Connection(config);\n   * ```\n   *\n   * @param config\n   */\n  constructor(config) {\n    super();\n    this.fedAuthRequired = void 0;\n    this.fedAuthInfoToken = void 0;\n    this.config = void 0;\n    this.secureContext = void 0;\n    this.inTransaction = void 0;\n    this.transactionDescriptors = void 0;\n    this.transactionDepth = void 0;\n    this.isSqlBatch = void 0;\n    this.curTransientRetryCount = void 0;\n    this.transientErrorLookup = void 0;\n    this.closed = void 0;\n    this.loggedIn = void 0;\n    this.loginError = void 0;\n    this.debug = void 0;\n    this.tokenStreamParser = void 0;\n    this.ntlmpacket = void 0;\n    this.ntlmpacketBuffer = void 0;\n    this.routingData = void 0;\n    this.messageIo = void 0;\n    this.state = void 0;\n    this.resetConnectionOnNextRequest = void 0;\n    this.attentionReceived = void 0;\n    this.request = void 0;\n    this.procReturnStatusValue = void 0;\n    this.socket = void 0;\n    this.messageBuffer = void 0;\n    this.connectTimer = void 0;\n    this.cancelTimer = void 0;\n    this.requestTimer = void 0;\n    this.retryTimer = void 0;\n\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n\n    this.fedAuthRequired = false;\n    this.fedAuthInfoToken = undefined;\n    let authentication;\n\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n\n      const type = config.authentication.type;\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\n\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId,\n            msiEndpoint: options.msiEndpoint\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\n        }\n\n        if (options.msiSecret !== undefined && typeof options.msiSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiSecret\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId,\n            msiEndpoint: options.msiEndpoint,\n            msiSecret: options.msiSecret\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n\n    this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connectionIsolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: true,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: true,\n        fallbackToDefaultDb: false,\n        instanceName: undefined,\n        isolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustServerCertificate: false,\n        useColumnNames: false,\n        useUTC: true,\n        validateBulkLoadParameters: true,\n        workstationId: undefined,\n        lowerCaseGuids: false\n      }\n    };\n\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n\n        this.config.options.appName = config.options.appName;\n      }\n\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.connectionIsolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n\n        this.config.options.database = config.options.database;\n      }\n\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n\n        this.config.options.datefirst = config.options.datefirst;\n      }\n\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n\n        this.config.options.dateFormat = config.options.dateFormat;\n      }\n\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.data = config.options.debug.data;\n        }\n\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.packet = config.options.debug.packet;\n        }\n\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.payload = config.options.debug.payload;\n        }\n\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\n        }\n\n        this.config.options.encrypt = config.options.encrypt;\n      }\n\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n\n        this.config.options.instanceName = config.options.instanceName;\n        this.config.options.port = undefined;\n      }\n\n      if (config.options.isolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.isolationLevel, 'config.options.isolationLevel');\n        this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n\n        this.config.options.language = config.options.language;\n      }\n\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n\n        this.config.options.localAddress = config.options.localAddress;\n      }\n\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n\n        this.config.options.packetSize = config.options.packetSize;\n      }\n\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n\n        this.config.options.port = config.options.port;\n        this.config.options.instanceName = undefined;\n      }\n\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n\n        this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n\n        this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n\n        this.config.options.textsize = config.options.textsize;\n      }\n\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n\n        this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n\n        this.config.options.useUTC = config.options.useUTC;\n      }\n\n      if (config.options.validateBulkLoadParameters !== undefined) {\n        if (typeof config.options.validateBulkLoadParameters !== 'boolean') {\n          throw new TypeError('The \"config.options.validateBulkLoadParameters\" property must be of type boolean.');\n        }\n\n        this.config.options.validateBulkLoadParameters = config.options.validateBulkLoadParameters;\n      }\n\n      if (config.options.workstationId !== undefined) {\n        if (typeof config.options.workstationId !== 'string') {\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\n        }\n\n        this.config.options.workstationId = config.options.workstationId;\n      }\n\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n\n    let credentialsDetails = this.config.options.cryptoCredentialsDetails;\n\n    if (credentialsDetails.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      credentialsDetails = Object.create(credentialsDetails, {\n        secureOptions: {\n          value: _constants.default.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n\n    this.secureContext = (0, _tls.createSecureContext)(credentialsDetails);\n    this.debug = this.createDebug();\n    this.tokenStreamParser = this.createTokenStreamParser();\n    this.inTransaction = false;\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])]; // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n\n    this.transactionDepth = 0;\n    this.isSqlBatch = false;\n    this.closed = false;\n    this.loggedIn = false;\n    this.messageBuffer = Buffer.alloc(0);\n    this.curTransientRetryCount = 0;\n    this.transientErrorLookup = new _transientErrorLookup.TransientErrorLookup();\n    this.state = this.STATE.INITIALIZED;\n  }\n\n  connect(connectListener) {\n    if (this.state !== this.STATE.INITIALIZED) {\n      throw new _errors.ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\n    }\n\n    if (connectListener) {\n      const onConnect = err => {\n        this.removeListener('error', onError);\n        connectListener(err);\n      };\n\n      const onError = err => {\n        this.removeListener('connect', onConnect);\n        connectListener(err);\n      };\n\n      this.once('connect', onConnect);\n      this.once('error', onError);\n    }\n\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n  /**\n   * The server has reported that the charset has changed.\n   */\n\n\n  on(event, listener) {\n    return super.on(event, listener);\n  }\n  /**\n   * @private\n   */\n\n\n  emit(event, ...args) {\n    return super.emit(event, ...args);\n  }\n  /**\n   * Closes the connection to the database.\n   *\n   * The [[Event_end]] will be emitted once the connection has been closed.\n   */\n\n\n  close() {\n    this.transitionTo(this.STATE.FINAL);\n  }\n  /**\n   * @private\n   */\n\n\n  initialiseConnection() {\n    const signal = this.createConnectTimer();\n\n    if (this.config.options.port) {\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal);\n    } else {\n      return new _instanceLookup.InstanceLookup().instanceLookup({\n        server: this.config.server,\n        instanceName: this.config.options.instanceName,\n        timeout: this.config.options.connectTimeout,\n        signal: signal\n      }, (err, port) => {\n        if (err) {\n          if (err.name === 'AbortError') {\n            return;\n          }\n\n          this.emit('connect', (0, _errors.ConnectionError)(err.message, 'EINSTLOOKUP'));\n        } else {\n          this.connectOnPort(port, this.config.options.multiSubnetFailover, signal);\n        }\n      });\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  cleanupConnection(cleanupType) {\n    if (!this.closed) {\n      this.clearConnectTimer();\n      this.clearRequestTimer();\n      this.clearRetryTimer();\n      this.closeConnection();\n\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n        this.emit('rerouting');\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n        process.nextTick(() => {\n          this.emit('end');\n        });\n      }\n\n      const request = this.request;\n\n      if (request) {\n        const err = (0, _errors.RequestError)('Connection closed before request completed.', 'ECLOSE');\n        request.callback(err);\n        this.request = undefined;\n      }\n\n      this.closed = true;\n      this.loggedIn = false;\n      this.loginError = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  createDebug() {\n    const debug = new _debug.default(this.config.options.debug);\n    debug.on('debug', message => {\n      this.emit('debug', message);\n    });\n    return debug;\n  }\n  /**\n   * @private\n   */\n\n\n  createTokenStreamParser() {\n    const tokenStreamParser = new _tokenStreamParser.Parser(this.debug, this.config.options);\n    tokenStreamParser.on('infoMessage', token => {\n      this.emit('infoMessage', token);\n    });\n    tokenStreamParser.on('sspichallenge', token => {\n      if (token.ntlmpacket) {\n        this.ntlmpacket = token.ntlmpacket;\n        this.ntlmpacketBuffer = token.ntlmpacketBuffer;\n      }\n\n      this.emit('sspichallenge', token);\n    });\n    tokenStreamParser.on('errorMessage', token => {\n      this.emit('errorMessage', token);\n\n      if (this.loggedIn) {\n        const request = this.request;\n\n        if (request) {\n          if (!request.canceled) {\n            const error = new _errors.RequestError(token.message, 'EREQUEST');\n            error.number = token.number;\n            error.state = token.state;\n            error.class = token.class;\n            error.serverName = token.serverName;\n            error.procName = token.procName;\n            error.lineNumber = token.lineNumber;\n            request.error = error;\n          }\n        }\n      } else {\n        const error = (0, _errors.ConnectionError)(token.message, 'ELOGIN');\n        const isLoginErrorTransient = this.transientErrorLookup.isTransientError(token.number);\n\n        if (isLoginErrorTransient && this.curTransientRetryCount !== this.config.options.maxRetriesOnTransientErrors) {\n          error.isTransient = true;\n        }\n\n        this.loginError = error;\n      }\n    });\n    tokenStreamParser.on('databaseChange', token => {\n      this.emit('databaseChange', token.newValue);\n    });\n    tokenStreamParser.on('languageChange', token => {\n      this.emit('languageChange', token.newValue);\n    });\n    tokenStreamParser.on('charsetChange', token => {\n      this.emit('charsetChange', token.newValue);\n    });\n    tokenStreamParser.on('fedAuthInfo', token => {\n      this.dispatchEvent('fedAuthInfo', token);\n    });\n    tokenStreamParser.on('featureExtAck', token => {\n      this.dispatchEvent('featureExtAck', token);\n    });\n    tokenStreamParser.on('loginack', token => {\n      if (!token.tdsVersion) {\n        // unsupported TDS version\n        this.loginError = (0, _errors.ConnectionError)('Server responded with unknown TDS version.', 'ETDS');\n        this.loggedIn = false;\n        return;\n      }\n\n      if (!token.interface) {\n        // unsupported interface\n        this.loginError = (0, _errors.ConnectionError)('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n        this.loggedIn = false;\n        return;\n      } // use negotiated version\n\n\n      this.config.options.tdsVersion = token.tdsVersion;\n      this.loggedIn = true;\n    });\n    tokenStreamParser.on('routingChange', token => {\n      this.routingData = token.newValue;\n      this.dispatchEvent('routingChange');\n    });\n    tokenStreamParser.on('packetSizeChange', token => {\n      this.messageIo.packetSize(token.newValue);\n    }); // A new top-level transaction was started. This is not fired\n    // for nested transactions.\n\n    tokenStreamParser.on('beginTransaction', token => {\n      this.transactionDescriptors.push(token.newValue);\n      this.inTransaction = true;\n    }); // A top-level transaction was committed. This is not fired\n    // for nested transactions.\n\n    tokenStreamParser.on('commitTransaction', () => {\n      this.transactionDescriptors.length = 1;\n      this.inTransaction = false;\n    }); // A top-level transaction was rolled back. This is not fired\n    // for nested transactions. This is also fired if a batch\n    // aborting error happened that caused a rollback.\n\n    tokenStreamParser.on('rollbackTransaction', () => {\n      this.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n      this.inTransaction = false;\n      this.emit('rollbackTransaction');\n    });\n    tokenStreamParser.on('columnMetadata', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          if (this.config.options.useColumnNames) {\n            const columns = {};\n\n            for (let j = 0, len = token.columns.length; j < len; j++) {\n              const col = token.columns[j];\n\n              if (columns[col.colName] == null) {\n                columns[col.colName] = col;\n              }\n            }\n\n            request.emit('columnMetadata', columns);\n          } else {\n            request.emit('columnMetadata', token.columns);\n          }\n        }\n      } else {\n        this.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n        this.close();\n      }\n    });\n    tokenStreamParser.on('order', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('order', token.orderColumns);\n        }\n      } else {\n        this.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n        this.close();\n      }\n    });\n    tokenStreamParser.on('row', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          if (this.config.options.rowCollectionOnRequestCompletion) {\n            request.rows.push(token.columns);\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst.push(token.columns);\n          }\n\n          if (!(this.state === this.STATE.SENT_ATTENTION && request.paused)) {\n            request.emit('row', token.columns);\n          }\n        }\n      } else {\n        this.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n        this.close();\n      }\n    });\n    tokenStreamParser.on('returnStatus', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          // Keep value for passing in 'doneProc' event.\n          this.procReturnStatusValue = token.value;\n        }\n      }\n    });\n    tokenStreamParser.on('returnValue', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('returnValue', token.paramName, token.value, token.metadata);\n        }\n      }\n    });\n    tokenStreamParser.on('doneProc', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('doneProc', token.rowCount, token.more, this.procReturnStatusValue, request.rst);\n          this.procReturnStatusValue = undefined;\n\n          if (token.rowCount !== undefined) {\n            request.rowCount += token.rowCount;\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst = [];\n          }\n        }\n      }\n    });\n    tokenStreamParser.on('doneInProc', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('doneInProc', token.rowCount, token.more, request.rst);\n\n          if (token.rowCount !== undefined) {\n            request.rowCount += token.rowCount;\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst = [];\n          }\n        }\n      }\n    });\n    tokenStreamParser.on('done', token => {\n      const request = this.request;\n\n      if (request) {\n        if (token.attention) {\n          this.dispatchEvent('attention');\n        }\n\n        if (request.canceled) {\n          // If we received a `DONE` token with `DONE_ERROR`, but no previous `ERROR` token,\n          // We assume this is the indication that an in-flight request was canceled.\n          if (token.sqlError && !request.error) {\n            this.clearCancelTimer();\n            request.error = (0, _errors.RequestError)('Canceled.', 'ECANCEL');\n          }\n        } else {\n          if (token.sqlError && !request.error) {\n            // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n            request.error = (0, _errors.RequestError)('An unknown error has occurred.', 'UNKNOWN');\n          }\n\n          request.emit('done', token.rowCount, token.more, request.rst);\n\n          if (token.rowCount !== undefined) {\n            request.rowCount += token.rowCount;\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst = [];\n          }\n        }\n      }\n    });\n    tokenStreamParser.on('endOfMessage', () => {\n      // EOM pseudo token received\n      if (this.state === this.STATE.SENT_CLIENT_REQUEST) {\n        this.dispatchEvent('endOfMessageMarkerReceived');\n      }\n    });\n    tokenStreamParser.on('resetConnection', () => {\n      this.emit('resetConnection');\n    });\n    tokenStreamParser.on('drain', () => {\n      // Bridge the release of backpressure from the token stream parser\n      // transform to the packet stream transform.\n      this.messageIo.resume();\n    });\n    return tokenStreamParser;\n  }\n\n  connectOnPort(port, multiSubnetFailover, signal) {\n    const connectOpts = {\n      host: this.routingData ? this.routingData.server : this.config.server,\n      port: this.routingData ? this.routingData.port : port,\n      localAddress: this.config.options.localAddress\n    };\n    new _connector.Connector(connectOpts, signal, multiSubnetFailover).execute((err, socket) => {\n      if (err) {\n        if (err.name === 'AbortError') {\n          return;\n        }\n\n        return this.socketError(err);\n      }\n\n      socket = socket;\n      socket.on('error', error => {\n        this.socketError(error);\n      });\n      socket.on('close', () => {\n        this.socketClose();\n      });\n      socket.on('end', () => {\n        this.socketEnd();\n      });\n      socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n      this.messageIo = new _messageIo.default(socket, this.config.options.packetSize, this.debug);\n      this.messageIo.on('data', data => {\n        this.dispatchEvent('data', data);\n      });\n      this.messageIo.on('message', () => {\n        this.dispatchEvent('message');\n      });\n      this.messageIo.on('secure', cleartext => {\n        this.emit('secure', cleartext);\n      });\n      this.messageIo.on('error', error => {\n        this.socketError(error);\n      });\n      this.socket = socket;\n      this.socketConnect();\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  closeConnection() {\n    if (this.socket) {\n      this.socket.destroy();\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  createConnectTimer() {\n    const controller = new _nodeAbortController.default();\n    this.connectTimer = setTimeout(() => {\n      controller.abort();\n      this.connectTimeout();\n    }, this.config.options.connectTimeout);\n    return controller.signal;\n  }\n  /**\n   * @private\n   */\n\n\n  createCancelTimer() {\n    this.clearCancelTimer();\n    const timeout = this.config.options.cancelTimeout;\n\n    if (timeout > 0) {\n      this.cancelTimer = setTimeout(() => {\n        this.cancelTimeout();\n      }, timeout);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  createRequestTimer() {\n    this.clearRequestTimer(); // release old timer, just to be safe\n\n    const request = this.request;\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n\n    if (timeout) {\n      this.requestTimer = setTimeout(() => {\n        this.requestTimeout();\n      }, timeout);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  createRetryTimer() {\n    this.clearRetryTimer();\n    this.retryTimer = setTimeout(() => {\n      this.retryTimeout();\n    }, this.config.options.connectionRetryInterval);\n  }\n  /**\n   * @private\n   */\n\n\n  connectTimeout() {\n    const message = `Failed to connect to ${this.config.server}${this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`} in ${this.config.options.connectTimeout}ms`;\n    this.debug.log(message);\n    this.emit('connect', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\n    this.connectTimer = undefined;\n    this.dispatchEvent('connectTimeout');\n  }\n  /**\n   * @private\n   */\n\n\n  cancelTimeout() {\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\n    this.debug.log(message);\n    this.dispatchEvent('socketError', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\n  }\n  /**\n   * @private\n   */\n\n\n  requestTimeout() {\n    this.requestTimer = undefined;\n    const request = this.request;\n    request.cancel();\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n    request.error = (0, _errors.RequestError)(message, 'ETIMEOUT');\n  }\n  /**\n   * @private\n   */\n\n\n  retryTimeout() {\n    this.retryTimer = undefined;\n    this.emit('retry');\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n  /**\n   * @private\n   */\n\n\n  clearConnectTimer() {\n    if (this.connectTimer) {\n      clearTimeout(this.connectTimer);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  clearCancelTimer() {\n    if (this.cancelTimer) {\n      clearTimeout(this.cancelTimer);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  clearRequestTimer() {\n    if (this.requestTimer) {\n      clearTimeout(this.requestTimer);\n      this.requestTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  clearRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  transitionTo(newState) {\n    if (this.state === newState) {\n      this.debug.log('State is already ' + newState.name);\n      return;\n    }\n\n    if (this.state && this.state.exit) {\n      this.state.exit.call(this, newState);\n    }\n\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n    this.state = newState;\n\n    if (this.state.enter) {\n      this.state.enter.apply(this);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  getEventHandler(eventName) {\n    const handler = this.state.events[eventName];\n\n    if (!handler) {\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\n    }\n\n    return handler;\n  }\n  /**\n   * @private\n   */\n\n\n  dispatchEvent(eventName, ...args) {\n    const handler = this.state.events[eventName];\n\n    if (handler) {\n      handler.apply(this, args);\n    } else {\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\n      this.close();\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  socketError(error) {\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n      const message = `Failed to connect to ${this.config.server}:${this.config.options.port} - ${error.message}`;\n      this.debug.log(message);\n      this.emit('connect', (0, _errors.ConnectionError)(message, 'ESOCKET'));\n    } else {\n      const message = `Connection lost - ${error.message}`;\n      this.debug.log(message);\n      this.emit('error', (0, _errors.ConnectionError)(message, 'ESOCKET'));\n    }\n\n    this.dispatchEvent('socketError', error);\n  }\n  /**\n   * @private\n   */\n\n\n  socketConnect() {\n    this.closed = false;\n    this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n    this.dispatchEvent('socketConnect');\n  }\n  /**\n   * @private\n   */\n\n\n  socketEnd() {\n    this.debug.log('socket ended');\n\n    if (this.state !== this.STATE.FINAL) {\n      const error = new Error('socket hang up');\n      error.code = 'ECONNRESET';\n      this.socketError(error);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  socketClose() {\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n\n    if (this.state === this.STATE.REROUTING) {\n      this.debug.log('Rerouting to ' + this.routingData.server + ':' + this.routingData.port);\n      this.dispatchEvent('reconnect');\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n      this.dispatchEvent('retry');\n    } else {\n      this.transitionTo(this.STATE.FINAL);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  sendPreLogin() {\n    const payload = new _preloginPayload.default({\n      encrypt: this.config.options.encrypt\n    });\n    this.messageIo.sendMessage(_packet.TYPE.PRELOGIN, payload.data);\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  emptyMessageBuffer() {\n    this.messageBuffer = Buffer.alloc(0);\n  }\n  /**\n   * @private\n   */\n\n\n  addToMessageBuffer(data) {\n    this.messageBuffer = Buffer.concat([this.messageBuffer, data]);\n  }\n  /**\n   * @private\n   */\n\n\n  sendLogin7Packet() {\n    const payload = new _login7Payload.default({\n      tdsVersion: _tdsVersions.versions[this.config.options.tdsVersion],\n      packetSize: this.config.options.packetSize,\n      clientProgVer: 0,\n      clientPid: process.pid,\n      connectionId: 0,\n      clientTimeZone: new Date().getTimezoneOffset(),\n      clientLcid: 0x00000409\n    });\n    const {\n      authentication\n    } = this.config;\n\n    switch (authentication.type) {\n      case 'azure-active-directory-password':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'default'\n        };\n        break;\n\n      case 'azure-active-directory-access-token':\n        payload.fedAuth = {\n          type: 'SECURITYTOKEN',\n          echo: this.fedAuthRequired,\n          fedAuthToken: authentication.options.token\n        };\n        break;\n\n      case 'azure-active-directory-msi-vm':\n      case 'azure-active-directory-msi-app-service':\n      case 'azure-active-directory-service-principal-secret':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'integrated'\n        };\n        break;\n\n      case 'ntlm':\n        payload.sspi = (0, _ntlm.createNTLMRequest)({\n          domain: authentication.options.domain\n        });\n        break;\n\n      default:\n        payload.userName = authentication.options.userName;\n        payload.password = authentication.options.password;\n    }\n\n    payload.hostname = this.config.options.workstationId || _os.default.hostname();\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n    payload.appName = this.config.options.appName || 'Tedious';\n    payload.libraryName = _library.name;\n    payload.language = this.config.options.language;\n    payload.database = this.config.options.database;\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n    this.routingData = undefined;\n    this.messageIo.sendMessage(_packet.TYPE.LOGIN7, payload.toBuffer());\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  sendFedAuthTokenMessage(token) {\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\n    const data = Buffer.alloc(8 + accessTokenLen);\n    let offset = 0;\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n    offset = data.writeUInt32LE(accessTokenLen, offset);\n    data.write(token, offset, 'ucs2');\n    this.messageIo.sendMessage(_packet.TYPE.FEDAUTH_TOKEN, data); // sent the fedAuth token message, the rest is similar to standard login 7\n\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n  }\n  /**\n   * Returns false to apply backpressure.\n   *\n   * @private\n   */\n\n\n  sendDataToTokenStreamParser(data) {\n    return this.tokenStreamParser.addBuffer(data);\n  }\n  /**\n   * This is an internal method that is called from [[Request.pause]].\n   * It has to check whether the passed Request object represents the currently\n   * active request, because the application might have called [[Request.pause]]\n   * on an old inactive Request object.\n   *\n   * @private\n   */\n\n\n  pauseRequest(request) {\n    if (this.isRequestActive(request)) {\n      this.tokenStreamParser.pause();\n    }\n  }\n  /**\n   * This is an internal method that is called from [[Request.resume]].\n   *\n   * @private\n   */\n\n\n  resumeRequest(request) {\n    if (this.isRequestActive(request)) {\n      this.tokenStreamParser.resume();\n    }\n  }\n  /**\n   * Returns true if the passed request is the currently active request of the connection.\n   *\n   * @private\n   */\n\n\n  isRequestActive(request) {\n    return request === this.request && this.state === this.STATE.SENT_CLIENT_REQUEST;\n  }\n  /**\n   * @private\n   */\n\n\n  sendInitialSql() {\n    const payload = new _sqlbatchPayload.default(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n    const message = new _message.default({\n      type: _packet.TYPE.SQL_BATCH\n    });\n    this.messageIo.outgoingMessageStream.write(message);\n\n    _readableStream.Readable.from(payload).pipe(message);\n  }\n  /**\n   * @private\n   */\n\n\n  getInitialSql() {\n    const options = [];\n\n    if (this.config.options.enableAnsiNull === true) {\n      options.push('set ansi_nulls on');\n    } else if (this.config.options.enableAnsiNull === false) {\n      options.push('set ansi_nulls off');\n    }\n\n    if (this.config.options.enableAnsiNullDefault === true) {\n      options.push('set ansi_null_dflt_on on');\n    } else if (this.config.options.enableAnsiNullDefault === false) {\n      options.push('set ansi_null_dflt_on off');\n    }\n\n    if (this.config.options.enableAnsiPadding === true) {\n      options.push('set ansi_padding on');\n    } else if (this.config.options.enableAnsiPadding === false) {\n      options.push('set ansi_padding off');\n    }\n\n    if (this.config.options.enableAnsiWarnings === true) {\n      options.push('set ansi_warnings on');\n    } else if (this.config.options.enableAnsiWarnings === false) {\n      options.push('set ansi_warnings off');\n    }\n\n    if (this.config.options.enableArithAbort === true) {\n      options.push('set arithabort on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set arithabort off');\n    }\n\n    if (this.config.options.enableConcatNullYieldsNull === true) {\n      options.push('set concat_null_yields_null on');\n    } else if (this.config.options.enableConcatNullYieldsNull === false) {\n      options.push('set concat_null_yields_null off');\n    }\n\n    if (this.config.options.enableCursorCloseOnCommit === true) {\n      options.push('set cursor_close_on_commit on');\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\n      options.push('set cursor_close_on_commit off');\n    }\n\n    if (this.config.options.datefirst !== null) {\n      options.push(`set datefirst ${this.config.options.datefirst}`);\n    }\n\n    if (this.config.options.dateFormat !== null) {\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\n    }\n\n    if (this.config.options.enableImplicitTransactions === true) {\n      options.push('set implicit_transactions on');\n    } else if (this.config.options.enableImplicitTransactions === false) {\n      options.push('set implicit_transactions off');\n    }\n\n    if (this.config.options.language !== null) {\n      options.push(`set language ${this.config.options.language}`);\n    }\n\n    if (this.config.options.enableNumericRoundabort === true) {\n      options.push('set numeric_roundabort on');\n    } else if (this.config.options.enableNumericRoundabort === false) {\n      options.push('set numeric_roundabort off');\n    }\n\n    if (this.config.options.enableQuotedIdentifier === true) {\n      options.push('set quoted_identifier on');\n    } else if (this.config.options.enableQuotedIdentifier === false) {\n      options.push('set quoted_identifier off');\n    }\n\n    if (this.config.options.textsize !== null) {\n      options.push(`set textsize ${this.config.options.textsize}`);\n    }\n\n    if (this.config.options.connectionIsolationLevel !== null) {\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\n    }\n\n    if (this.config.options.abortTransactionOnError === true) {\n      options.push('set xact_abort on');\n    } else if (this.config.options.abortTransactionOnError === false) {\n      options.push('set xact_abort off');\n    }\n\n    return options.join('\\n');\n  }\n  /**\n   * @private\n   */\n\n\n  processedInitialSql() {\n    this.clearConnectTimer();\n    this.emit('connect');\n  }\n  /**\n   * Execute the SQL batch represented by [[Request]].\n   * There is no param support, and unlike [[Request.execSql]],\n   * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\n   *\n   * In almost all cases, [[Request.execSql]] will be a better choice.\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n\n\n  execSqlBatch(request) {\n    this.makeRequest(request, _packet.TYPE.SQL_BATCH, new _sqlbatchPayload.default(request.sqlTextOrProcedure, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\n   *  Execute the SQL represented by [[Request]].\n   *\n   * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\n   * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\n   * for the first execution. This may also result in SQL server treating the request like a stored procedure\n   * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\n   * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\n   *\n   * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\n   * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\n   * See also [issue #24](https://github.com/pekim/tedious/issues/24)\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n\n\n  execSql(request) {\n    request.transformIntoExecuteSqlRpc();\n    const error = request.error;\n\n    if (error != null) {\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\n   * Creates a new BulkLoad instance.\n   *\n   * @param table The name of the table to bulk-insert into.\n   * @param options A set of bulk load options.\n   */\n\n\n  newBulkLoad(table, callbackOrOptions, callback) {\n    let options;\n\n    if (callback === undefined) {\n      callback = callbackOrOptions;\n      options = {};\n    } else {\n      options = callbackOrOptions;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('\"options\" argument must be an object');\n    }\n\n    return new _bulkLoad.default(table, this.config.options, options, callback);\n  }\n  /**\n   * Execute the SQL batch represented by [[Request]] .\n   * There is no param support, and unlike [[execSql]],\n   * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\n   *\n   * In almost all cases, [[execSql]] will be a better choice.\n   *\n   * @param bulkLoad A previously prepared [[Request]] .\n   */\n\n\n  execBulkLoad(bulkLoad) {\n    bulkLoad.executionStarted = true;\n    const request = new _request.default(bulkLoad.getBulkInsertSql(), error => {\n      if (error) {\n        if (error.code === 'UNKNOWN') {\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n        }\n\n        bulkLoad.error = error;\n        bulkLoad.callback(error);\n        return;\n      }\n\n      this.makeRequest(bulkLoad, _packet.TYPE.BULK_LOAD);\n    });\n    bulkLoad.once('cancel', () => {\n      request.cancel();\n    });\n    this.execSqlBatch(request);\n  }\n  /**\n   * Prepare the SQL represented by the request.\n   *\n   * The request can then be used in subsequent calls to\n   * [[execute]] and [[unprepare]]\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type. Parameter values are ignored.\n   */\n\n\n  prepare(request) {\n    request.transformIntoPrepareRpc();\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\n   * Release the SQL Server resources associated with a previously prepared request.\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type.\n   *   Parameter values are ignored.\n   */\n\n\n  unprepare(request) {\n    request.transformIntoUnprepareRpc();\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\n   * Execute previously prepared SQL, using the supplied parameters.\n   *\n   * @param request A previously prepared [[Request]].\n   * @param parameters  An object whose names correspond to the names of\n   *   parameters that were added to the [[Request]] before it was prepared.\n   *   The object's values are passed as the parameters' values when the\n   *   request is executed.\n   */\n\n\n  execute(request, parameters) {\n    request.transformIntoExecuteRpc(parameters);\n    const error = request.error;\n\n    if (error != null) {\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\n   * Call a stored procedure represented by [[Request]].\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n\n\n  callProcedure(request) {\n    request.validateParameters();\n    const error = request.error;\n\n    if (error != null) {\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\n   * Start a transaction.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`\n   *   is present.\n   * @param isolationLevel The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n\n\n  beginTransaction(callback, name = '', isolationLevel = this.config.options.isolationLevel) {\n    (0, _transaction.assertValidIsolationLevel)(isolationLevel, 'isolationLevel');\n    const transaction = new _transaction.Transaction(name, isolationLevel);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SET TRANSACTION ISOLATION LEVEL ' + transaction.isolationLevelToTSQL() + ';BEGIN TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n\n        if (this.transactionDepth === 1) {\n          this.inTransaction = true;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, err => {\n      return callback(err, this.currentTransactionDescriptor());\n    });\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Commit a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\n   */\n\n\n  commitTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('COMMIT TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Rollback a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n\n\n  rollbackTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('ROLLBACK TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Set a savepoint within a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\\\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n\n\n  saveTransaction(callback, name) {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SAVE TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Run the given callback after starting a transaction, and commit or\n   * rollback the transaction afterwards.\n   *\n   * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\n   * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\n   * use of database transactions and automatically handle transaction nesting.\n   *\n   * @param cb\n   * @param isolationLevel\n   *   The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n\n\n  transaction(cb, isolationLevel) {\n    if (typeof cb !== 'function') {\n      throw new TypeError('`cb` must be a function');\n    }\n\n    const useSavepoint = this.inTransaction;\n\n    const name = '_tedious_' + _crypto.default.randomBytes(10).toString('hex');\n\n    const txDone = (err, done, ...args) => {\n      if (err) {\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\n          this.rollbackTransaction(txErr => {\n            done(txErr || err, ...args);\n          }, name);\n        } else {\n          done(err, ...args);\n        }\n      } else if (useSavepoint) {\n        if (this.config.options.tdsVersion < '7_2') {\n          this.transactionDepth--;\n        }\n\n        done(null, ...args);\n      } else {\n        this.commitTransaction(txErr => {\n          done(txErr, ...args);\n        }, name);\n      }\n    };\n\n    if (useSavepoint) {\n      return this.saveTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n\n        if (isolationLevel) {\n          return this.execSqlBatch(new _request.default('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), err => {\n            return cb(err, txDone);\n          }));\n        } else {\n          return cb(null, txDone);\n        }\n      }, name);\n    } else {\n      return this.beginTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n\n        return cb(null, txDone);\n      }, name, isolationLevel);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  makeRequest(request, packetType, payload) {\n    if (this.state !== this.STATE.LOGGED_IN) {\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n      this.debug.log(message);\n      request.callback((0, _errors.RequestError)(message, 'EINVALIDSTATE'));\n    } else if (request.canceled) {\n      process.nextTick(() => {\n        request.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n      });\n    } else {\n      if (packetType === _packet.TYPE.SQL_BATCH) {\n        this.isSqlBatch = true;\n      } else {\n        this.isSqlBatch = false;\n      }\n\n      this.request = request;\n      request.connection = this;\n      request.rowCount = 0;\n      request.rows = [];\n      request.rst = [];\n      let message;\n      request.once('cancel', () => {\n        // There's three ways to handle request cancelation:\n        if (!this.isRequestActive(request)) {\n          // Cancel was called on a request that is no longer active on this connection\n          return;\n        } else if (message.writable) {\n          // - if the message is still writable, we'll set the ignore bit\n          //   and end the message.\n          message.ignore = true;\n          message.end();\n        } else {\n          // - but if the message has been ended (and thus has been fully sent off),\n          //   we need to send an `ATTENTION` message to the server\n          this.messageIo.sendMessage(_packet.TYPE.ATTENTION);\n          this.transitionTo(this.STATE.SENT_ATTENTION);\n        }\n\n        this.clearRequestTimer();\n        this.createCancelTimer();\n      });\n      this.createRequestTimer();\n\n      if (request instanceof _bulkLoad.default) {\n        message = request.getMessageStream(); // If the bulkload was not put into streaming mode by the user,\n        // we end the rowToPacketTransform here for them.\n        //\n        // If it was put into streaming mode, it's the user's responsibility\n        // to end the stream.\n\n        if (!request.streamingMode) {\n          request.rowToPacketTransform.end();\n        }\n\n        this.messageIo.outgoingMessageStream.write(message);\n        this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n      } else {\n        message = new _message.default({\n          type: packetType,\n          resetConnection: this.resetConnectionOnNextRequest\n        });\n        this.messageIo.outgoingMessageStream.write(message);\n        this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n        message.once('finish', () => {\n          this.resetConnectionOnNextRequest = false;\n          this.debug.payload(function () {\n            return payload.toString('  ');\n          });\n\n          if (request.paused) {\n            // Request.pause() has been called before the request was started\n            this.pauseRequest(request);\n          }\n        });\n\n        _readableStream.Readable.from(payload).pipe(message);\n      }\n    }\n  }\n  /**\n   * Cancel currently executed request.\n   */\n\n\n  cancel() {\n    if (!this.request) {\n      return false;\n    }\n\n    if (this.request.canceled) {\n      return false;\n    }\n\n    this.request.cancel();\n    return true;\n  }\n  /**\n   * Reset the connection to its initial state.\n   * Can be useful for connection pool implementations.\n   *\n   * @param callback\n   */\n\n\n  reset(callback) {\n    const request = new _request.default(this.getInitialSql(), err => {\n      if (this.config.options.tdsVersion < '7_2') {\n        this.inTransaction = false;\n      }\n\n      callback(err);\n    });\n    this.resetConnectionOnNextRequest = true;\n    this.execSqlBatch(request);\n  }\n  /**\n   * @private\n   */\n\n\n  currentTransactionDescriptor() {\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n  }\n  /**\n   * @private\n   */\n\n\n  getIsolationLevelText(isolationLevel) {\n    switch (isolationLevel) {\n      case _transaction.ISOLATION_LEVEL.READ_UNCOMMITTED:\n        return 'read uncommitted';\n\n      case _transaction.ISOLATION_LEVEL.REPEATABLE_READ:\n        return 'repeatable read';\n\n      case _transaction.ISOLATION_LEVEL.SERIALIZABLE:\n        return 'serializable';\n\n      case _transaction.ISOLATION_LEVEL.SNAPSHOT:\n        return 'snapshot';\n\n      default:\n        return 'read committed';\n    }\n  }\n\n}\n\nvar _default = Connection;\nexports.default = _default;\nmodule.exports = Connection;\nconst authenticationCache = new _adalNode.MemoryCache();\nConnection.prototype.STATE = {\n  INITIALIZED: {\n    name: 'Initialized',\n    events: {}\n  },\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function () {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      socketConnect: function () {\n        this.sendPreLogin();\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function () {\n      this.emptyMessageBuffer();\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (data) {\n        this.addToMessageBuffer(data);\n      },\n      message: function () {\n        const preloginPayload = new _preloginPayload.default(this.messageBuffer);\n        this.debug.payload(function () {\n          return preloginPayload.toString('  ');\n        });\n\n        if (preloginPayload.fedAuthRequired === 1) {\n          this.fedAuthRequired = true;\n        }\n\n        if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\n          var _this$routingData$ser, _this$routingData;\n\n          if (!this.config.options.encrypt) {\n            this.emit('connect', (0, _errors.ConnectionError)(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n            return this.close();\n          }\n\n          this.messageIo.startTls(this.secureContext, (_this$routingData$ser = (_this$routingData = this.routingData) === null || _this$routingData === void 0 ? void 0 : _this$routingData.server) !== null && _this$routingData$ser !== void 0 ? _this$routingData$ser : this.config.server, this.config.options.trustServerCertificate);\n          this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\n        } else {\n          this.sendLogin7Packet();\n          const {\n            authentication\n          } = this.config;\n\n          if (authentication.type === 'ntlm') {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n          } else {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n          }\n        }\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function () {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function () {},\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function () {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function () {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function () {},\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function () {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (data) {\n        this.messageIo.tlsHandshakeData(data);\n      },\n      message: function () {\n        if (this.messageIo.tlsNegotiationComplete) {\n          this.sendLogin7Packet();\n          const {\n            authentication\n          } = this.config;\n\n          if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n          } else if (authentication.type === 'ntlm') {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n          } else {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n          }\n        }\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (data) {\n        this.sendDataToTokenStreamParser(data);\n      },\n      routingChange: function () {\n        this.transitionTo(this.STATE.REROUTING);\n      },\n      featureExtAck: function (token) {\n        const {\n          authentication\n        } = this.config;\n\n        if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\n          if (token.fedAuth === undefined) {\n            this.loginError = (0, _errors.ConnectionError)('Did not receive Active Directory authentication acknowledgement');\n            this.loggedIn = false;\n          } else if (token.fedAuth.length !== 0) {\n            this.loginError = (0, _errors.ConnectionError)(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\n            this.loggedIn = false;\n          }\n        } else if (token.fedAuth === undefined) {\n          this.loginError = (0, _errors.ConnectionError)('Received acknowledgement for unknown feature');\n          this.loggedIn = false;\n        } else {\n          this.loginError = (0, _errors.ConnectionError)('Did not request Active Directory authentication, but received the acknowledgment');\n          this.loggedIn = false;\n        }\n      },\n      message: function () {\n        if (this.loggedIn) {\n          this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n        } else if (this.loginError) {\n          if (this.loginError.isTransient) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (data) {\n        this.sendDataToTokenStreamParser(data);\n      },\n      message: function () {\n        if (this.ntlmpacket) {\n          const authentication = this.config.authentication;\n          const payload = new _ntlmPayload.default({\n            domain: authentication.options.domain,\n            userName: authentication.options.userName,\n            password: authentication.options.password,\n            ntlmpacket: this.ntlmpacket\n          });\n          this.messageIo.sendMessage(_packet.TYPE.NTLMAUTH_PKT, payload.data);\n          this.debug.payload(function () {\n            return payload.toString('  ');\n          });\n          this.ntlmpacket = undefined;\n        } else if (this.loggedIn) {\n          this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n        } else if (this.loginError) {\n          if (this.loginError.isTransient) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (data) {\n        this.sendDataToTokenStreamParser(data);\n      },\n      routingChange: function () {\n        this.transitionTo(this.STATE.REROUTING);\n      },\n      fedAuthInfo: function (token) {\n        this.fedAuthInfoToken = token;\n      },\n      message: function () {\n        const fedAuthInfoToken = this.fedAuthInfoToken;\n\n        if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n          const authentication = this.config.authentication;\n\n          const getToken = callback => {\n            const getTokenFromCredentials = (err, credentials) => {\n              if (err) {\n                return callback(err);\n              }\n\n              credentials.getToken().then(tokenResponse => {\n                callback(null, tokenResponse.accessToken);\n              }, callback);\n            };\n\n            if (authentication.type === 'azure-active-directory-password') {\n              var _authentication$optio;\n\n              const credentials = new _msRestNodeauth.UserTokenCredentials('7f98cb04-cd1e-40df-9140-3bf7e2cea4db', (_authentication$optio = authentication.options.domain) !== null && _authentication$optio !== void 0 ? _authentication$optio : 'common', authentication.options.userName, authentication.options.password, fedAuthInfoToken.spn, undefined, // environment\n              authenticationCache);\n              getTokenFromCredentials(undefined, credentials);\n            } else if (authentication.type === 'azure-active-directory-msi-vm') {\n              (0, _msRestNodeauth.loginWithVmMSI)({\n                clientId: authentication.options.clientId,\n                msiEndpoint: authentication.options.msiEndpoint,\n                resource: fedAuthInfoToken.spn\n              }, getTokenFromCredentials);\n            } else if (authentication.type === 'azure-active-directory-msi-app-service') {\n              (0, _msRestNodeauth.loginWithAppServiceMSI)({\n                msiEndpoint: authentication.options.msiEndpoint,\n                msiSecret: authentication.options.msiSecret,\n                resource: fedAuthInfoToken.spn,\n                clientId: authentication.options.clientId\n              }, getTokenFromCredentials);\n            } else if (authentication.type === 'azure-active-directory-service-principal-secret') {\n              const credentials = new _msRestNodeauth.ApplicationTokenCredentials(authentication.options.clientId, authentication.options.tenantId, // domain\n              authentication.options.clientSecret, fedAuthInfoToken.spn, undefined, // environment\n              authenticationCache);\n              getTokenFromCredentials(undefined, credentials);\n            }\n          };\n\n          getToken((err, token) => {\n            if (err) {\n              this.loginError = (0, _errors.ConnectionError)('Security token could not be authenticated or authorized.', 'EFEDAUTH');\n              this.emit('connect', this.loginError);\n              this.transitionTo(this.STATE.FINAL);\n              return;\n            }\n\n            this.sendFedAuthTokenMessage(token);\n          });\n        } else if (this.loginError) {\n          if (this.loginError.isTransient) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function () {\n      this.sendInitialSql();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (data) {\n        this.sendDataToTokenStreamParser(data);\n      },\n      message: function () {\n        this.transitionTo(this.STATE.LOGGED_IN);\n        this.processedInitialSql();\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    exit: function (nextState) {\n      this.clearRequestTimer();\n\n      if (nextState !== this.STATE.FINAL) {\n        this.tokenStreamParser.resume();\n      }\n    },\n    events: {\n      socketError: function (err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      },\n      data: function (data) {\n        this.clearRequestTimer(); // request timer is stopped on first data package\n\n        const ret = this.sendDataToTokenStreamParser(data);\n\n        if (ret === false) {\n          // Bridge backpressure from the token stream parser transform to the\n          // packet stream transform.\n          this.messageIo.pause();\n        }\n      },\n      message: function () {\n        // We have to channel the 'message' (EOM) event through the token stream\n        // parser transform, to keep it in line with the flow of the tokens, when\n        // the incoming data flow is paused and resumed.\n        this.tokenStreamParser.addEndOfMessageMarker();\n      },\n      endOfMessageMarkerReceived: function () {\n        this.transitionTo(this.STATE.LOGGED_IN);\n        const sqlRequest = this.request;\n        this.request = undefined;\n\n        if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\n          this.inTransaction = false;\n        }\n\n        sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function () {\n      this.attentionReceived = false;\n    },\n    events: {\n      socketError: function (err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      },\n      data: function (data) {\n        this.sendDataToTokenStreamParser(data);\n      },\n      attention: function () {\n        this.attentionReceived = true;\n      },\n      message: function () {\n        // 3.2.5.7 Sent Attention State\n        // Discard any data contained in the response, until we receive the attention response\n        if (this.attentionReceived) {\n          this.clearCancelTimer();\n          const sqlRequest = this.request;\n          this.request = undefined;\n          this.transitionTo(this.STATE.LOGGED_IN);\n\n          if (sqlRequest.error && sqlRequest.error instanceof _errors.RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n            sqlRequest.callback(sqlRequest.error);\n          } else {\n            sqlRequest.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n          }\n        }\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function () {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      loginFailed: function () {// Do nothing. The connection was probably closed by the client code.\n      },\n      connectTimeout: function () {// Do nothing, as the timer should be cleaned up.\n      },\n      message: function () {// Do nothing\n      },\n      socketError: function () {// Do nothing\n      }\n    }\n  }\n};"]},"metadata":{},"sourceType":"script"}