{"ast":null,"code":"/*\n * @copyright\n * Copyright Â© Microsoft Open Technologies, Inc.\n *\n * All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http: *www.apache.org/licenses/LICENSE-2.0\n *\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\n *\n * See the Apache License, Version 2.0 for the specific language\n * governing permissions and limitations under the License.\n */\n'use strict';\n\nvar request = require('request');\n\nvar uuid = require('uuid');\n\nvar Logger = require('./log').Logger;\n\nvar util = require('./util');\n\nvar WSTrustResponse = require('./wstrust-response');\n\nvar WSTrustVersion = require('./constants').WSTrustVersion;\n\nvar USERNAME_PLACEHOLDER = '{UsernamePlaceHolder}';\nvar PASSWORD_PLACEHOLDER = '{PasswordPlaceHolder}';\n/**\n * Creates a new instance of WSTrustRequest\n * @constructor\n * @private\n * @param {object} callContext Contains any context information that applies to the request.\n * @param {string}     wstrustEndpointUrl    An STS WS-Trust soap endpoint.\n * @param {string}     appliesTo             A URI that identifies a service for which the a token is to be obtained.\n */\n\nfunction WSTrustRequest(callContext, wstrustEndpointUrl, appliesTo, wstrustEndpointVersion) {\n  this._log = new Logger('WSTrustRequest', callContext._logContext);\n  this._callContext = callContext;\n  this._wstrustEndpointUrl = wstrustEndpointUrl;\n  this._appliesTo = appliesTo;\n  this._wstrustEndpointVersion = wstrustEndpointVersion;\n}\n/**\n* Given a Date object adds the minutes parameter and returns a new Date object.\n* @private\n* @static\n* @memberOf WSTrustRequest\n* @param {Date}     date      A Date object.\n* @param {Number}   minutes   The number of minutes to add to the date parameter.\n* @returns {Date}             Returns a Date object.\n*/\n\n\nfunction _datePlusMinutes(date, minutes) {\n  var minutesInMilliSeconds = minutes * 60 * 1000;\n  var epochTime = date.getTime() + minutesInMilliSeconds;\n  return new Date(epochTime);\n}\n/**\n * Builds the soap security header for the RST message.\n * @private\n * @param {string}   username  A username\n * @param {string}   password  The passowrd that corresponds to the username parameter.\n * @returns {string}           A string that contains the soap security header.\n */\n\n\nWSTrustRequest.prototype._buildSecurityHeader = function () {\n  var timeNow = new Date();\n\n  var expireTime = _datePlusMinutes(timeNow, 10);\n\n  var timeNowString = timeNow.toISOString();\n  var expireTimeString = expireTime.toISOString();\n  var securityHeaderXml = '<wsse:Security s:mustUnderstand=\\'1\\' xmlns:wsse=\\'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\\'>\\\n    <wsu:Timestamp wsu:Id=\\'_0\\'>\\\n      <wsu:Created>' + timeNowString + '</wsu:Created>\\\n      <wsu:Expires>' + expireTimeString + '</wsu:Expires>\\\n    </wsu:Timestamp>\\\n    <wsse:UsernameToken wsu:Id=\\'ADALUsernameToken\\'>\\\n      <wsse:Username>' + USERNAME_PLACEHOLDER + '</wsse:Username>\\\n      <wsse:Password>' + PASSWORD_PLACEHOLDER + '</wsse:Password>\\\n    </wsse:UsernameToken>\\\n    </wsse:Security>';\n  return securityHeaderXml;\n};\n/**\n * Replaces the placeholders in the RST template with the actual username and password values.\n * @private\n * @param {string}   RSTTemplate  An RST with placeholders for username and password.\n * @param {string}   username     A username\n * @param {string}   password     The passowrd that corresponds to the username parameter.\n * @returns {string}              A string containing a complete RST soap message.\n */\n\n\nWSTrustRequest.prototype._populateRSTUsernamePassword = function (RSTTemplate, username, password) {\n  var RST = RSTTemplate.replace(USERNAME_PLACEHOLDER, username).replace(PASSWORD_PLACEHOLDER, this._populatedEscapedPassword(password));\n  return RST;\n};\n/**\n * Escape xml characters in password. \n * @private\n * @param {string} password The password to be excaped with xml charaters. \n */\n\n\nWSTrustRequest.prototype._populatedEscapedPassword = function (password) {\n  var escapedPassword = password;\n  return escapedPassword.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n};\n/**\n * Builds a WS-Trust RequestSecurityToken (RST) message using username password authentication.\n * @private\n * @param {string}   username  A username\n * @param {string}   password  The passowrd that corresponds to the username parameter.\n * @returns {string}           A string containing a complete RST soap message.\n */\n\n\nWSTrustRequest.prototype._buildRST = function (username, password) {\n  var messageID = uuid.v4(); // Create a template RST with placeholders for the username and password so the\n  // the RST can be logged without the sensitive information.\n\n  var schemaLocation = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';\n  var soapAction = 'http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue';\n  var rstTrustNamespace = 'http://docs.oasis-open.org/ws-sx/ws-trust/200512';\n  var keyType = 'http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer';\n  var requestType = 'http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue';\n\n  if (this._wstrustEndpointVersion === WSTrustVersion.WSTRUST2005) {\n    soapAction = 'http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue';\n    rstTrustNamespace = 'http://schemas.xmlsoap.org/ws/2005/02/trust';\n    keyType = 'http://schemas.xmlsoap.org/ws/2005/05/identity/NoProofKey';\n    requestType = 'http://schemas.xmlsoap.org/ws/2005/02/trust/Issue';\n  }\n\n  var RSTTemplate = '<s:Envelope xmlns:s=\\'http://www.w3.org/2003/05/soap-envelope\\' xmlns:wsa=\\'http://www.w3.org/2005/08/addressing\\' xmlns:wsu=\\'' + schemaLocation + '\\'>\\\n      <s:Header>\\\n        <wsa:Action s:mustUnderstand=\\'1\\'>' + soapAction + '</wsa:Action>\\\n        <wsa:messageID>urn:uuid:' + messageID + '</wsa:messageID>\\\n        <wsa:ReplyTo>\\\n          <wsa:Address>http://www.w3.org/2005/08/addressing/anonymous</wsa:Address>\\\n        </wsa:ReplyTo>\\\n        <wsa:To s:mustUnderstand=\\'1\\'>' + this._wstrustEndpointUrl + '</wsa:To>\\\n        ' + this._buildSecurityHeader() + '\\\n      </s:Header>\\\n      <s:Body>\\\n        <wst:RequestSecurityToken xmlns:wst=\\'' + rstTrustNamespace + '\\'>\\\n          <wsp:AppliesTo xmlns:wsp=\\'http://schemas.xmlsoap.org/ws/2004/09/policy\\'>\\\n            <wsa:EndpointReference>\\\n              <wsa:Address>' + this._appliesTo + '</wsa:Address>\\\n            </wsa:EndpointReference>\\\n          </wsp:AppliesTo>\\\n          <wst:KeyType>' + keyType + '</wst:KeyType>\\\n          <wst:RequestType>' + requestType + '</wst:RequestType>\\\n        </wst:RequestSecurityToken>\\\n      </s:Body>\\\n    </s:Envelope>';\n\n  this._log.verbose('Created RST: \\n' + RSTTemplate, true);\n\n  var RST = this._populateRSTUsernamePassword(RSTTemplate, username, password);\n\n  return RST;\n};\n/**\n * Handles the processing of a RSTR\n * @private\n * @param  {string}   body\n * @param  {WSTrustRequest.AcquireTokenCallback} callback\n */\n\n\nWSTrustRequest.prototype._handleRSTR = function (body, callback) {\n  var err;\n  var wstrustResponse = new WSTrustResponse(this._callContext, body, this._wstrustEndpointVersion);\n\n  try {\n    wstrustResponse.parse();\n  } catch (error) {\n    err = error;\n  }\n\n  callback(err, wstrustResponse);\n};\n/**\n * Performs a WS-Trust RequestSecurityToken request to obtain a federated token in exchange for a username password.\n * @param {string}   username  A username\n * @param {string}   password  The passowrd that corresponds to the username parameter.\n * @param {WSTrustRequest.AcquireTokenCallback} callback   Called once the federated token has been retrieved or on error.\n*/\n\n\nWSTrustRequest.prototype.acquireToken = function (username, password, callback) {\n  if (this._wstrustEndpointVersion === WSTrustVersion.UNDEFINED) {\n    var err = this._log.createError('Unsupported wstrust endpoint version. Current support version is wstrust2005 or wstrust13.');\n\n    callback(err);\n    return;\n  }\n\n  var self = this;\n\n  var RST = this._buildRST(username, password);\n\n  var soapAction = this._wstrustEndpointVersion === WSTrustVersion.WSTRUST2005 ? 'http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue' : 'http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue';\n  var options = util.createRequestOptions(this, {\n    headers: {\n      'Content-Type': 'application/soap+xml; charset=utf-8',\n      'SOAPAction': soapAction\n    },\n    body: RST\n  });\n\n  this._log.verbose('Sending RST to: ' + this._wstrustEndpointUrl, true);\n\n  request.post(this._wstrustEndpointUrl, options, util.createRequestHandler('WS-Trust RST', this._log, callback, function (response, body) {\n    self._handleRSTR(body, callback);\n  }));\n};\n/**\n* @callback AcquireTokenCallback\n* @memberOf WSTrustRequest\n* @param {Error} err   Contains an error object if acquireToken fails.\n* @param {WSTrustResponse} A successful response to the RST.\n*/\n\n\nmodule.exports = WSTrustRequest;","map":{"version":3,"sources":["D:/Bakery/Bakery_ReactjsSourceCode/node_modules/adal-node/lib/wstrust-request.js"],"names":["request","require","uuid","Logger","util","WSTrustResponse","WSTrustVersion","USERNAME_PLACEHOLDER","PASSWORD_PLACEHOLDER","WSTrustRequest","callContext","wstrustEndpointUrl","appliesTo","wstrustEndpointVersion","_log","_logContext","_callContext","_wstrustEndpointUrl","_appliesTo","_wstrustEndpointVersion","_datePlusMinutes","date","minutes","minutesInMilliSeconds","epochTime","getTime","Date","prototype","_buildSecurityHeader","timeNow","expireTime","timeNowString","toISOString","expireTimeString","securityHeaderXml","_populateRSTUsernamePassword","RSTTemplate","username","password","RST","replace","_populatedEscapedPassword","escapedPassword","_buildRST","messageID","v4","schemaLocation","soapAction","rstTrustNamespace","keyType","requestType","WSTRUST2005","verbose","_handleRSTR","body","callback","err","wstrustResponse","parse","error","acquireToken","UNDEFINED","createError","self","options","createRequestOptions","headers","post","createRequestHandler","response","module","exports"],"mappings":"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","sourcesContent":["/*\n * @copyright\n * Copyright Â© Microsoft Open Technologies, Inc.\n *\n * All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http: *www.apache.org/licenses/LICENSE-2.0\n *\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\n *\n * See the Apache License, Version 2.0 for the specific language\n * governing permissions and limitations under the License.\n */\n'use strict';\n\nvar request = require('request');\nvar uuid = require('uuid');\n\nvar Logger = require('./log').Logger;\nvar util = require('./util');\nvar WSTrustResponse = require('./wstrust-response');\nvar WSTrustVersion = require('./constants').WSTrustVersion;\n\nvar USERNAME_PLACEHOLDER = '{UsernamePlaceHolder}';\nvar PASSWORD_PLACEHOLDER = '{PasswordPlaceHolder}';\n\n/**\n * Creates a new instance of WSTrustRequest\n * @constructor\n * @private\n * @param {object} callContext Contains any context information that applies to the request.\n * @param {string}     wstrustEndpointUrl    An STS WS-Trust soap endpoint.\n * @param {string}     appliesTo             A URI that identifies a service for which the a token is to be obtained.\n */\nfunction WSTrustRequest(callContext, wstrustEndpointUrl, appliesTo, wstrustEndpointVersion) {\n  this._log = new Logger('WSTrustRequest', callContext._logContext);\n  this._callContext = callContext;\n  this._wstrustEndpointUrl = wstrustEndpointUrl;\n  this._appliesTo = appliesTo;\n  this._wstrustEndpointVersion = wstrustEndpointVersion;\n}\n\n/**\n* Given a Date object adds the minutes parameter and returns a new Date object.\n* @private\n* @static\n* @memberOf WSTrustRequest\n* @param {Date}     date      A Date object.\n* @param {Number}   minutes   The number of minutes to add to the date parameter.\n* @returns {Date}             Returns a Date object.\n*/\nfunction _datePlusMinutes(date, minutes) {\n  var minutesInMilliSeconds = minutes * 60 * 1000;\n  var epochTime = date.getTime() + minutesInMilliSeconds;\n  return new Date(epochTime);\n}\n\n/**\n * Builds the soap security header for the RST message.\n * @private\n * @param {string}   username  A username\n * @param {string}   password  The passowrd that corresponds to the username parameter.\n * @returns {string}           A string that contains the soap security header.\n */\nWSTrustRequest.prototype._buildSecurityHeader = function() {\n  var timeNow = new Date();\n  var expireTime = _datePlusMinutes(timeNow, 10);\n  var timeNowString = timeNow.toISOString();\n  var expireTimeString = expireTime.toISOString();\n\n  var securityHeaderXml = \n    '<wsse:Security s:mustUnderstand=\\'1\\' xmlns:wsse=\\'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\\'>\\\n    <wsu:Timestamp wsu:Id=\\'_0\\'>\\\n      <wsu:Created>' + timeNowString + '</wsu:Created>\\\n      <wsu:Expires>' + expireTimeString + '</wsu:Expires>\\\n    </wsu:Timestamp>\\\n    <wsse:UsernameToken wsu:Id=\\'ADALUsernameToken\\'>\\\n      <wsse:Username>' + USERNAME_PLACEHOLDER + '</wsse:Username>\\\n      <wsse:Password>' + PASSWORD_PLACEHOLDER + '</wsse:Password>\\\n    </wsse:UsernameToken>\\\n    </wsse:Security>';\n\n  return securityHeaderXml;\n};\n\n/**\n * Replaces the placeholders in the RST template with the actual username and password values.\n * @private\n * @param {string}   RSTTemplate  An RST with placeholders for username and password.\n * @param {string}   username     A username\n * @param {string}   password     The passowrd that corresponds to the username parameter.\n * @returns {string}              A string containing a complete RST soap message.\n */\n\nWSTrustRequest.prototype._populateRSTUsernamePassword = function(RSTTemplate, username, password) {\n  var RST = RSTTemplate.replace(USERNAME_PLACEHOLDER, username).replace(PASSWORD_PLACEHOLDER, this._populatedEscapedPassword(password));\n  return RST;\n};\n\n/**\n * Escape xml characters in password. \n * @private\n * @param {string} password The password to be excaped with xml charaters. \n */\nWSTrustRequest.prototype._populatedEscapedPassword = function (password) { \n    var escapedPassword = password;\n    return escapedPassword.replace(/&/g, '&amp;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&apos;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n}\n\n/**\n * Builds a WS-Trust RequestSecurityToken (RST) message using username password authentication.\n * @private\n * @param {string}   username  A username\n * @param {string}   password  The passowrd that corresponds to the username parameter.\n * @returns {string}           A string containing a complete RST soap message.\n */\nWSTrustRequest.prototype._buildRST = function(username, password) {\n  var messageID = uuid.v4();\n\n  // Create a template RST with placeholders for the username and password so the\n  // the RST can be logged without the sensitive information.\n  var schemaLocation = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';\n  var soapAction = 'http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue';\n  var rstTrustNamespace = 'http://docs.oasis-open.org/ws-sx/ws-trust/200512';\n  var keyType = 'http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer';\n  var requestType = 'http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue';\n\n  if (this._wstrustEndpointVersion === WSTrustVersion.WSTRUST2005) {\n    soapAction = 'http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue';\n    rstTrustNamespace = 'http://schemas.xmlsoap.org/ws/2005/02/trust';\n    keyType = 'http://schemas.xmlsoap.org/ws/2005/05/identity/NoProofKey';\n    requestType = 'http://schemas.xmlsoap.org/ws/2005/02/trust/Issue';  \n  }\n\n  var RSTTemplate =\n    '<s:Envelope xmlns:s=\\'http://www.w3.org/2003/05/soap-envelope\\' xmlns:wsa=\\'http://www.w3.org/2005/08/addressing\\' xmlns:wsu=\\'' + schemaLocation + '\\'>\\\n      <s:Header>\\\n        <wsa:Action s:mustUnderstand=\\'1\\'>' + soapAction + '</wsa:Action>\\\n        <wsa:messageID>urn:uuid:' + messageID + '</wsa:messageID>\\\n        <wsa:ReplyTo>\\\n          <wsa:Address>http://www.w3.org/2005/08/addressing/anonymous</wsa:Address>\\\n        </wsa:ReplyTo>\\\n        <wsa:To s:mustUnderstand=\\'1\\'>' + this._wstrustEndpointUrl + '</wsa:To>\\\n        ' + this._buildSecurityHeader() + '\\\n      </s:Header>\\\n      <s:Body>\\\n        <wst:RequestSecurityToken xmlns:wst=\\'' + rstTrustNamespace + '\\'>\\\n          <wsp:AppliesTo xmlns:wsp=\\'http://schemas.xmlsoap.org/ws/2004/09/policy\\'>\\\n            <wsa:EndpointReference>\\\n              <wsa:Address>' + this._appliesTo + '</wsa:Address>\\\n            </wsa:EndpointReference>\\\n          </wsp:AppliesTo>\\\n          <wst:KeyType>' + keyType + '</wst:KeyType>\\\n          <wst:RequestType>' + requestType + '</wst:RequestType>\\\n        </wst:RequestSecurityToken>\\\n      </s:Body>\\\n    </s:Envelope>';\n\n  this._log.verbose('Created RST: \\n' + RSTTemplate, true);\n\n  var RST = this._populateRSTUsernamePassword(RSTTemplate, username, password);\n  return RST;\n};\n\n/**\n * Handles the processing of a RSTR\n * @private\n * @param  {string}   body\n * @param  {WSTrustRequest.AcquireTokenCallback} callback\n */\nWSTrustRequest.prototype._handleRSTR = function(body, callback) {\n  var err;\n\n  var wstrustResponse = new WSTrustResponse(this._callContext, body, this._wstrustEndpointVersion);\n  try {\n    wstrustResponse.parse();\n  } catch (error) {\n    err = error;\n  }\n\n  callback(err, wstrustResponse);\n};\n\n/**\n * Performs a WS-Trust RequestSecurityToken request to obtain a federated token in exchange for a username password.\n * @param {string}   username  A username\n * @param {string}   password  The passowrd that corresponds to the username parameter.\n * @param {WSTrustRequest.AcquireTokenCallback} callback   Called once the federated token has been retrieved or on error.\n*/\nWSTrustRequest.prototype.acquireToken = function(username, password, callback) {\n  if (this._wstrustEndpointVersion === WSTrustVersion.UNDEFINED) {\n    var err = this._log.createError('Unsupported wstrust endpoint version. Current support version is wstrust2005 or wstrust13.');\n    callback(err);\n    return; \n  }\n\n  var self = this;\n  var RST = this._buildRST(username, password);\n\n  var soapAction = this._wstrustEndpointVersion === WSTrustVersion.WSTRUST2005 ? 'http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue' : 'http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue';\n\n  var options = util.createRequestOptions(\n    this,\n    {\n      headers : {\n        'Content-Type' : 'application/soap+xml; charset=utf-8',\n        'SOAPAction' : soapAction\n      },\n      body : RST\n    }\n  );\n\n  this._log.verbose('Sending RST to: ' + this._wstrustEndpointUrl, true);\n\n  request.post(this._wstrustEndpointUrl, options, util.createRequestHandler('WS-Trust RST', this._log, callback,\n    function(response, body) {\n      self._handleRSTR(body, callback);\n    }\n  ));\n};\n\n/**\n* @callback AcquireTokenCallback\n* @memberOf WSTrustRequest\n* @param {Error} err   Contains an error object if acquireToken fails.\n* @param {WSTrustResponse} A successful response to the RST.\n*/\n\nmodule.exports = WSTrustRequest;\n"]},"metadata":{},"sourceType":"script"}