{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _slicedToArray = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n\nvar login_1 = require(\"../login\");\n/**\n * Describes the credentials by retrieving token via Azure CLI.\n */\n\n\nvar AzureCliCredentials = /*#__PURE__*/function () {\n  function AzureCliCredentials(subscriptionInfo, tokenInfo) {\n    var resource = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"https://management.azure.com\";\n\n    _classCallCheck(this, AzureCliCredentials);\n\n    /**\n     * Azure resource endpoints.\n     * - Defaults to Azure Resource Manager from environment: AzureCloud. \"https://management.azure.com\"\n     * - For Azure KeyVault: \"https://vault.azure.net\"\n     * - For Azure Batch: \"https://batch.core.windows.net\"\n     * - For Azure Active Directory Graph: \"https://graph.windows.net\"\n     *\n     * To get the resource for other clouds:\n     * - `az cloud list`\n     */\n    // tslint:disable-next-line: no-inferrable-types\n    this.resource = \"https://management.azure.com\";\n    /**\n     * The number of seconds within which it is good to renew the token.\n     *  A constant set to 270 seconds (4.5 minutes).\n     */\n\n    this._tokenRenewalMarginInSeconds = 270;\n    this.subscriptionInfo = subscriptionInfo;\n    this.tokenInfo = tokenInfo;\n    this.resource = resource;\n  }\n  /**\n   * Tries to get the new token from Azure CLI, if the token has expired or the subscription has\n   * changed else uses the cached accessToken.\n   * @return The tokenResponse (tokenType and accessToken are the two important properties).\n   */\n\n\n  _createClass(AzureCliCredentials, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this._hasTokenExpired() || this._hasSubscriptionChanged() || this._hasResourceChanged())) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.prev = 1;\n                _context.next = 4;\n                return AzureCliCredentials.getAccessToken({\n                  subscriptionIdOrName: this.subscriptionInfo.id,\n                  resource: this.resource\n                });\n\n              case 4:\n                this.tokenInfo = _context.sent;\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                throw new Error(\"An error occurred while refreshing the new access \" + \"token:\".concat(_context.t0.stderr ? _context.t0.stderr : _context.t0.message));\n\n              case 10:\n                result = {\n                  accessToken: this.tokenInfo.accessToken,\n                  tokenType: this.tokenInfo.tokenType,\n                  expiresOn: this.tokenInfo.expiresOn,\n                  tenantId: this.tokenInfo.tenant\n                };\n                return _context.abrupt(\"return\", result);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n    }\n    /**\n     * Signs a request with the Authentication header.\n     * @param The request to be signed.\n     */\n\n  }, {\n    key: \"signRequest\",\n    value: function signRequest(webResource) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var tokenResponse;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getToken();\n\n              case 2:\n                tokenResponse = _context2.sent;\n                webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, \"\".concat(tokenResponse.tokenType, \" \").concat(tokenResponse.accessToken));\n                return _context2.abrupt(\"return\", webResource);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_hasTokenExpired\",\n    value: function _hasTokenExpired() {\n      var result = true;\n      var now = Math.floor(Date.now() / 1000);\n\n      if (this.tokenInfo.expiresOn && this.tokenInfo.expiresOn instanceof Date && Math.floor(this.tokenInfo.expiresOn.getTime() / 1000) - now > this._tokenRenewalMarginInSeconds) {\n        result = false;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_hasSubscriptionChanged\",\n    value: function _hasSubscriptionChanged() {\n      return this.subscriptionInfo.id !== this.tokenInfo.subscription;\n    }\n  }, {\n    key: \"_parseToken\",\n    value: function _parseToken() {\n      try {\n        var base64Url = this.tokenInfo.accessToken.split(\".\")[1];\n        var base64 = decodeURIComponent(Buffer.from(base64Url, \"base64\").toString(\"binary\").split(\"\").map(function (c) {\n          return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(\"\"));\n        return JSON.parse(base64);\n      } catch (err) {\n        var msg = \"An error occurred while parsing the access token: \".concat(err.stack);\n        throw new Error(msg);\n      }\n    }\n  }, {\n    key: \"_isAzureResourceManagerEndpoint\",\n    value: function _isAzureResourceManagerEndpoint(newResource, currentResource) {\n      if (newResource.endsWith(\"/\")) newResource = newResource.slice(0, -1);\n      if (currentResource.endsWith(\"/\")) currentResource = currentResource.slice(0, -1);\n      return newResource === \"https://management.core.windows.net\" && currentResource === \"https://management.azure.com\" || newResource === \"https://management.azure.com\" && currentResource === \"https://management.core.windows.net\";\n    }\n  }, {\n    key: \"_hasResourceChanged\",\n    value: function _hasResourceChanged() {\n      var parsedToken = this._parseToken(); // normalize the resource string, since it is possible to\n      // provide a resource without a trailing slash\n\n\n      var currentResource = parsedToken.aud && parsedToken.aud.endsWith(\"/\") ? parsedToken.aud.slice(0, -1) : parsedToken.aud;\n      var newResource = this.resource.endsWith(\"/\") ? this.resource.slice(0, -1) : this.resource;\n      var result = this._isAzureResourceManagerEndpoint(newResource, currentResource) ? false : currentResource !== newResource;\n      return result;\n    }\n    /**\n     * Gets the access token for the default or specified subscription.\n     * @param options Optional parameters that can be provided to get the access token.\n     */\n\n  }], [{\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var cmd, result, message;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                cmd = \"account get-access-token\";\n\n                if (options.subscriptionIdOrName) {\n                  cmd += \" -s \\\"\".concat(options.subscriptionIdOrName, \"\\\"\");\n                }\n\n                if (options.resource) {\n                  cmd += \" --resource \".concat(options.resource);\n                }\n\n                _context3.next = 6;\n                return login_1.execAz(cmd);\n\n              case 6:\n                result = _context3.sent;\n                result.expiresOn = new Date(result.expiresOn);\n                return _context3.abrupt(\"return\", result);\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](0);\n                message = \"An error occurred while getting credentials from \" + \"Azure CLI: \".concat(_context3.t0.stack);\n                throw new Error(message);\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 11]]);\n      }));\n    }\n    /**\n     * Gets the subscription from Azure CLI.\n     * @param subscriptionIdOrName - The name or id of the subscription for which the information is\n     * required.\n     */\n\n  }, {\n    key: \"getSubscription\",\n    value: function getSubscription(subscriptionIdOrName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var cmd, result, message;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(subscriptionIdOrName && (typeof subscriptionIdOrName !== \"string\" || !subscriptionIdOrName.length))) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error(\"'subscriptionIdOrName' must be a non-empty string.\");\n\n              case 2:\n                _context4.prev = 2;\n                cmd = \"account show\";\n\n                if (subscriptionIdOrName) {\n                  cmd += \" -s \\\"\".concat(subscriptionIdOrName, \"\\\"\");\n                }\n\n                _context4.next = 7;\n                return login_1.execAz(cmd);\n\n              case 7:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n\n              case 11:\n                _context4.prev = 11;\n                _context4.t0 = _context4[\"catch\"](2);\n                message = \"An error occurred while getting information about the current subscription from \" + \"Azure CLI: \".concat(_context4.t0.stack);\n                throw new Error(message);\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[2, 11]]);\n      }));\n    }\n    /**\n     * Sets the specified subscription as the default subscription for Azure CLI.\n     * @param subscriptionIdOrName The name or id of the subsciption that needs to be set as the\n     * default subscription.\n     */\n\n  }, {\n    key: \"setDefaultSubscription\",\n    value: function setDefaultSubscription(subscriptionIdOrName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var message;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return login_1.execAz(\"account set -s \".concat(subscriptionIdOrName));\n\n              case 3:\n                _context5.next = 9;\n                break;\n\n              case 5:\n                _context5.prev = 5;\n                _context5.t0 = _context5[\"catch\"](0);\n                message = \"An error occurred while setting the current subscription from \" + \"Azure CLI: \".concat(_context5.t0.stack);\n                throw new Error(message);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[0, 5]]);\n      }));\n    }\n    /**\n     * Returns a list of all the subscriptions from Azure CLI.\n     * @param options Optional parameters that can be provided while listing all the subcriptions.\n     */\n\n  }, {\n    key: \"listAllSubscriptions\",\n    value: function listAllSubscriptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var subscriptionList, cmd, _iterator, _step, sub, message;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                subscriptionList = [];\n                _context6.prev = 1;\n                cmd = \"account list\";\n\n                if (options.all) {\n                  cmd += \" --all\";\n                }\n\n                if (options.refresh) {\n                  cmd += \"--refresh\";\n                }\n\n                _context6.next = 7;\n                return login_1.execAz(cmd);\n\n              case 7:\n                subscriptionList = _context6.sent;\n\n                if (subscriptionList && subscriptionList.length) {\n                  _iterator = _createForOfIteratorHelper(subscriptionList);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      sub = _step.value;\n\n                      if (sub.cloudName) {\n                        sub.environmentName = sub.cloudName;\n                        delete sub.cloudName;\n                      }\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                }\n\n                return _context6.abrupt(\"return\", subscriptionList);\n\n              case 12:\n                _context6.prev = 12;\n                _context6.t0 = _context6[\"catch\"](1);\n                message = \"An error occurred while getting a list of all the subscription from \" + \"Azure CLI: \".concat(_context6.t0.stack);\n                throw new Error(message);\n\n              case 16:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[1, 12]]);\n      }));\n    }\n    /**\n     * Provides credentials that can be used by the JS SDK to interact with Azure via azure cli.\n     * **Pre-requisite**\n     * - **install azure-cli** . For more information see\n     * {@link https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest Install Azure CLI}\n     * - **login via `az login`**\n     * @param options - Optional parameters that can be provided while creating AzureCliCredentials.\n     */\n\n  }, {\n    key: \"create\",\n    value: function create() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _yield$Promise$all, _yield$Promise$all2, subscriptinInfo, accessToken;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return Promise.all([AzureCliCredentials.getSubscription(options.subscriptionIdOrName), AzureCliCredentials.getAccessToken(options)]);\n\n              case 2:\n                _yield$Promise$all = _context7.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                subscriptinInfo = _yield$Promise$all2[0];\n                accessToken = _yield$Promise$all2[1];\n                return _context7.abrupt(\"return\", new AzureCliCredentials(subscriptinInfo, accessToken, options.resource));\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n    }\n  }]);\n\n  return AzureCliCredentials;\n}();\n\nexports.AzureCliCredentials = AzureCliCredentials;","map":{"version":3,"sources":["../../../lib/credentials/azureCliCredentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\nconst login_1 = require(\"../login\");\n/**\n * Describes the credentials by retrieving token via Azure CLI.\n */\nclass AzureCliCredentials {\n    constructor(subscriptionInfo, tokenInfo, \n    // tslint:disable-next-line: no-inferrable-types\n    resource = \"https://management.azure.com\") {\n        /**\n         * Azure resource endpoints.\n         * - Defaults to Azure Resource Manager from environment: AzureCloud. \"https://management.azure.com\"\n         * - For Azure KeyVault: \"https://vault.azure.net\"\n         * - For Azure Batch: \"https://batch.core.windows.net\"\n         * - For Azure Active Directory Graph: \"https://graph.windows.net\"\n         *\n         * To get the resource for other clouds:\n         * - `az cloud list`\n         */\n        // tslint:disable-next-line: no-inferrable-types\n        this.resource = \"https://management.azure.com\";\n        /**\n         * The number of seconds within which it is good to renew the token.\n         *  A constant set to 270 seconds (4.5 minutes).\n         */\n        this._tokenRenewalMarginInSeconds = 270;\n        this.subscriptionInfo = subscriptionInfo;\n        this.tokenInfo = tokenInfo;\n        this.resource = resource;\n    }\n    /**\n     * Tries to get the new token from Azure CLI, if the token has expired or the subscription has\n     * changed else uses the cached accessToken.\n     * @return The tokenResponse (tokenType and accessToken are the two important properties).\n     */\n    getToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._hasTokenExpired() || this._hasSubscriptionChanged() || this._hasResourceChanged()) {\n                try {\n                    // refresh the access token\n                    this.tokenInfo = yield AzureCliCredentials.getAccessToken({\n                        subscriptionIdOrName: this.subscriptionInfo.id,\n                        resource: this.resource\n                    });\n                }\n                catch (err) {\n                    throw new Error(`An error occurred while refreshing the new access ` +\n                        `token:${err.stderr ? err.stderr : err.message}`);\n                }\n            }\n            const result = {\n                accessToken: this.tokenInfo.accessToken,\n                tokenType: this.tokenInfo.tokenType,\n                expiresOn: this.tokenInfo.expiresOn,\n                tenantId: this.tokenInfo.tenant\n            };\n            return result;\n        });\n    }\n    /**\n     * Signs a request with the Authentication header.\n     * @param The request to be signed.\n     */\n    signRequest(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tokenResponse = yield this.getToken();\n            webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, `${tokenResponse.tokenType} ${tokenResponse.accessToken}`);\n            return webResource;\n        });\n    }\n    _hasTokenExpired() {\n        let result = true;\n        const now = Math.floor(Date.now() / 1000);\n        if (this.tokenInfo.expiresOn &&\n            this.tokenInfo.expiresOn instanceof Date &&\n            Math.floor(this.tokenInfo.expiresOn.getTime() / 1000) - now > this._tokenRenewalMarginInSeconds) {\n            result = false;\n        }\n        return result;\n    }\n    _hasSubscriptionChanged() {\n        return this.subscriptionInfo.id !== this.tokenInfo.subscription;\n    }\n    _parseToken() {\n        try {\n            const base64Url = this.tokenInfo.accessToken.split(\".\")[1];\n            const base64 = decodeURIComponent(Buffer.from(base64Url, \"base64\").toString(\"binary\").split(\"\").map((c) => {\n                return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n            }).join(\"\"));\n            return JSON.parse(base64);\n        }\n        catch (err) {\n            const msg = `An error occurred while parsing the access token: ${err.stack}`;\n            throw new Error(msg);\n        }\n    }\n    _isAzureResourceManagerEndpoint(newResource, currentResource) {\n        if (newResource.endsWith(\"/\"))\n            newResource = newResource.slice(0, -1);\n        if (currentResource.endsWith(\"/\"))\n            currentResource = currentResource.slice(0, -1);\n        return (newResource === \"https://management.core.windows.net\" &&\n            currentResource === \"https://management.azure.com\") ||\n            (newResource === \"https://management.azure.com\" &&\n                currentResource === \"https://management.core.windows.net\");\n    }\n    _hasResourceChanged() {\n        const parsedToken = this._parseToken();\n        // normalize the resource string, since it is possible to\n        // provide a resource without a trailing slash\n        const currentResource = parsedToken.aud && parsedToken.aud.endsWith(\"/\")\n            ? parsedToken.aud.slice(0, -1)\n            : parsedToken.aud;\n        const newResource = this.resource.endsWith(\"/\")\n            ? this.resource.slice(0, -1)\n            : this.resource;\n        const result = this._isAzureResourceManagerEndpoint(newResource, currentResource)\n            ? false\n            : currentResource !== newResource;\n        return result;\n    }\n    /**\n     * Gets the access token for the default or specified subscription.\n     * @param options Optional parameters that can be provided to get the access token.\n     */\n    static getAccessToken(options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let cmd = \"account get-access-token\";\n                if (options.subscriptionIdOrName) {\n                    cmd += ` -s \"${options.subscriptionIdOrName}\"`;\n                }\n                if (options.resource) {\n                    cmd += ` --resource ${options.resource}`;\n                }\n                const result = yield login_1.execAz(cmd);\n                result.expiresOn = new Date(result.expiresOn);\n                return result;\n            }\n            catch (err) {\n                const message = `An error occurred while getting credentials from ` +\n                    `Azure CLI: ${err.stack}`;\n                throw new Error(message);\n            }\n        });\n    }\n    /**\n     * Gets the subscription from Azure CLI.\n     * @param subscriptionIdOrName - The name or id of the subscription for which the information is\n     * required.\n     */\n    static getSubscription(subscriptionIdOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (subscriptionIdOrName && (typeof subscriptionIdOrName !== \"string\" || !subscriptionIdOrName.length)) {\n                throw new Error(\"'subscriptionIdOrName' must be a non-empty string.\");\n            }\n            try {\n                let cmd = \"account show\";\n                if (subscriptionIdOrName) {\n                    cmd += ` -s \"${subscriptionIdOrName}\"`;\n                }\n                const result = yield login_1.execAz(cmd);\n                return result;\n            }\n            catch (err) {\n                const message = `An error occurred while getting information about the current subscription from ` +\n                    `Azure CLI: ${err.stack}`;\n                throw new Error(message);\n            }\n        });\n    }\n    /**\n     * Sets the specified subscription as the default subscription for Azure CLI.\n     * @param subscriptionIdOrName The name or id of the subsciption that needs to be set as the\n     * default subscription.\n     */\n    static setDefaultSubscription(subscriptionIdOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield login_1.execAz(`account set -s ${subscriptionIdOrName}`);\n            }\n            catch (err) {\n                const message = `An error occurred while setting the current subscription from ` +\n                    `Azure CLI: ${err.stack}`;\n                throw new Error(message);\n            }\n        });\n    }\n    /**\n     * Returns a list of all the subscriptions from Azure CLI.\n     * @param options Optional parameters that can be provided while listing all the subcriptions.\n     */\n    static listAllSubscriptions(options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let subscriptionList = [];\n            try {\n                let cmd = \"account list\";\n                if (options.all) {\n                    cmd += \" --all\";\n                }\n                if (options.refresh) {\n                    cmd += \"--refresh\";\n                }\n                subscriptionList = yield login_1.execAz(cmd);\n                if (subscriptionList && subscriptionList.length) {\n                    for (const sub of subscriptionList) {\n                        if (sub.cloudName) {\n                            sub.environmentName = sub.cloudName;\n                            delete sub.cloudName;\n                        }\n                    }\n                }\n                return subscriptionList;\n            }\n            catch (err) {\n                const message = `An error occurred while getting a list of all the subscription from ` +\n                    `Azure CLI: ${err.stack}`;\n                throw new Error(message);\n            }\n        });\n    }\n    /**\n     * Provides credentials that can be used by the JS SDK to interact with Azure via azure cli.\n     * **Pre-requisite**\n     * - **install azure-cli** . For more information see\n     * {@link https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest Install Azure CLI}\n     * - **login via `az login`**\n     * @param options - Optional parameters that can be provided while creating AzureCliCredentials.\n     */\n    static create(options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const [subscriptinInfo, accessToken] = yield Promise.all([\n                AzureCliCredentials.getSubscription(options.subscriptionIdOrName),\n                AzureCliCredentials.getAccessToken(options)\n            ]);\n            return new AzureCliCredentials(subscriptinInfo, accessToken, options.resource);\n        });\n    }\n}\nexports.AzureCliCredentials = AzureCliCredentials;\n//# sourceMappingURL=azureCliCredentials.js.map"]},"metadata":{},"sourceType":"script"}