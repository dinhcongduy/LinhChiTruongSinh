{"ast":null,"code":"/*\n * @copyright\n * Copyright © Microsoft Open Technologies, Inc.\n *\n * All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http: *www.apache.org/licenses/LICENSE-2.0\n *\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\n *\n * See the Apache License, Version 2.0 for the specific language\n * governing permissions and limitations under the License.\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar ac = require('./authentication-context');\n\nvar authParams = require('./authentication-parameters');\n\nvar logging = require('./log');\n\nvar MemoryCache = require('./memory-cache');\n\nexports = {};\nexports.Logging = logging.Logging;\nexports.AuthenticationContext = ac.AuthenticationContext;\nexports.setGlobalADALOptions = ac.setGlobalADALOptions;\nexports.getGlobalADALOptions = ac.getGlobalADALOptions;\nexports.MemoryCache = MemoryCache;\n\n_.extend(exports, authParams);\n/**\n * Creates a new AuthenticationContext object.  By default the authority will be checked against\n * a list of known Azure Active Directory authorities.  If the authority is not recognized as\n * one of these well known authorities then token acquisition will fail.  This behavior can be\n * turned off via the validateAuthority parameter below.\n * @function\n * @param {string}  authority            A URL that identifies a token authority.\n * @param {bool}    [validateAuthority]  Turns authority validation on or off.  This parameter default to true.\n * @returns {AuthenticationContext}      A new authentication context.\n */\n\n\nexports.createAuthenticationContext = function (authority, validateAuthority) {\n  return new ac.AuthenticationContext(authority, validateAuthority);\n};\n\nmodule.exports = exports;","map":{"version":3,"sources":["C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/adal-node/lib/adal.js"],"names":["_","require","ac","authParams","logging","MemoryCache","exports","Logging","AuthenticationContext","setGlobalADALOptions","getGlobalADALOptions","extend","createAuthenticationContext","authority","validateAuthority","module"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AAEA,IAAIC,EAAE,GAAGD,OAAO,CAAC,0BAAD,CAAhB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,6BAAD,CAAxB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,IAAII,WAAW,GAAGJ,OAAO,CAAC,gBAAD,CAAzB;;AAEAK,OAAO,GAAG,EAAV;AAEAA,OAAO,CAACC,OAAR,GAAkBH,OAAO,CAACG,OAA1B;AACAD,OAAO,CAACE,qBAAR,GAAgCN,EAAE,CAACM,qBAAnC;AACAF,OAAO,CAACG,oBAAR,GAA+BP,EAAE,CAACO,oBAAlC;AACAH,OAAO,CAACI,oBAAR,GAA+BR,EAAE,CAACQ,oBAAlC;AACAJ,OAAO,CAACD,WAAR,GAAsBA,WAAtB;;AACAL,CAAC,CAACW,MAAF,CAASL,OAAT,EAAkBH,UAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,OAAO,CAACM,2BAAR,GAAsC,UAASC,SAAT,EAAoBC,iBAApB,EAAuC;AAC3E,SAAO,IAAIZ,EAAE,CAACM,qBAAP,CAA6BK,SAA7B,EAAwCC,iBAAxC,CAAP;AACD,CAFD;;AAIAC,MAAM,CAACT,OAAP,GAAiBA,OAAjB","sourcesContent":["/*\n * @copyright\n * Copyright © Microsoft Open Technologies, Inc.\n *\n * All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http: *www.apache.org/licenses/LICENSE-2.0\n *\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\n *\n * See the Apache License, Version 2.0 for the specific language\n * governing permissions and limitations under the License.\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar ac = require('./authentication-context');\nvar authParams = require('./authentication-parameters');\nvar logging = require('./log');\nvar MemoryCache = require('./memory-cache');\n\nexports = {};\n\nexports.Logging = logging.Logging;\nexports.AuthenticationContext = ac.AuthenticationContext;\nexports.setGlobalADALOptions = ac.setGlobalADALOptions;\nexports.getGlobalADALOptions = ac.getGlobalADALOptions;\nexports.MemoryCache = MemoryCache;\n_.extend(exports, authParams);\n\n/**\n * Creates a new AuthenticationContext object.  By default the authority will be checked against\n * a list of known Azure Active Directory authorities.  If the authority is not recognized as\n * one of these well known authorities then token acquisition will fail.  This behavior can be\n * turned off via the validateAuthority parameter below.\n * @function\n * @param {string}  authority            A URL that identifies a token authority.\n * @param {bool}    [validateAuthority]  Turns authority validation on or off.  This parameter default to true.\n * @returns {AuthenticationContext}      A new authentication context.\n */\nexports.createAuthenticationContext = function(authority, validateAuthority) {\n  return new ac.AuthenticationContext(authority, validateAuthority);\n};\n\nmodule.exports = exports;\n"]},"metadata":{},"sourceType":"script"}