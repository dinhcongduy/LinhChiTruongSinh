{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _intn = _interopRequireDefault(require(\"./intn\"));\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"../tracking-buffer/writable-tracking-buffer\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar BigInt = {\n  id: 0x7F,\n  type: 'INT8',\n  name: 'BigInt',\n  declaration: function declaration() {\n    return 'bigint';\n  },\n  generateTypeInfo: function generateTypeInfo() {\n    return Buffer.from([_intn.default.id, 0x08]);\n  },\n  generateParameterData: /*#__PURE__*/_regeneratorRuntime.mark(function generateParameterData(parameter, options) {\n    var buffer;\n    return _regeneratorRuntime.wrap(function generateParameterData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(parameter.value != null)) {\n              _context.next = 8;\n              break;\n            }\n\n            buffer = new _writableTrackingBuffer.default(9);\n            buffer.writeUInt8(8);\n            buffer.writeInt64LE(Number(parameter.value));\n            _context.next = 6;\n            return buffer.data;\n\n          case 6:\n            _context.next = 10;\n            break;\n\n          case 8:\n            _context.next = 10;\n            return Buffer.from([0x00]);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, generateParameterData);\n  }),\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'number') {\n      value = Number(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid number.');\n    }\n\n    if (value < Number.MIN_SAFE_INTEGER || value > Number.MAX_SAFE_INTEGER) {\n      return new TypeError(\"Value must be between \".concat(Number.MIN_SAFE_INTEGER, \" and \").concat(Number.MAX_SAFE_INTEGER, \", inclusive.  For smaller or bigger numbers, use VarChar type.\"));\n    }\n\n    return value;\n  }\n};\nvar _default = BigInt;\nexports.default = _default;\nmodule.exports = BigInt;","map":{"version":3,"sources":["D:/Bakery/Bakery_ReactjsSourceCode/node_modules/tedious/lib/data-types/bigint.js"],"names":["Object","defineProperty","exports","value","default","_intn","_interopRequireDefault","require","_writableTrackingBuffer","obj","__esModule","BigInt","id","type","name","declaration","generateTypeInfo","Buffer","from","generateParameterData","parameter","options","buffer","writeUInt8","writeInt64LE","Number","data","validate","isNaN","TypeError","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","_default","module"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAAlC;;AAEA,IAAIC,uBAAuB,GAAGF,sBAAsB,CAACC,OAAO,CAAC,6CAAD,CAAR,CAApD;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD;;AAE/F,IAAME,MAAM,GAAG;AACbC,EAAAA,EAAE,EAAE,IADS;AAEbC,EAAAA,IAAI,EAAE,MAFO;AAGbC,EAAAA,IAAI,EAAE,QAHO;AAIbC,EAAAA,WAAW,EAAE,uBAAY;AACvB,WAAO,QAAP;AACD,GANY;AAQbC,EAAAA,gBARa,8BAQM;AACjB,WAAOC,MAAM,CAACC,IAAP,CAAY,CAACb,KAAK,CAACD,OAAN,CAAcQ,EAAf,EAAmB,IAAnB,CAAZ,CAAP;AACD,GAVY;AAYZO,EAAAA,qBAZY,uEAYUC,SAZV,EAYqBC,OAZrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAaPD,SAAS,CAACjB,KAAV,IAAmB,IAbZ;AAAA;AAAA;AAAA;;AAcHmB,YAAAA,MAdG,GAcM,IAAId,uBAAuB,CAACJ,OAA5B,CAAoC,CAApC,CAdN;AAeTkB,YAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB;AACAD,YAAAA,MAAM,CAACE,YAAP,CAAoBC,MAAM,CAACL,SAAS,CAACjB,KAAX,CAA1B;AAhBS;AAiBT,mBAAMmB,MAAM,CAACI,IAAb;;AAjBS;AAAA;AAAA;;AAAA;AAAA;AAmBT,mBAAMT,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAN;;AAnBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBbS,EAAAA,QAAQ,EAAE,kBAAUxB,KAAV,EAAiB;AACzB,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,MAAAA,KAAK,GAAGsB,MAAM,CAACtB,KAAD,CAAd;AACD;;AAED,QAAIyB,KAAK,CAACzB,KAAD,CAAT,EAAkB;AAChB,aAAO,IAAI0B,SAAJ,CAAc,iBAAd,CAAP;AACD;;AAED,QAAI1B,KAAK,GAAGsB,MAAM,CAACK,gBAAf,IAAmC3B,KAAK,GAAGsB,MAAM,CAACM,gBAAtD,EAAwE;AACtE,aAAO,IAAIF,SAAJ,iCAAuCJ,MAAM,CAACK,gBAA9C,kBAAsEL,MAAM,CAACM,gBAA7E,oEAAP;AACD;;AAED,WAAO5B,KAAP;AACD;AAzCY,CAAf;AA2CA,IAAI6B,QAAQ,GAAGrB,MAAf;AACAT,OAAO,CAACE,OAAR,GAAkB4B,QAAlB;AACAC,MAAM,CAAC/B,OAAP,GAAiBS,MAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _intn = _interopRequireDefault(require(\"./intn\"));\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"../tracking-buffer/writable-tracking-buffer\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst BigInt = {\n  id: 0x7F,\n  type: 'INT8',\n  name: 'BigInt',\n  declaration: function () {\n    return 'bigint';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([_intn.default.id, 0x08]);\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value != null) {\n      const buffer = new _writableTrackingBuffer.default(9);\n      buffer.writeUInt8(8);\n      buffer.writeInt64LE(Number(parameter.value));\n      yield buffer.data;\n    } else {\n      yield Buffer.from([0x00]);\n    }\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'number') {\n      value = Number(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid number.');\n    }\n\n    if (value < Number.MIN_SAFE_INTEGER || value > Number.MAX_SAFE_INTEGER) {\n      return new TypeError(`Value must be between ${Number.MIN_SAFE_INTEGER} and ${Number.MAX_SAFE_INTEGER}, inclusive.  For smaller or bigger numbers, use VarChar type.`);\n    }\n\n    return value;\n  }\n};\nvar _default = BigInt;\nexports.default = _default;\nmodule.exports = BigInt;"]},"metadata":{},"sourceType":"script"}