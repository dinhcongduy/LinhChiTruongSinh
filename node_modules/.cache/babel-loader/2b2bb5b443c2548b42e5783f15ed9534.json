{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _intn = _interopRequireDefault(require(\"./intn\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst TinyInt = {\n  id: 0x30,\n  type: 'INT1',\n  name: 'TinyInt',\n  declaration: function () {\n    return 'tinyint';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([_intn.default.id, 0x01]);\n  },\n\n  generateParameterData: function* (parameter, options) {\n    if (parameter.value != null) {\n      const buffer = Buffer.alloc(2);\n      let offset = 0;\n      offset = buffer.writeUInt8(1, offset);\n      buffer.writeUInt8(Number(parameter.value), offset);\n      yield buffer;\n    } else {\n      yield Buffer.from([0x00]);\n    }\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'number') {\n      value = Number(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid number.');\n    }\n\n    if (value < 0 || value > 255) {\n      return new TypeError('Value must be between 0 and 255, inclusive.');\n    }\n\n    return value | 0;\n  }\n};\nvar _default = TinyInt;\nexports.default = _default;\nmodule.exports = TinyInt;","map":{"version":3,"sources":["D:/Bakery/Bakery_ReactjsSourceCode/node_modules/tedious/lib/data-types/tinyint.js"],"names":["Object","defineProperty","exports","value","default","_intn","_interopRequireDefault","require","obj","__esModule","TinyInt","id","type","name","declaration","generateTypeInfo","Buffer","from","generateParameterData","parameter","options","buffer","alloc","offset","writeUInt8","Number","validate","isNaN","TypeError","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAAlC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEJ,IAAAA,OAAO,EAAEI;AAAX,GAArC;AAAwD;;AAE/F,MAAME,OAAO,GAAG;AACdC,EAAAA,EAAE,EAAE,IADU;AAEdC,EAAAA,IAAI,EAAE,MAFQ;AAGdC,EAAAA,IAAI,EAAE,SAHQ;AAIdC,EAAAA,WAAW,EAAE,YAAY;AACvB,WAAO,SAAP;AACD,GANa;;AAQdC,EAAAA,gBAAgB,GAAG;AACjB,WAAOC,MAAM,CAACC,IAAP,CAAY,CAACZ,KAAK,CAACD,OAAN,CAAcO,EAAf,EAAmB,IAAnB,CAAZ,CAAP;AACD,GAVa;;AAYdO,EAAAA,qBAAqB,EAAE,WAAWC,SAAX,EAAsBC,OAAtB,EAA+B;AACpD,QAAID,SAAS,CAAChB,KAAV,IAAmB,IAAvB,EAA6B;AAC3B,YAAMkB,MAAM,GAAGL,MAAM,CAACM,KAAP,CAAa,CAAb,CAAf;AACA,UAAIC,MAAM,GAAG,CAAb;AACAA,MAAAA,MAAM,GAAGF,MAAM,CAACG,UAAP,CAAkB,CAAlB,EAAqBD,MAArB,CAAT;AACAF,MAAAA,MAAM,CAACG,UAAP,CAAkBC,MAAM,CAACN,SAAS,CAAChB,KAAX,CAAxB,EAA2CoB,MAA3C;AACA,YAAMF,MAAN;AACD,KAND,MAMO;AACL,YAAML,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAN;AACD;AACF,GAtBa;AAuBdS,EAAAA,QAAQ,EAAE,UAAUvB,KAAV,EAAiB;AACzB,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,MAAAA,KAAK,GAAGsB,MAAM,CAACtB,KAAD,CAAd;AACD;;AAED,QAAIwB,KAAK,CAACxB,KAAD,CAAT,EAAkB;AAChB,aAAO,IAAIyB,SAAJ,CAAc,iBAAd,CAAP;AACD;;AAED,QAAIzB,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,GAAzB,EAA8B;AAC5B,aAAO,IAAIyB,SAAJ,CAAc,6CAAd,CAAP;AACD;;AAED,WAAOzB,KAAK,GAAG,CAAf;AACD;AAzCa,CAAhB;AA2CA,IAAI0B,QAAQ,GAAGnB,OAAf;AACAR,OAAO,CAACE,OAAR,GAAkByB,QAAlB;AACAC,MAAM,CAAC5B,OAAP,GAAiBQ,OAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _intn = _interopRequireDefault(require(\"./intn\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst TinyInt = {\n  id: 0x30,\n  type: 'INT1',\n  name: 'TinyInt',\n  declaration: function () {\n    return 'tinyint';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([_intn.default.id, 0x01]);\n  },\n\n  generateParameterData: function* (parameter, options) {\n    if (parameter.value != null) {\n      const buffer = Buffer.alloc(2);\n      let offset = 0;\n      offset = buffer.writeUInt8(1, offset);\n      buffer.writeUInt8(Number(parameter.value), offset);\n      yield buffer;\n    } else {\n      yield Buffer.from([0x00]);\n    }\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'number') {\n      value = Number(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid number.');\n    }\n\n    if (value < 0 || value > 255) {\n      return new TypeError('Value must be between 0 and 255, inclusive.');\n    }\n\n    return value | 0;\n  }\n};\nvar _default = TinyInt;\nexports.default = _default;\nmodule.exports = TinyInt;"]},"metadata":{},"sourceType":"script"}