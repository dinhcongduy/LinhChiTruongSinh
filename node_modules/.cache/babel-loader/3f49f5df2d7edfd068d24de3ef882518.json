{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _get = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"D:/Bakery/Bakery_ReactjsSourceCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _errors = require(\"./errors\");\n/**\n * ```js\n * const { Request } = require('tedious');\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\n *   // Request completion callback...\n * });\n * connection.execSql(request);\n * ```\n */\n\n\nvar Request = /*#__PURE__*/function (_events$EventEmitter) {\n  _inherits(Request, _events$EventEmitter);\n\n  var _super = _createSuper(Request);\n\n  _createClass(Request, [{\n    key: \"on\",\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * This event, describing result set columns, will be emitted before row\n     * events are emitted. This event may be emited multiple times when more\n     * than one recordset is produced by the statement.\n     *\n     * An array like object, where the columns can be accessed either by index\n     * or name. Columns with a name that is an integer are not accessible by name,\n     * as it would be interpreted as an array index.\n     */\n\n    /**\n     * The request has been prepared and can be used in subsequent calls to execute and unprepare.\n     */\n\n    /**\n     * The request encountered an error and has not been prepared.\n     */\n\n    /**\n     * A row resulting from execution of the SQL statement.\n     */\n\n    /**\n     * All rows from a result set have been provided (through `row` events).\n     *\n     * This token is used to indicate the completion of a SQL statement.\n     * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\n     * An `done` event is emited for each SQL statement in the SQL batch except variable declarations.\n     * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\n     *\n     * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\n     * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\n     */\n\n    /**\n     * `request.on('doneInProc', function (rowCount, more, rows) { });`\n     *\n     * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\n     * in a stored procedure have been provided (through `row` events).\n     *\n     * This event may also occur when executing multiple calls with the same query using [[execSql]].\n     */\n\n    /**\n     * Indicates the completion status of a stored procedure. This is also generated for stored procedures\n     * executed through SQL statements.\\\n     * This event may also occur when executing multiple calls with the same query using [[execSql]].\n     */\n\n    /**\n     * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\n     * See also `Using Parameters`.\n     */\n\n    /**\n     * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\n     */\n    value: function on(event, listener) {\n      return _get(_getPrototypeOf(Request.prototype), \"on\", this).call(this, event, listener);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var _get2;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_get2 = _get(_getPrototypeOf(Request.prototype), \"emit\", this)).call.apply(_get2, [this, event].concat(args));\n    }\n    /**\n     * @param sqlTextOrProcedure\n     *   The SQL statement to be executed\n     *\n     * @param callback\n     *   The callback to execute once the request has been fully completed.\n     */\n\n  }]);\n\n  function Request(sqlTextOrProcedure, callback) {\n    var _this;\n\n    _classCallCheck(this, Request);\n\n    _this = _super.call(this);\n    _this.sqlTextOrProcedure = void 0;\n    _this.parameters = void 0;\n    _this.parametersByName = void 0;\n    _this.originalParameters = void 0;\n    _this.preparing = void 0;\n    _this.canceled = void 0;\n    _this.paused = void 0;\n    _this.userCallback = void 0;\n    _this.handle = void 0;\n    _this.error = void 0;\n    _this.connection = void 0;\n    _this.timeout = void 0;\n    _this.rows = void 0;\n    _this.rst = void 0;\n    _this.rowCount = void 0;\n    _this.callback = void 0;\n    _this.sqlTextOrProcedure = sqlTextOrProcedure;\n    _this.parameters = [];\n    _this.parametersByName = {};\n    _this.originalParameters = [];\n    _this.preparing = false;\n    _this.handle = undefined;\n    _this.canceled = false;\n    _this.paused = false;\n    _this.error = undefined;\n    _this.connection = undefined;\n    _this.timeout = undefined;\n    _this.userCallback = callback;\n\n    _this.callback = function (err, rowCount, rows) {\n      if (this.preparing) {\n        this.preparing = false;\n\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n\n    return _this;\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types.\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  // TODO: `type` must be a valid TDS value type\n\n\n  _createClass(Request, [{\n    key: \"addParameter\",\n    value: function addParameter(name, type, value, options) {\n      if (options == null) {\n        options = {};\n      }\n\n      var _options = options,\n          _options$output = _options.output,\n          output = _options$output === void 0 ? false : _options$output,\n          length = _options.length,\n          precision = _options.precision,\n          scale = _options.scale;\n      var parameter = {\n        type: type,\n        name: name,\n        value: value,\n        output: output,\n        length: length,\n        precision: precision,\n        scale: scale\n      };\n      this.parameters.push(parameter);\n      this.parametersByName[name] = parameter;\n    }\n    /**\n     * @param name\n     *   The parameter name. This should correspond to a parameter in the SQL,\n     *   or a parameter that a called procedure expects.\n     *\n     * @param type\n     *   One of the supported data types.\n     *\n     * @param value\n     *   The value that the parameter is to be given. The Javascript type of the\n     *   argument should match that documented for data types\n     *\n     * @param options\n     *   Additional type options. Optional.\n     */\n\n  }, {\n    key: \"addOutputParameter\",\n    value: function addOutputParameter(name, type, value, options) {\n      if (options == null) {\n        options = {};\n      }\n\n      options.output = true;\n      this.addParameter(name, type, value, options);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"makeParamsParameter\",\n    value: function makeParamsParameter(parameters) {\n      var paramsParameter = '';\n\n      for (var i = 0, len = parameters.length; i < len; i++) {\n        var parameter = parameters[i];\n\n        if (paramsParameter.length > 0) {\n          paramsParameter += ', ';\n        }\n\n        paramsParameter += '@' + parameter.name + ' ';\n        paramsParameter += parameter.type.declaration(parameter);\n\n        if (parameter.output) {\n          paramsParameter += ' OUTPUT';\n        }\n      }\n\n      return paramsParameter;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"transformIntoExecuteSqlRpc\",\n    value: function transformIntoExecuteSqlRpc() {\n      if (this.validateParameters()) {\n        return;\n      }\n\n      this.originalParameters = this.parameters;\n      this.parameters = [];\n      this.addParameter('statement', _dataType.typeByName.NVarChar, this.sqlTextOrProcedure);\n\n      if (this.originalParameters.length) {\n        this.addParameter('params', _dataType.typeByName.NVarChar, this.makeParamsParameter(this.originalParameters));\n      }\n\n      for (var i = 0, len = this.originalParameters.length; i < len; i++) {\n        var parameter = this.originalParameters[i];\n        this.parameters.push(parameter);\n      }\n\n      this.sqlTextOrProcedure = 'sp_executesql';\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"transformIntoPrepareRpc\",\n    value: function transformIntoPrepareRpc() {\n      var _this2 = this;\n\n      this.originalParameters = this.parameters;\n      this.parameters = [];\n      this.addOutputParameter('handle', _dataType.typeByName.Int, undefined);\n      this.addParameter('params', _dataType.typeByName.NVarChar, this.makeParamsParameter(this.originalParameters));\n      this.addParameter('stmt', _dataType.typeByName.NVarChar, this.sqlTextOrProcedure);\n      this.sqlTextOrProcedure = 'sp_prepare';\n      this.preparing = true;\n      this.on('returnValue', function (name, value) {\n        if (name === 'handle') {\n          _this2.handle = value;\n        } else {\n          _this2.error = (0, _errors.RequestError)(\"Tedious > Unexpected output parameter \".concat(name, \" from sp_prepare\"));\n        }\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"transformIntoUnprepareRpc\",\n    value: function transformIntoUnprepareRpc() {\n      this.parameters = [];\n      this.addParameter('handle', _dataType.typeByName.Int, this.handle);\n      this.sqlTextOrProcedure = 'sp_unprepare';\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"transformIntoExecuteRpc\",\n    value: function transformIntoExecuteRpc(parameters) {\n      this.parameters = [];\n      this.addParameter('handle', _dataType.typeByName.Int, this.handle);\n\n      for (var i = 0, len = this.originalParameters.length; i < len; i++) {\n        var parameter = this.originalParameters[i];\n        parameter.value = parameters[parameter.name];\n        this.parameters.push(parameter);\n      }\n\n      if (this.validateParameters()) {\n        return;\n      }\n\n      this.sqlTextOrProcedure = 'sp_execute';\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"validateParameters\",\n    value: function validateParameters() {\n      for (var i = 0, len = this.parameters.length; i < len; i++) {\n        var parameter = this.parameters[i];\n        var value = parameter.type.validate(parameter.value);\n\n        if (value instanceof TypeError) {\n          return this.error = new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + value.message, 'EPARAM');\n        }\n\n        parameter.value = value;\n      }\n\n      return null;\n    }\n    /**\n     * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\n     * If this request is already in a paused state, calling [[pause]] has no effect.\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.paused) {\n        return;\n      }\n\n      this.paused = true;\n\n      if (this.connection) {\n        this.connection.pauseRequest(this);\n      }\n    }\n    /**\n     * Resumes the flow of data from the database.\n     * If this request is not in a paused state, calling [[resume]] has no effect.\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this.paused) {\n        return;\n      }\n\n      this.paused = false;\n\n      if (this.connection) {\n        this.connection.resumeRequest(this);\n      }\n    }\n    /**\n     * Cancels a request while waiting for a server response.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.canceled) {\n        return;\n      }\n\n      this.canceled = true;\n      this.emit('cancel');\n    }\n    /**\n     * Sets a timeout for this request.\n     *\n     * @param timeout\n     *   The number of milliseconds before the request is considered failed,\n     *   or `0` for no timeout. When no timeout is set for the request,\n     *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\n     */\n\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(timeout) {\n      this.timeout = timeout;\n    }\n  }]);\n\n  return Request;\n}(_events.EventEmitter);\n\nvar _default = Request;\nexports.default = _default;\nmodule.exports = Request;","map":{"version":3,"sources":["D:/Bakery/Bakery_ReactjsSourceCode/node_modules/tedious/lib/request.js"],"names":["Object","defineProperty","exports","value","default","_events","require","_dataType","_errors","Request","event","listener","args","sqlTextOrProcedure","callback","parameters","parametersByName","originalParameters","preparing","canceled","paused","userCallback","handle","error","connection","timeout","rows","rst","rowCount","undefined","err","emit","name","type","options","output","length","precision","scale","parameter","push","addParameter","paramsParameter","i","len","declaration","validateParameters","typeByName","NVarChar","makeParamsParameter","addOutputParameter","Int","on","RequestError","validate","TypeError","message","pauseRequest","resumeRequest","EventEmitter","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _errors = require(\"./errors\");\n\n/**\n * ```js\n * const { Request } = require('tedious');\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\n *   // Request completion callback...\n * });\n * connection.execSql(request);\n * ```\n */\nclass Request extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * This event, describing result set columns, will be emitted before row\n   * events are emitted. This event may be emited multiple times when more\n   * than one recordset is produced by the statement.\n   *\n   * An array like object, where the columns can be accessed either by index\n   * or name. Columns with a name that is an integer are not accessible by name,\n   * as it would be interpreted as an array index.\n   */\n\n  /**\n   * The request has been prepared and can be used in subsequent calls to execute and unprepare.\n   */\n\n  /**\n   * The request encountered an error and has not been prepared.\n   */\n\n  /**\n   * A row resulting from execution of the SQL statement.\n   */\n\n  /**\n   * All rows from a result set have been provided (through `row` events).\n   *\n   * This token is used to indicate the completion of a SQL statement.\n   * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\n   * An `done` event is emited for each SQL statement in the SQL batch except variable declarations.\n   * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\n   *\n   * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\n   * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\n   */\n\n  /**\n   * `request.on('doneInProc', function (rowCount, more, rows) { });`\n   *\n   * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\n   * in a stored procedure have been provided (through `row` events).\n   *\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n\n  /**\n   * Indicates the completion status of a stored procedure. This is also generated for stored procedures\n   * executed through SQL statements.\\\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n\n  /**\n   * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\n   * See also `Using Parameters`.\n   */\n\n  /**\n   * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\n   */\n  on(event, listener) {\n    return super.on(event, listener);\n  }\n  /**\n   * @private\n   */\n\n\n  emit(event, ...args) {\n    return super.emit(event, ...args);\n  }\n  /**\n   * @param sqlTextOrProcedure\n   *   The SQL statement to be executed\n   *\n   * @param callback\n   *   The callback to execute once the request has been fully completed.\n   */\n\n\n  constructor(sqlTextOrProcedure, callback) {\n    super();\n    this.sqlTextOrProcedure = void 0;\n    this.parameters = void 0;\n    this.parametersByName = void 0;\n    this.originalParameters = void 0;\n    this.preparing = void 0;\n    this.canceled = void 0;\n    this.paused = void 0;\n    this.userCallback = void 0;\n    this.handle = void 0;\n    this.error = void 0;\n    this.connection = void 0;\n    this.timeout = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.callback = void 0;\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\n    this.parameters = [];\n    this.parametersByName = {};\n    this.originalParameters = [];\n    this.preparing = false;\n    this.handle = undefined;\n    this.canceled = false;\n    this.paused = false;\n    this.error = undefined;\n    this.connection = undefined;\n    this.timeout = undefined;\n    this.userCallback = callback;\n\n    this.callback = function (err, rowCount, rows) {\n      if (this.preparing) {\n        this.preparing = false;\n\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types.\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  // TODO: `type` must be a valid TDS value type\n\n\n  addParameter(name, type, value, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const {\n      output = false,\n      length,\n      precision,\n      scale\n    } = options;\n    const parameter = {\n      type: type,\n      name: name,\n      value: value,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale\n    };\n    this.parameters.push(parameter);\n    this.parametersByName[name] = parameter;\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n\n\n  addOutputParameter(name, type, value, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    options.output = true;\n    this.addParameter(name, type, value, options);\n  }\n  /**\n   * @private\n   */\n\n\n  makeParamsParameter(parameters) {\n    let paramsParameter = '';\n\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n\n      if (paramsParameter.length > 0) {\n        paramsParameter += ', ';\n      }\n\n      paramsParameter += '@' + parameter.name + ' ';\n      paramsParameter += parameter.type.declaration(parameter);\n\n      if (parameter.output) {\n        paramsParameter += ' OUTPUT';\n      }\n    }\n\n    return paramsParameter;\n  }\n  /**\n   * @private\n   */\n\n\n  transformIntoExecuteSqlRpc() {\n    if (this.validateParameters()) {\n      return;\n    }\n\n    this.originalParameters = this.parameters;\n    this.parameters = [];\n    this.addParameter('statement', _dataType.typeByName.NVarChar, this.sqlTextOrProcedure);\n\n    if (this.originalParameters.length) {\n      this.addParameter('params', _dataType.typeByName.NVarChar, this.makeParamsParameter(this.originalParameters));\n    }\n\n    for (let i = 0, len = this.originalParameters.length; i < len; i++) {\n      const parameter = this.originalParameters[i];\n      this.parameters.push(parameter);\n    }\n\n    this.sqlTextOrProcedure = 'sp_executesql';\n  }\n  /**\n   * @private\n   */\n\n\n  transformIntoPrepareRpc() {\n    this.originalParameters = this.parameters;\n    this.parameters = [];\n    this.addOutputParameter('handle', _dataType.typeByName.Int, undefined);\n    this.addParameter('params', _dataType.typeByName.NVarChar, this.makeParamsParameter(this.originalParameters));\n    this.addParameter('stmt', _dataType.typeByName.NVarChar, this.sqlTextOrProcedure);\n    this.sqlTextOrProcedure = 'sp_prepare';\n    this.preparing = true;\n    this.on('returnValue', (name, value) => {\n      if (name === 'handle') {\n        this.handle = value;\n      } else {\n        this.error = (0, _errors.RequestError)(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\n      }\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  transformIntoUnprepareRpc() {\n    this.parameters = [];\n    this.addParameter('handle', _dataType.typeByName.Int, this.handle);\n    this.sqlTextOrProcedure = 'sp_unprepare';\n  }\n  /**\n   * @private\n   */\n\n\n  transformIntoExecuteRpc(parameters) {\n    this.parameters = [];\n    this.addParameter('handle', _dataType.typeByName.Int, this.handle);\n\n    for (let i = 0, len = this.originalParameters.length; i < len; i++) {\n      const parameter = this.originalParameters[i];\n      parameter.value = parameters[parameter.name];\n      this.parameters.push(parameter);\n    }\n\n    if (this.validateParameters()) {\n      return;\n    }\n\n    this.sqlTextOrProcedure = 'sp_execute';\n  }\n  /**\n   * @private\n   */\n\n\n  validateParameters() {\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\n      const parameter = this.parameters[i];\n      const value = parameter.type.validate(parameter.value);\n\n      if (value instanceof TypeError) {\n        return this.error = new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + value.message, 'EPARAM');\n      }\n\n      parameter.value = value;\n    }\n\n    return null;\n  }\n  /**\n   * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\n   * If this request is already in a paused state, calling [[pause]] has no effect.\n   */\n\n\n  pause() {\n    if (this.paused) {\n      return;\n    }\n\n    this.paused = true;\n\n    if (this.connection) {\n      this.connection.pauseRequest(this);\n    }\n  }\n  /**\n   * Resumes the flow of data from the database.\n   * If this request is not in a paused state, calling [[resume]] has no effect.\n   */\n\n\n  resume() {\n    if (!this.paused) {\n      return;\n    }\n\n    this.paused = false;\n\n    if (this.connection) {\n      this.connection.resumeRequest(this);\n    }\n  }\n  /**\n   * Cancels a request while waiting for a server response.\n   */\n\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n  /**\n   * Sets a timeout for this request.\n   *\n   * @param timeout\n   *   The number of milliseconds before the request is considered failed,\n   *   or `0` for no timeout. When no timeout is set for the request,\n   *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\n   */\n\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n\n}\n\nvar _default = Request;\nexports.default = _default;\nmodule.exports = Request;"]},"metadata":{},"sourceType":"script"}