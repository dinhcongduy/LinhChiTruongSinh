{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Bakery\\\\Bakery_ReactjsSourceCode\\\\src\\\\views\\\\customer\\\\CustomerListView\\\\Toolbar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Box, Button, Card, CardContent, TextField, InputAdornment, SvgIcon, makeStyles, Drawer, Typography, FormControlLabel } from '@material-ui/core';\nimport { Search as SearchIcon } from 'react-feather';\nimport MAWB from './MAWB';\n\nlet Connection = require('tedious').Connection;\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  importButton: {\n    marginRight: theme.spacing(1)\n  },\n  exportButton: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst Toolbar = ({\n  className,\n  handleAddOrderToindexJS,\n  ...rest\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [opensides, setopenside] = useState(false);\n\n  const list = anchor => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: clsx(classes.list, {\n      [classes.fullList]: anchor === 'top' || anchor === 'bottom'\n    }),\n    role: \"presentation\" //   onClick={setopenside(false)}\n    //   onKeyDown={setopenside(false)}\n    ,\n    children: /*#__PURE__*/_jsxDEV(MAWB, {\n      type: 'newMAWB',\n      handleAddOrder: handleAddOrder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n\n  const handleAddOrder = item => {\n    handleAddOrderToindexJS(item);\n  };\n\n  async function connsql() {\n    const config = {\n      server: '103.114.104.246',\n      options: {\n        database: \"CARRGO_CS\"\n      },\n      authentication: {\n        type: 'default',\n        options: {\n          userName: 'sa',\n          password: 'Stone1234'\n        }\n      }\n    };\n    const connection = new Connection(config);\n    connection.on('connect', async function (err) {\n      if (err) {\n        alert('Error: ', err);\n      }\n\n      let request = await new Request(\"select 42, 'hello world'\", function (errs, rowCount) {\n        if (errs) {\n          alert(errs);\n        } else {\n          alert(rowCount + ' rows');\n        }\n      });\n      request.on('row', function (columns) {\n        columns.forEach(function (column) {//console.log(column.value);\n        });\n      });\n      connection.execSql(request);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: clsx(classes.root, className),\n    ...rest,\n    children: [/*#__PURE__*/_jsxDEV(Drawer, {\n      anchor: \"right\",\n      open: opensides,\n      onClose: () => setopenside(false),\n      children: list('')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\" //onClick={() => setopenside(true)}\n        ,\n        onClick: () => setopenside(true),\n        children: \"Th\\xEAm \\u0111\\u01A1n h\\xE0ng\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 3,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            maxWidth: 500,\n            flexDirection: row,\n            style: {\n              flex: 1,\n              flexDirection: 'column'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              InputProps: {\n                startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"start\",\n                  children: /*#__PURE__*/_jsxDEV(SvgIcon, {\n                    fontSize: \"small\",\n                    color: \"action\",\n                    children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 124,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 120,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 21\n                }, this)\n              },\n              placeholder: \"Search customer\",\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              fullWidth: true //className={classes.formControl}\n              ,\n              label: /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.formControlLabel,\n                children: \"Ng\\xE0y\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 24\n              }, this),\n              style: {},\n              labelPlacement: \"start\",\n              control: /*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                autoComplete: \"off\",\n                size: \"small\",\n                InputProps: {\n                  style: {\n                    fontSize: 14\n                  }\n                },\n                style: {\n                  width: 200\n                },\n                type: \"date\" // helperText=\"Please specify the first name\"\n                ,\n                name: \"firstName\",\n                onChange: e => {},\n                value: \"\",\n                variant: \"outlined\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Toolbar, \"ArRdMiE63r3akDaPOxs/5foSzTs=\", false, function () {\n  return [useStyles];\n});\n\n_c = Toolbar;\nToolbar.propTypes = {\n  className: PropTypes.string\n};\nexport default Toolbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"sources":["D:/Bakery/Bakery_ReactjsSourceCode/src/views/customer/CustomerListView/Toolbar.js"],"names":["React","useState","PropTypes","clsx","Box","Button","Card","CardContent","TextField","InputAdornment","SvgIcon","makeStyles","Drawer","Typography","FormControlLabel","Search","SearchIcon","MAWB","Connection","require","useStyles","theme","root","importButton","marginRight","spacing","exportButton","Toolbar","className","handleAddOrderToindexJS","rest","classes","opensides","setopenside","list","anchor","fullList","handleAddOrder","item","connsql","config","server","options","database","authentication","type","userName","password","connection","on","err","alert","request","Request","errs","rowCount","columns","forEach","column","execSql","row","flex","flexDirection","startAdornment","formControlLabel","style","fontSize","width","e","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  TextField,\n  InputAdornment,\n  SvgIcon,\n  makeStyles,\n  Drawer,\n  Typography,\n  FormControlLabel\n} from '@material-ui/core';\nimport { Search as SearchIcon } from 'react-feather';\nimport MAWB from './MAWB';\n\nlet Connection = require('tedious').Connection;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  importButton: {\n    marginRight: theme.spacing(1)\n  },\n  exportButton: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\n\n\nconst Toolbar = ({ className, handleAddOrderToindexJS, ...rest }) => {\n  const classes = useStyles();\n  const [opensides, setopenside] = useState(false);\n  \n  const list = (anchor) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n      })}\n      role=\"presentation\"\n   //   onClick={setopenside(false)}\n   //   onKeyDown={setopenside(false)}\n    >\n      <MAWB type={'newMAWB'} handleAddOrder={handleAddOrder} />\n    </div>\n  );\n  const handleAddOrder = (item) => {\n    handleAddOrderToindexJS(item);\n  }\n  async function connsql() {\n    const config = {\n      server: '103.114.104.246',\n      options: {\n        database: \"CARRGO_CS\"\n      },\n      authentication: {\n        type: 'default',\n        options: {\n          userName: 'sa',\n          password: 'Stone1234'\n        }\n      }\n    };\n  \n    const connection = new Connection(config);\n    connection.on('connect', async function (err) {\n      if (err) {\n        alert('Error: ', err);\n      }\n      let request = await new Request(\"select 42, 'hello world'\", function (errs, rowCount) {\n        if (errs) {\n          alert(errs);\n        } else {\n          alert(rowCount + ' rows');\n        }\n      });\n  \n      request.on('row', function (columns) {\n        columns.forEach(function (column) {\n          //console.log(column.value);\n        });\n      });\n  \n      connection.execSql(request);\n    });\n  }\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Drawer anchor=\"right\" open={opensides} onClose={() => setopenside(false)}>\n        {list('')}\n      </Drawer>\n      <Box\n        display=\"flex\"\n        justifyContent=\"flex-end\"\n      >\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          //onClick={() => setopenside(true)}\n          onClick={() => setopenside(true)}\n        >\n          Thêm đơn hàng\n        </Button>\n      </Box>\n      <Box mt={3}>\n        <Card>\n          <CardContent>\n            <Box maxWidth={500} flexDirection={row} style={{ flex: 1, flexDirection: 'column' }}>\n              <TextField\n                fullWidth\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <SvgIcon\n                        fontSize=\"small\"\n                        color=\"action\"\n                      >\n                        <SearchIcon />\n                      </SvgIcon>\n                    </InputAdornment>\n                  )\n                }}\n                placeholder=\"Search customer\"\n                variant=\"outlined\"\n              />\n              <FormControlLabel\n                fullWidth\n                //className={classes.formControl}\n                label={<Typography className={classes.formControlLabel}>Ngày</Typography>}\n                style={{ }}\n                labelPlacement=\"start\"\n                control={(\n                  <TextField\n                    fullWidth\n                    autoComplete=\"off\"\n                    size=\"small\"\n                    InputProps={{ style: { fontSize: 14 } }}\n                    style={{ width: 200 }}\n                    type=\"date\"\n                    // helperText=\"Please specify the first name\"\n                    name=\"firstName\"\n                    onChange={e => {}}\n                    value=''\n                    variant=\"outlined\"\n                  />\n                )}\n              />      \n            </Box>\n          </CardContent>\n        </Card>\n      </Box>\n    </div>\n  );\n};\n\nToolbar.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Toolbar;\n"]},"metadata":{},"sourceType":"module"}