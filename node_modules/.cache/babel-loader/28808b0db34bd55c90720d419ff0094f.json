{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _intn = _interopRequireDefault(require(\"./intn\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst Int = {\n  id: 0x38,\n  type: 'INT4',\n  name: 'Int',\n  declaration: function () {\n    return 'int';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([_intn.default.id, 0x04]);\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value != null) {\n      const buffer = Buffer.alloc(1);\n      buffer.writeUInt8(4, 0);\n      yield buffer;\n      const buffer2 = Buffer.alloc(4);\n      buffer2.writeInt32LE(Number(parameter.value), 0);\n      yield buffer2;\n    } else {\n      yield Buffer.from([0x00]);\n    }\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'number') {\n      value = Number(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid number.');\n    }\n\n    if (value < -2147483648 || value > 2147483647) {\n      return new TypeError('Value must be between -2147483648 and 2147483647, inclusive.');\n    }\n\n    return value | 0;\n  }\n};\nvar _default = Int;\nexports.default = _default;\nmodule.exports = Int;","map":{"version":3,"sources":["C:/Users/chant/Desktop/Bakery_ReactjsSourceCode/node_modules/tedious/lib/data-types/int.js"],"names":["Object","defineProperty","exports","value","default","_intn","_interopRequireDefault","require","obj","__esModule","Int","id","type","name","declaration","generateTypeInfo","Buffer","from","generateParameterData","parameter","options","buffer","alloc","writeUInt8","buffer2","writeInt32LE","Number","validate","isNaN","TypeError","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAAlC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEJ,IAAAA,OAAO,EAAEI;AAAX,GAArC;AAAwD;;AAE/F,MAAME,GAAG,GAAG;AACVC,EAAAA,EAAE,EAAE,IADM;AAEVC,EAAAA,IAAI,EAAE,MAFI;AAGVC,EAAAA,IAAI,EAAE,KAHI;AAIVC,EAAAA,WAAW,EAAE,YAAY;AACvB,WAAO,KAAP;AACD,GANS;;AAQVC,EAAAA,gBAAgB,GAAG;AACjB,WAAOC,MAAM,CAACC,IAAP,CAAY,CAACZ,KAAK,CAACD,OAAN,CAAcO,EAAf,EAAmB,IAAnB,CAAZ,CAAP;AACD,GAVS;;AAYV,GAACO,qBAAD,CAAuBC,SAAvB,EAAkCC,OAAlC,EAA2C;AACzC,QAAID,SAAS,CAAChB,KAAV,IAAmB,IAAvB,EAA6B;AAC3B,YAAMkB,MAAM,GAAGL,MAAM,CAACM,KAAP,CAAa,CAAb,CAAf;AACAD,MAAAA,MAAM,CAACE,UAAP,CAAkB,CAAlB,EAAqB,CAArB;AACA,YAAMF,MAAN;AACA,YAAMG,OAAO,GAAGR,MAAM,CAACM,KAAP,CAAa,CAAb,CAAhB;AACAE,MAAAA,OAAO,CAACC,YAAR,CAAqBC,MAAM,CAACP,SAAS,CAAChB,KAAX,CAA3B,EAA8C,CAA9C;AACA,YAAMqB,OAAN;AACD,KAPD,MAOO;AACL,YAAMR,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAN;AACD;AACF,GAvBS;;AAyBVU,EAAAA,QAAQ,EAAE,UAAUxB,KAAV,EAAiB;AACzB,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,MAAAA,KAAK,GAAGuB,MAAM,CAACvB,KAAD,CAAd;AACD;;AAED,QAAIyB,KAAK,CAACzB,KAAD,CAAT,EAAkB;AAChB,aAAO,IAAI0B,SAAJ,CAAc,iBAAd,CAAP;AACD;;AAED,QAAI1B,KAAK,GAAG,CAAC,UAAT,IAAuBA,KAAK,GAAG,UAAnC,EAA+C;AAC7C,aAAO,IAAI0B,SAAJ,CAAc,8DAAd,CAAP;AACD;;AAED,WAAO1B,KAAK,GAAG,CAAf;AACD;AA3CS,CAAZ;AA6CA,IAAI2B,QAAQ,GAAGpB,GAAf;AACAR,OAAO,CAACE,OAAR,GAAkB0B,QAAlB;AACAC,MAAM,CAAC7B,OAAP,GAAiBQ,GAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _intn = _interopRequireDefault(require(\"./intn\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst Int = {\n  id: 0x38,\n  type: 'INT4',\n  name: 'Int',\n  declaration: function () {\n    return 'int';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([_intn.default.id, 0x04]);\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value != null) {\n      const buffer = Buffer.alloc(1);\n      buffer.writeUInt8(4, 0);\n      yield buffer;\n      const buffer2 = Buffer.alloc(4);\n      buffer2.writeInt32LE(Number(parameter.value), 0);\n      yield buffer2;\n    } else {\n      yield Buffer.from([0x00]);\n    }\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'number') {\n      value = Number(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid number.');\n    }\n\n    if (value < -2147483648 || value > 2147483647) {\n      return new TypeError('Value must be between -2147483648 and 2147483647, inclusive.');\n    }\n\n    return value | 0;\n  }\n};\nvar _default = Int;\nexports.default = _default;\nmodule.exports = Int;"]},"metadata":{},"sourceType":"script"}